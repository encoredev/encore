// Code generated by encore. DO NOT EDIT.

package echoclient

import (
	"context"
	__api "encore.dev/appruntime/apisdk/api"
	jsoniter "github.com/json-iterator/go"
	"net/http"
	"net/url"
)

type EncoreInternal_ConfigValuesReq = struct{}
type EncoreInternal_ConfigValuesResp = ConfigResponse
type EncoreInternal_PublishReq = struct{}
type EncoreInternal_ConsumerReq = *Message
type EncoreInternal_EchoReq = *Data[string, int]
type EncoreInternal_EchoResp = *Data[string, int]
type EncoreInternal_EmptyEchoReq = EmptyData
type EncoreInternal_EmptyEchoResp = EmptyData
type EncoreInternal_NonBasicEchoReq = *NonBasicData
type EncoreInternal_NonBasicEchoResp = *NonBasicData
type EncoreInternal_BasicEchoReq = *BasicData
type EncoreInternal_BasicEchoResp = *BasicData
type EncoreInternal_HeadersEchoReq = *HeadersData
type EncoreInternal_HeadersEchoResp = *HeadersData
type EncoreInternal_NoopReq = struct{}
type EncoreInternal_NilResponseReq = struct{}
type EncoreInternal_NilResponseResp = *BasicData
type EncoreInternal_MuteEchoReq = Data[string, string]
type EncoreInternal_PongReq = struct{}
type EncoreInternal_PongResp = Data[string, string]
type EncoreInternal_CustomHTTPStatusReq = struct{}
type EncoreInternal_CustomHTTPStatusResp = *HTTPStatusResponse
type EncoreInternal_EnvReq = struct{}
type EncoreInternal_EnvResp = *EnvResponse
type EncoreInternal_AppMetaReq = struct{}
type EncoreInternal_AppMetaResp = *AppMetadata

func ConfigValues(ctx context.Context) (EncoreInternal_ConfigValuesResp, error) {
	panic("encore: client implementation not generated")
}

// Publish publishes a request on a topic
func Publish(ctx context.Context) error {
	panic("encore: client implementation not generated")
}

func Consumer(ctx context.Context, req EncoreInternal_ConsumerReq) error {
	panic("encore: client implementation not generated")
}

// Echo echoes back the request data.
func Echo(ctx context.Context, req EncoreInternal_EchoReq) (EncoreInternal_EchoResp, error) {
	panic("encore: client implementation not generated")
}

// EmptyEcho echoes back the request data.
func EmptyEcho(ctx context.Context, req EncoreInternal_EmptyEchoReq) (EncoreInternal_EmptyEchoResp, error) {
	panic("encore: client implementation not generated")
}

// NonBasicEcho echoes back the request data.
func NonBasicEcho(ctx context.Context, pathString string, pathInt int, pathWild string, req EncoreInternal_NonBasicEchoReq) (EncoreInternal_NonBasicEchoResp, error) {
	panic("encore: client implementation not generated")
}

// BasicEcho echoes back the request data.
func BasicEcho(ctx context.Context, req EncoreInternal_BasicEchoReq) (EncoreInternal_BasicEchoResp, error) {
	panic("encore: client implementation not generated")
}

// HeadersEcho echoes back the request headers
func HeadersEcho(ctx context.Context, req EncoreInternal_HeadersEchoReq) (EncoreInternal_HeadersEchoResp, error) {
	panic("encore: client implementation not generated")
}

// Noop does nothing
func Noop(ctx context.Context) error {
	panic("encore: client implementation not generated")
}

// NilResponse returns a nil response and nil error
func NilResponse(ctx context.Context) (EncoreInternal_NilResponseResp, error) {
	panic("encore: client implementation not generated")
}

// MuteEcho absorbs a request
func MuteEcho(ctx context.Context, req EncoreInternal_MuteEchoReq) error {
	panic("encore: client implementation not generated")
}

// Pong returns a bird tuple
func Pong(ctx context.Context) (EncoreInternal_PongResp, error) {
	panic("encore: client implementation not generated")
}

// CustomHTTPStatus allows testing of custom HTTP status codes via encore:"httpstatus" tag
func CustomHTTPStatus(ctx context.Context) (EncoreInternal_CustomHTTPStatusResp, error) {
	panic("encore: client implementation not generated")
}

// Env returns the environment.
func Env(ctx context.Context) (EncoreInternal_EnvResp, error) {
	panic("encore: client implementation not generated")
}

// AppMeta returns app metadata.
func AppMeta(ctx context.Context) (EncoreInternal_AppMetaResp, error) {
	panic("encore: client implementation not generated")
}

// Interface defines the service's API surface area, primarily for mocking purposes.
//
// Raw endpoints are currently excluded from this interface, as Encore does not yet
// support service-to-service API calls to raw endpoints.
type Interface interface {
	ConfigValues(ctx context.Context) (EncoreInternal_ConfigValuesResp, error)

	// Publish publishes a request on a topic
	Publish(ctx context.Context) error

	Consumer(ctx context.Context, req EncoreInternal_ConsumerReq) error

	// Echo echoes back the request data.
	Echo(ctx context.Context, req EncoreInternal_EchoReq) (EncoreInternal_EchoResp, error)

	// EmptyEcho echoes back the request data.
	EmptyEcho(ctx context.Context, req EncoreInternal_EmptyEchoReq) (EncoreInternal_EmptyEchoResp, error)

	// NonBasicEcho echoes back the request data.
	NonBasicEcho(ctx context.Context, pathString string, pathInt int, pathWild string, req EncoreInternal_NonBasicEchoReq) (EncoreInternal_NonBasicEchoResp, error)

	// BasicEcho echoes back the request data.
	BasicEcho(ctx context.Context, req EncoreInternal_BasicEchoReq) (EncoreInternal_BasicEchoResp, error)

	// HeadersEcho echoes back the request headers
	HeadersEcho(ctx context.Context, req EncoreInternal_HeadersEchoReq) (EncoreInternal_HeadersEchoResp, error)

	// Noop does nothing
	Noop(ctx context.Context) error

	// NilResponse returns a nil response and nil error
	NilResponse(ctx context.Context) (EncoreInternal_NilResponseResp, error)

	// MuteEcho absorbs a request
	MuteEcho(ctx context.Context, req EncoreInternal_MuteEchoReq) error

	// Pong returns a bird tuple
	Pong(ctx context.Context) (EncoreInternal_PongResp, error)

	// CustomHTTPStatus allows testing of custom HTTP status codes via encore:"httpstatus" tag
	CustomHTTPStatus(ctx context.Context) (EncoreInternal_CustomHTTPStatusResp, error)

	// Env returns the environment.
	Env(ctx context.Context) (EncoreInternal_EnvResp, error)

	// AppMeta returns app metadata.
	AppMeta(ctx context.Context) (EncoreInternal_AppMetaResp, error)
}

var EncoreInternal_echoclient_api_APIDesc_ConfigValues = &__api.Desc[*EncoreInternal_ConfigValuesReq, EncoreInternal_ConfigValuesResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_ConfigValuesReq) (*EncoreInternal_ConfigValuesReq, error) {
		var clone *EncoreInternal_ConfigValuesReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_ConfigValuesResp) (EncoreInternal_ConfigValuesResp, error) {
		var clone EncoreInternal_ConfigValuesResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_ConfigValuesResp, err error) {
		var result EncoreInternal_ConfigValuesResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_ConfigValuesReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_ConfigValuesReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_ConfigValuesReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_ConfigValuesResp, status int) (err error) {
		return nil
	},
	Endpoint:            "ConfigValues",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/echo.ConfigValues",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/echo.ConfigValues",
	ReqPath: func(reqData *EncoreInternal_ConfigValuesReq) (string, __api.UnnamedParams, error) {
		return "/echo.ConfigValues", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_ConfigValuesReq) any {
		return nil
	},
	Service:           "echo",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_echoclient_api_APIDesc_Publish = &__api.Desc[*EncoreInternal_PublishReq, interface{}]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_PublishReq) (*EncoreInternal_PublishReq, error) {
		var clone *EncoreInternal_PublishReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: nil,
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp interface{}, err error) {
		return resp, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_PublishReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_PublishReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_PublishReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp interface{}, status int) (err error) {
		return nil
	},
	Endpoint:            "Publish",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/echo.Publish",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/echo.Publish",
	ReqPath: func(reqData *EncoreInternal_PublishReq) (string, __api.UnnamedParams, error) {
		return "/echo.Publish", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_PublishReq) any {
		return nil
	},
	Service:           "echo",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_echoclient_api_APIDesc_Consumer = &__api.Desc[*EncoreInternal_ConsumerReq, interface{}]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_ConsumerReq) (*EncoreInternal_ConsumerReq, error) {
		var clone *EncoreInternal_ConsumerReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: nil,
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp interface{}, err error) {
		return resp, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_ConsumerReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_ConsumerReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_ConsumerReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp interface{}, status int) (err error) {
		return nil
	},
	Endpoint:            "Consumer",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"POST"},
	Path:                "/echo.Consumer",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/echo.Consumer",
	ReqPath: func(reqData *EncoreInternal_ConsumerReq) (string, __api.UnnamedParams, error) {
		return "/echo.Consumer", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_ConsumerReq) any {
		return reqData.Payload
	},
	Service:           "echo",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_echoclient_api_APIDesc_Echo = &__api.Desc[*EncoreInternal_EchoReq, EncoreInternal_EchoResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_EchoReq) (*EncoreInternal_EchoReq, error) {
		var clone *EncoreInternal_EchoReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_EchoResp) (EncoreInternal_EchoResp, error) {
		var clone EncoreInternal_EchoResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_EchoResp, err error) {
		var result EncoreInternal_EchoResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_EchoReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_EchoReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_EchoReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_EchoResp, status int) (err error) {
		return nil
	},
	Endpoint:            "Echo",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"POST"},
	Path:                "/echo.Echo",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/echo.Echo",
	ReqPath: func(reqData *EncoreInternal_EchoReq) (string, __api.UnnamedParams, error) {
		return "/echo.Echo", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_EchoReq) any {
		return reqData.Payload
	},
	Service:           "echo",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_echoclient_api_APIDesc_EmptyEcho = &__api.Desc[*EncoreInternal_EmptyEchoReq, EncoreInternal_EmptyEchoResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_EmptyEchoReq) (*EncoreInternal_EmptyEchoReq, error) {
		var clone *EncoreInternal_EmptyEchoReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_EmptyEchoResp) (EncoreInternal_EmptyEchoResp, error) {
		var clone EncoreInternal_EmptyEchoResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_EmptyEchoResp, err error) {
		var result EncoreInternal_EmptyEchoResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_EmptyEchoReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_EmptyEchoReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_EmptyEchoReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_EmptyEchoResp, status int) (err error) {
		return nil
	},
	Endpoint:            "EmptyEcho",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"POST"},
	Path:                "/echo.EmptyEcho",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/echo.EmptyEcho",
	ReqPath: func(reqData *EncoreInternal_EmptyEchoReq) (string, __api.UnnamedParams, error) {
		return "/echo.EmptyEcho", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_EmptyEchoReq) any {
		return reqData.Payload
	},
	Service:           "echo",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_echoclient_api_APIDesc_NonBasicEcho = &__api.Desc[*EncoreInternal_NonBasicEchoReq, EncoreInternal_NonBasicEchoResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_NonBasicEchoReq) (*EncoreInternal_NonBasicEchoReq, error) {
		var clone *EncoreInternal_NonBasicEchoReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_NonBasicEchoResp) (EncoreInternal_NonBasicEchoResp, error) {
		var clone EncoreInternal_NonBasicEchoResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_NonBasicEchoResp, err error) {
		var result EncoreInternal_NonBasicEchoResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_NonBasicEchoReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_NonBasicEchoReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_NonBasicEchoReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_NonBasicEchoResp, status int) (err error) {
		return nil
	},
	Endpoint:            "NonBasicEcho",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"POST"},
	Path:                "/NonBasicEcho/:pathString/:pathInt/*pathWild",
	PathParamNames:      []string{"pathString", "pathInt", "pathWild"},
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/NonBasicEcho/:pathString/:pathInt/*pathWild",
	ReqPath: func(reqData *EncoreInternal_NonBasicEchoReq) (string, __api.UnnamedParams, error) {
		return "/NonBasicEcho/:pathString/:pathInt/*pathWild", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_NonBasicEchoReq) any {
		return reqData.Payload
	},
	Service:           "echo",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_echoclient_api_APIDesc_BasicEcho = &__api.Desc[*EncoreInternal_BasicEchoReq, EncoreInternal_BasicEchoResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_BasicEchoReq) (*EncoreInternal_BasicEchoReq, error) {
		var clone *EncoreInternal_BasicEchoReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_BasicEchoResp) (EncoreInternal_BasicEchoResp, error) {
		var clone EncoreInternal_BasicEchoResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_BasicEchoResp, err error) {
		var result EncoreInternal_BasicEchoResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_BasicEchoReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_BasicEchoReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_BasicEchoReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_BasicEchoResp, status int) (err error) {
		return nil
	},
	Endpoint:            "BasicEcho",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/echo.BasicEcho",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/echo.BasicEcho",
	ReqPath: func(reqData *EncoreInternal_BasicEchoReq) (string, __api.UnnamedParams, error) {
		return "/echo.BasicEcho", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_BasicEchoReq) any {
		return reqData.Payload
	},
	Service:           "echo",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_echoclient_api_APIDesc_HeadersEcho = &__api.Desc[*EncoreInternal_HeadersEchoReq, EncoreInternal_HeadersEchoResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_HeadersEchoReq) (*EncoreInternal_HeadersEchoReq, error) {
		var clone *EncoreInternal_HeadersEchoReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_HeadersEchoResp) (EncoreInternal_HeadersEchoResp, error) {
		var clone EncoreInternal_HeadersEchoResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_HeadersEchoResp, err error) {
		var result EncoreInternal_HeadersEchoResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_HeadersEchoReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_HeadersEchoReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_HeadersEchoReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_HeadersEchoResp, status int) (err error) {
		return nil
	},
	Endpoint:            "HeadersEcho",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/echo.HeadersEcho",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/echo.HeadersEcho",
	ReqPath: func(reqData *EncoreInternal_HeadersEchoReq) (string, __api.UnnamedParams, error) {
		return "/echo.HeadersEcho", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_HeadersEchoReq) any {
		return reqData.Payload
	},
	Service:           "echo",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_echoclient_api_APIDesc_Noop = &__api.Desc[*EncoreInternal_NoopReq, interface{}]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_NoopReq) (*EncoreInternal_NoopReq, error) {
		var clone *EncoreInternal_NoopReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: nil,
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp interface{}, err error) {
		return resp, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_NoopReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_NoopReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_NoopReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp interface{}, status int) (err error) {
		return nil
	},
	Endpoint:            "Noop",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET"},
	Path:                "/echo.Noop",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/echo.Noop",
	ReqPath: func(reqData *EncoreInternal_NoopReq) (string, __api.UnnamedParams, error) {
		return "/echo.Noop", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_NoopReq) any {
		return nil
	},
	Service:           "echo",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_echoclient_api_APIDesc_NilResponse = &__api.Desc[*EncoreInternal_NilResponseReq, EncoreInternal_NilResponseResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_NilResponseReq) (*EncoreInternal_NilResponseReq, error) {
		var clone *EncoreInternal_NilResponseReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_NilResponseResp) (EncoreInternal_NilResponseResp, error) {
		var clone EncoreInternal_NilResponseResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_NilResponseResp, err error) {
		var result EncoreInternal_NilResponseResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_NilResponseReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_NilResponseReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_NilResponseReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_NilResponseResp, status int) (err error) {
		return nil
	},
	Endpoint:            "NilResponse",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/echo.NilResponse",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/echo.NilResponse",
	ReqPath: func(reqData *EncoreInternal_NilResponseReq) (string, __api.UnnamedParams, error) {
		return "/echo.NilResponse", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_NilResponseReq) any {
		return nil
	},
	Service:           "echo",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_echoclient_api_APIDesc_MuteEcho = &__api.Desc[*EncoreInternal_MuteEchoReq, interface{}]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_MuteEchoReq) (*EncoreInternal_MuteEchoReq, error) {
		var clone *EncoreInternal_MuteEchoReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: nil,
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp interface{}, err error) {
		return resp, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_MuteEchoReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_MuteEchoReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_MuteEchoReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp interface{}, status int) (err error) {
		return nil
	},
	Endpoint:            "MuteEcho",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET"},
	Path:                "/echo.MuteEcho",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/echo.MuteEcho",
	ReqPath: func(reqData *EncoreInternal_MuteEchoReq) (string, __api.UnnamedParams, error) {
		return "/echo.MuteEcho", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_MuteEchoReq) any {
		return reqData.Payload
	},
	Service:           "echo",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_echoclient_api_APIDesc_Pong = &__api.Desc[*EncoreInternal_PongReq, EncoreInternal_PongResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_PongReq) (*EncoreInternal_PongReq, error) {
		var clone *EncoreInternal_PongReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_PongResp) (EncoreInternal_PongResp, error) {
		var clone EncoreInternal_PongResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_PongResp, err error) {
		var result EncoreInternal_PongResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_PongReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_PongReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_PongReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_PongResp, status int) (err error) {
		return nil
	},
	Endpoint:            "Pong",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET"},
	Path:                "/echo.Pong",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/echo.Pong",
	ReqPath: func(reqData *EncoreInternal_PongReq) (string, __api.UnnamedParams, error) {
		return "/echo.Pong", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_PongReq) any {
		return nil
	},
	Service:           "echo",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_echoclient_api_APIDesc_CustomHTTPStatus = &__api.Desc[*EncoreInternal_CustomHTTPStatusReq, EncoreInternal_CustomHTTPStatusResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_CustomHTTPStatusReq) (*EncoreInternal_CustomHTTPStatusReq, error) {
		var clone *EncoreInternal_CustomHTTPStatusReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_CustomHTTPStatusResp) (EncoreInternal_CustomHTTPStatusResp, error) {
		var clone EncoreInternal_CustomHTTPStatusResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_CustomHTTPStatusResp, err error) {
		var result EncoreInternal_CustomHTTPStatusResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_CustomHTTPStatusReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_CustomHTTPStatusReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_CustomHTTPStatusReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_CustomHTTPStatusResp, status int) (err error) {
		return nil
	},
	Endpoint:            "CustomHTTPStatus",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/echo.CustomHTTPStatus",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/echo.CustomHTTPStatus",
	ReqPath: func(reqData *EncoreInternal_CustomHTTPStatusReq) (string, __api.UnnamedParams, error) {
		return "/echo.CustomHTTPStatus", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_CustomHTTPStatusReq) any {
		return nil
	},
	Service:           "echo",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_echoclient_api_APIDesc_Env = &__api.Desc[*EncoreInternal_EnvReq, EncoreInternal_EnvResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_EnvReq) (*EncoreInternal_EnvReq, error) {
		var clone *EncoreInternal_EnvReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_EnvResp) (EncoreInternal_EnvResp, error) {
		var clone EncoreInternal_EnvResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_EnvResp, err error) {
		var result EncoreInternal_EnvResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_EnvReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_EnvReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_EnvReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_EnvResp, status int) (err error) {
		return nil
	},
	Endpoint:            "Env",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/echo.Env",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/echo.Env",
	ReqPath: func(reqData *EncoreInternal_EnvReq) (string, __api.UnnamedParams, error) {
		return "/echo.Env", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_EnvReq) any {
		return nil
	},
	Service:           "echo",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_echoclient_api_APIDesc_AppMeta = &__api.Desc[*EncoreInternal_AppMetaReq, EncoreInternal_AppMetaResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_AppMetaReq) (*EncoreInternal_AppMetaReq, error) {
		var clone *EncoreInternal_AppMetaReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_AppMetaResp) (EncoreInternal_AppMetaResp, error) {
		var clone EncoreInternal_AppMetaResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_AppMetaResp, err error) {
		var result EncoreInternal_AppMetaResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_AppMetaReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_AppMetaReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_AppMetaReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_AppMetaResp, status int) (err error) {
		return nil
	},
	Endpoint:            "AppMeta",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/echo.AppMeta",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/echo.AppMeta",
	ReqPath: func(reqData *EncoreInternal_AppMetaReq) (string, __api.UnnamedParams, error) {
		return "/echo.AppMeta", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_AppMetaReq) any {
		return nil
	},
	Service:           "echo",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}
