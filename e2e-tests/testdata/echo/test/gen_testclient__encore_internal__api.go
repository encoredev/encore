// Code generated by encore. DO NOT EDIT.

package testclient

import (
	"context"
	__api "encore.dev/appruntime/apisdk/api"
	uuid "encore.dev/types/uuid"
	jsoniter "github.com/json-iterator/go"
	"net/http"
	"net/url"
)

type EncoreInternal_NoopReq = struct{}
type EncoreInternal_NoopWithErrorReq = struct{}
type EncoreInternal_SimpleBodyEchoReq = *BodyEcho
type EncoreInternal_SimpleBodyEchoResp = *BodyEcho
type EncoreInternal_UpdateMessageReq = *BodyEcho
type EncoreInternal_GetMessageReq = struct{}
type EncoreInternal_GetMessageResp = *BodyEcho
type EncoreInternal_RestStyleAPIReq = *RestParams
type EncoreInternal_RestStyleAPIResp = *RestParams
type EncoreInternal_MarshallerTestHandlerReq = *MarshallerTest[int]
type EncoreInternal_MarshallerTestHandlerResp = *MarshallerTest[int]
type EncoreInternal_TestAuthHandlerReq = struct{}
type EncoreInternal_TestAuthHandlerResp = *BodyEcho
type EncoreInternal_PathMultiSegmentsReq = struct{}
type EncoreInternal_PathMultiSegmentsResp = *MultiPathSegment

// Noop allows us to test if a simple HTTP request can be made
func Noop(ctx context.Context) error {
	panic("encore: client implementation not generated")
}

// NoopWithError allows us to test if the structured errors are returned
func NoopWithError(ctx context.Context) error {
	panic("encore: client implementation not generated")
}

// SimpleBodyEcho allows us to exercise the body marshalling from JSON
// and being returned purely as a body
func SimpleBodyEcho(ctx context.Context, req EncoreInternal_SimpleBodyEchoReq) (EncoreInternal_SimpleBodyEchoResp, error) {
	panic("encore: client implementation not generated")
}

// UpdateMessage allows us to test an API which takes parameters,
// but doesn't return anything
func UpdateMessage(ctx context.Context, clientID string, req EncoreInternal_UpdateMessageReq) error {
	panic("encore: client implementation not generated")
}

// GetMessage allows us to test an API which takes no parameters,
// but returns data. It also tests two API's on the same path with different HTTP methods
func GetMessage(ctx context.Context, clientID string) (EncoreInternal_GetMessageResp, error) {
	panic("encore: client implementation not generated")
}

// RestStyleAPI tests all the ways we can get data into and out of the application
// using Encore request handlers
func RestStyleAPI(ctx context.Context, objType int, name string, req EncoreInternal_RestStyleAPIReq) (EncoreInternal_RestStyleAPIResp, error) {
	panic("encore: client implementation not generated")
}

// MarshallerTestHandler allows us to test marshalling of all the inbuilt types in all
// the field types. It simply echos all the responses back to the client
func MarshallerTestHandler(ctx context.Context, req EncoreInternal_MarshallerTestHandlerReq) (EncoreInternal_MarshallerTestHandlerResp, error) {
	panic("encore: client implementation not generated")
}

// TestAuthHandler allows us to test the clients ability to add tokens to requests
func TestAuthHandler(ctx context.Context) (EncoreInternal_TestAuthHandlerResp, error) {
	panic("encore: client implementation not generated")
}

// PathMultiSegments allows us to wildcard segments and segment URI encoding
func PathMultiSegments(ctx context.Context, bool bool, int int, string string, uuid uuid.UUID, wildcard string) (EncoreInternal_PathMultiSegmentsResp, error) {
	panic("encore: client implementation not generated")
}

// Interface defines the service's API surface area, primarily for mocking purposes.
//
// Raw endpoints are currently excluded from this interface, as Encore does not yet
// support service-to-service API calls to raw endpoints.
type Interface interface {
	// Noop allows us to test if a simple HTTP request can be made
	Noop(ctx context.Context) error

	// NoopWithError allows us to test if the structured errors are returned
	NoopWithError(ctx context.Context) error

	// SimpleBodyEcho allows us to exercise the body marshalling from JSON
	// and being returned purely as a body
	SimpleBodyEcho(ctx context.Context, req EncoreInternal_SimpleBodyEchoReq) (EncoreInternal_SimpleBodyEchoResp, error)

	// UpdateMessage allows us to test an API which takes parameters,
	// but doesn't return anything
	UpdateMessage(ctx context.Context, clientID string, req EncoreInternal_UpdateMessageReq) error

	// GetMessage allows us to test an API which takes no parameters,
	// but returns data. It also tests two API's on the same path with different HTTP methods
	GetMessage(ctx context.Context, clientID string) (EncoreInternal_GetMessageResp, error)

	// RestStyleAPI tests all the ways we can get data into and out of the application
	// using Encore request handlers
	RestStyleAPI(ctx context.Context, objType int, name string, req EncoreInternal_RestStyleAPIReq) (EncoreInternal_RestStyleAPIResp, error)

	// MarshallerTestHandler allows us to test marshalling of all the inbuilt types in all
	// the field types. It simply echos all the responses back to the client
	MarshallerTestHandler(ctx context.Context, req EncoreInternal_MarshallerTestHandlerReq) (EncoreInternal_MarshallerTestHandlerResp, error)

	// TestAuthHandler allows us to test the clients ability to add tokens to requests
	TestAuthHandler(ctx context.Context) (EncoreInternal_TestAuthHandlerResp, error)

	// PathMultiSegments allows us to wildcard segments and segment URI encoding
	PathMultiSegments(ctx context.Context, bool bool, int int, string string, uuid uuid.UUID, wildcard string) (EncoreInternal_PathMultiSegmentsResp, error)
}

var EncoreInternal_testclient_api_APIDesc_Noop = &__api.Desc[*EncoreInternal_NoopReq, interface{}]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_NoopReq) (*EncoreInternal_NoopReq, error) {
		var clone *EncoreInternal_NoopReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: nil,
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp interface{}, err error) {
		return resp, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_NoopReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_NoopReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_NoopReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp interface{}, status int) (err error) {
		return nil
	},
	Endpoint:            "Noop",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/test.Noop",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/test.Noop",
	ReqPath: func(reqData *EncoreInternal_NoopReq) (string, __api.UnnamedParams, error) {
		return "/test.Noop", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_NoopReq) any {
		return nil
	},
	Service:           "test",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_testclient_api_APIDesc_NoopWithError = &__api.Desc[*EncoreInternal_NoopWithErrorReq, interface{}]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_NoopWithErrorReq) (*EncoreInternal_NoopWithErrorReq, error) {
		var clone *EncoreInternal_NoopWithErrorReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: nil,
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp interface{}, err error) {
		return resp, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_NoopWithErrorReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_NoopWithErrorReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_NoopWithErrorReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp interface{}, status int) (err error) {
		return nil
	},
	Endpoint:            "NoopWithError",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/test.NoopWithError",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/test.NoopWithError",
	ReqPath: func(reqData *EncoreInternal_NoopWithErrorReq) (string, __api.UnnamedParams, error) {
		return "/test.NoopWithError", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_NoopWithErrorReq) any {
		return nil
	},
	Service:           "test",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_testclient_api_APIDesc_SimpleBodyEcho = &__api.Desc[*EncoreInternal_SimpleBodyEchoReq, EncoreInternal_SimpleBodyEchoResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_SimpleBodyEchoReq) (*EncoreInternal_SimpleBodyEchoReq, error) {
		var clone *EncoreInternal_SimpleBodyEchoReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_SimpleBodyEchoResp) (EncoreInternal_SimpleBodyEchoResp, error) {
		var clone EncoreInternal_SimpleBodyEchoResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_SimpleBodyEchoResp, err error) {
		var result EncoreInternal_SimpleBodyEchoResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_SimpleBodyEchoReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_SimpleBodyEchoReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_SimpleBodyEchoReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_SimpleBodyEchoResp, status int) (err error) {
		return nil
	},
	Endpoint:            "SimpleBodyEcho",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"POST"},
	Path:                "/test.SimpleBodyEcho",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/test.SimpleBodyEcho",
	ReqPath: func(reqData *EncoreInternal_SimpleBodyEchoReq) (string, __api.UnnamedParams, error) {
		return "/test.SimpleBodyEcho", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_SimpleBodyEchoReq) any {
		return reqData.Payload
	},
	Service:           "test",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_testclient_api_APIDesc_UpdateMessage = &__api.Desc[*EncoreInternal_UpdateMessageReq, interface{}]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_UpdateMessageReq) (*EncoreInternal_UpdateMessageReq, error) {
		var clone *EncoreInternal_UpdateMessageReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: nil,
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp interface{}, err error) {
		return resp, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_UpdateMessageReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_UpdateMessageReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_UpdateMessageReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp interface{}, status int) (err error) {
		return nil
	},
	Endpoint:            "UpdateMessage",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"PUT"},
	Path:                "/last_message/:clientID",
	PathParamNames:      []string{"clientID"},
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/last_message/:clientID",
	ReqPath: func(reqData *EncoreInternal_UpdateMessageReq) (string, __api.UnnamedParams, error) {
		return "/last_message/:clientID", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_UpdateMessageReq) any {
		return reqData.Payload
	},
	Service:           "test",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_testclient_api_APIDesc_GetMessage = &__api.Desc[*EncoreInternal_GetMessageReq, EncoreInternal_GetMessageResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_GetMessageReq) (*EncoreInternal_GetMessageReq, error) {
		var clone *EncoreInternal_GetMessageReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_GetMessageResp) (EncoreInternal_GetMessageResp, error) {
		var clone EncoreInternal_GetMessageResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_GetMessageResp, err error) {
		var result EncoreInternal_GetMessageResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_GetMessageReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_GetMessageReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_GetMessageReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_GetMessageResp, status int) (err error) {
		return nil
	},
	Endpoint:            "GetMessage",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET"},
	Path:                "/last_message/:clientID",
	PathParamNames:      []string{"clientID"},
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/last_message/:clientID",
	ReqPath: func(reqData *EncoreInternal_GetMessageReq) (string, __api.UnnamedParams, error) {
		return "/last_message/:clientID", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_GetMessageReq) any {
		return nil
	},
	Service:           "test",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_testclient_api_APIDesc_RestStyleAPI = &__api.Desc[*EncoreInternal_RestStyleAPIReq, EncoreInternal_RestStyleAPIResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_RestStyleAPIReq) (*EncoreInternal_RestStyleAPIReq, error) {
		var clone *EncoreInternal_RestStyleAPIReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_RestStyleAPIResp) (EncoreInternal_RestStyleAPIResp, error) {
		var clone EncoreInternal_RestStyleAPIResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_RestStyleAPIResp, err error) {
		var result EncoreInternal_RestStyleAPIResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_RestStyleAPIReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_RestStyleAPIReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_RestStyleAPIReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_RestStyleAPIResp, status int) (err error) {
		return nil
	},
	Endpoint:            "RestStyleAPI",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"PUT"},
	Path:                "/rest/object/:objType/:name",
	PathParamNames:      []string{"objType", "name"},
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/rest/object/:objType/:name",
	ReqPath: func(reqData *EncoreInternal_RestStyleAPIReq) (string, __api.UnnamedParams, error) {
		return "/rest/object/:objType/:name", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_RestStyleAPIReq) any {
		return reqData.Payload
	},
	Service:           "test",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_testclient_api_APIDesc_MarshallerTestHandler = &__api.Desc[*EncoreInternal_MarshallerTestHandlerReq, EncoreInternal_MarshallerTestHandlerResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_MarshallerTestHandlerReq) (*EncoreInternal_MarshallerTestHandlerReq, error) {
		var clone *EncoreInternal_MarshallerTestHandlerReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_MarshallerTestHandlerResp) (EncoreInternal_MarshallerTestHandlerResp, error) {
		var clone EncoreInternal_MarshallerTestHandlerResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_MarshallerTestHandlerResp, err error) {
		var result EncoreInternal_MarshallerTestHandlerResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_MarshallerTestHandlerReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_MarshallerTestHandlerReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_MarshallerTestHandlerReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_MarshallerTestHandlerResp, status int) (err error) {
		return nil
	},
	Endpoint:            "MarshallerTestHandler",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"POST"},
	Path:                "/test.MarshallerTestHandler",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/test.MarshallerTestHandler",
	ReqPath: func(reqData *EncoreInternal_MarshallerTestHandlerReq) (string, __api.UnnamedParams, error) {
		return "/test.MarshallerTestHandler", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_MarshallerTestHandlerReq) any {
		return reqData.Payload
	},
	Service:           "test",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_testclient_api_APIDesc_TestAuthHandler = &__api.Desc[*EncoreInternal_TestAuthHandlerReq, EncoreInternal_TestAuthHandlerResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_TestAuthHandlerReq) (*EncoreInternal_TestAuthHandlerReq, error) {
		var clone *EncoreInternal_TestAuthHandlerReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_TestAuthHandlerResp) (EncoreInternal_TestAuthHandlerResp, error) {
		var clone EncoreInternal_TestAuthHandlerResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_TestAuthHandlerResp, err error) {
		var result EncoreInternal_TestAuthHandlerResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_TestAuthHandlerReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_TestAuthHandlerReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_TestAuthHandlerReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_TestAuthHandlerResp, status int) (err error) {
		return nil
	},
	Endpoint:            "TestAuthHandler",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/test.TestAuthHandler",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/test.TestAuthHandler",
	ReqPath: func(reqData *EncoreInternal_TestAuthHandlerReq) (string, __api.UnnamedParams, error) {
		return "/test.TestAuthHandler", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_TestAuthHandlerReq) any {
		return nil
	},
	Service:           "test",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_testclient_api_APIDesc_PathMultiSegments = &__api.Desc[*EncoreInternal_PathMultiSegmentsReq, EncoreInternal_PathMultiSegmentsResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_PathMultiSegmentsReq) (*EncoreInternal_PathMultiSegmentsReq, error) {
		var clone *EncoreInternal_PathMultiSegmentsReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_PathMultiSegmentsResp) (EncoreInternal_PathMultiSegmentsResp, error) {
		var clone EncoreInternal_PathMultiSegmentsResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_PathMultiSegmentsResp, err error) {
		var result EncoreInternal_PathMultiSegmentsResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_PathMultiSegmentsReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_PathMultiSegmentsReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_PathMultiSegmentsReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_PathMultiSegmentsResp, status int) (err error) {
		return nil
	},
	Endpoint:            "PathMultiSegments",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/multi/:bool/:int/:string/:uuid/*wildcard",
	PathParamNames:      []string{"bool", "int", "string", "uuid", "wildcard"},
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/multi/:bool/:int/:string/:uuid/*wildcard",
	ReqPath: func(reqData *EncoreInternal_PathMultiSegmentsReq) (string, __api.UnnamedParams, error) {
		return "/multi/:bool/:int/:string/:uuid/*wildcard", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_PathMultiSegmentsReq) any {
		return nil
	},
	Service:           "test",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}
