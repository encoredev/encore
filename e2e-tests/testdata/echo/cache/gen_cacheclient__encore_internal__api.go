// Code generated by encore. DO NOT EDIT.

package cacheclient

import (
	"context"
	__api "encore.dev/appruntime/apisdk/api"
	jsoniter "github.com/json-iterator/go"
	"net/http"
	"net/url"
)

type EncoreInternal_IncrReq = struct{}
type EncoreInternal_IncrResp = *IncrResponse
type EncoreInternal_PostStructReq = struct{}
type EncoreInternal_GetStructReq = struct{}
type EncoreInternal_GetStructResp = StructVal
type EncoreInternal_PostListReq = struct{}
type EncoreInternal_GetListReq = struct{}
type EncoreInternal_GetListResp = ListResponse

func Incr(ctx context.Context, key string) (EncoreInternal_IncrResp, error) {
	panic("encore: client implementation not generated")
}

func PostStruct(ctx context.Context, key int, val string) error {
	panic("encore: client implementation not generated")
}

func GetStruct(ctx context.Context, key int) (EncoreInternal_GetStructResp, error) {
	panic("encore: client implementation not generated")
}

func PostList(ctx context.Context, key int, val string) error {
	panic("encore: client implementation not generated")
}

func GetList(ctx context.Context, key int) (EncoreInternal_GetListResp, error) {
	panic("encore: client implementation not generated")
}

// Interface defines the service's API surface area, primarily for mocking purposes.
//
// Raw endpoints are currently excluded from this interface, as Encore does not yet
// support service-to-service API calls to raw endpoints.
type Interface interface {
	Incr(ctx context.Context, key string) (EncoreInternal_IncrResp, error)

	PostStruct(ctx context.Context, key int, val string) error

	GetStruct(ctx context.Context, key int) (EncoreInternal_GetStructResp, error)

	PostList(ctx context.Context, key int, val string) error

	GetList(ctx context.Context, key int) (EncoreInternal_GetListResp, error)
}

var EncoreInternal_cacheclient_api_APIDesc_Incr = &__api.Desc[*EncoreInternal_IncrReq, EncoreInternal_IncrResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_IncrReq) (*EncoreInternal_IncrReq, error) {
		var clone *EncoreInternal_IncrReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_IncrResp) (EncoreInternal_IncrResp, error) {
		var clone EncoreInternal_IncrResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_IncrResp, err error) {
		var result EncoreInternal_IncrResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_IncrReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_IncrReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_IncrReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_IncrResp, status int) (err error) {
		return nil
	},
	Endpoint:            "Incr",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/cache/incr/:key",
	PathParamNames:      []string{"key"},
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/cache/incr/:key",
	ReqPath: func(reqData *EncoreInternal_IncrReq) (string, __api.UnnamedParams, error) {
		return "/cache/incr/:key", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_IncrReq) any {
		return nil
	},
	Service:           "cache",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_cacheclient_api_APIDesc_PostStruct = &__api.Desc[*EncoreInternal_PostStructReq, interface{}]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_PostStructReq) (*EncoreInternal_PostStructReq, error) {
		var clone *EncoreInternal_PostStructReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: nil,
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp interface{}, err error) {
		return resp, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_PostStructReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_PostStructReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_PostStructReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp interface{}, status int) (err error) {
		return nil
	},
	Endpoint:            "PostStruct",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"POST"},
	Path:                "/cache/struct/:key/:val",
	PathParamNames:      []string{"key", "val"},
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/cache/struct/:key/:val",
	ReqPath: func(reqData *EncoreInternal_PostStructReq) (string, __api.UnnamedParams, error) {
		return "/cache/struct/:key/:val", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_PostStructReq) any {
		return nil
	},
	Service:           "cache",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_cacheclient_api_APIDesc_GetStruct = &__api.Desc[*EncoreInternal_GetStructReq, EncoreInternal_GetStructResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_GetStructReq) (*EncoreInternal_GetStructReq, error) {
		var clone *EncoreInternal_GetStructReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_GetStructResp) (EncoreInternal_GetStructResp, error) {
		var clone EncoreInternal_GetStructResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_GetStructResp, err error) {
		var result EncoreInternal_GetStructResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_GetStructReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_GetStructReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_GetStructReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_GetStructResp, status int) (err error) {
		return nil
	},
	Endpoint:            "GetStruct",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET"},
	Path:                "/cache/struct/:key",
	PathParamNames:      []string{"key"},
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/cache/struct/:key",
	ReqPath: func(reqData *EncoreInternal_GetStructReq) (string, __api.UnnamedParams, error) {
		return "/cache/struct/:key", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_GetStructReq) any {
		return nil
	},
	Service:           "cache",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_cacheclient_api_APIDesc_PostList = &__api.Desc[*EncoreInternal_PostListReq, interface{}]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_PostListReq) (*EncoreInternal_PostListReq, error) {
		var clone *EncoreInternal_PostListReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: nil,
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp interface{}, err error) {
		return resp, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_PostListReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_PostListReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_PostListReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp interface{}, status int) (err error) {
		return nil
	},
	Endpoint:            "PostList",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"POST"},
	Path:                "/cache/list/:key/:val",
	PathParamNames:      []string{"key", "val"},
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/cache/list/:key/:val",
	ReqPath: func(reqData *EncoreInternal_PostListReq) (string, __api.UnnamedParams, error) {
		return "/cache/list/:key/:val", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_PostListReq) any {
		return nil
	},
	Service:           "cache",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_cacheclient_api_APIDesc_GetList = &__api.Desc[*EncoreInternal_GetListReq, EncoreInternal_GetListResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_GetListReq) (*EncoreInternal_GetListReq, error) {
		var clone *EncoreInternal_GetListReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_GetListResp) (EncoreInternal_GetListResp, error) {
		var clone EncoreInternal_GetListResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_GetListResp, err error) {
		var result EncoreInternal_GetListResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_GetListReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_GetListReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_GetListReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_GetListResp, status int) (err error) {
		return nil
	},
	Endpoint:            "GetList",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET"},
	Path:                "/cache/list/:key",
	PathParamNames:      []string{"key"},
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/cache/list/:key",
	ReqPath: func(reqData *EncoreInternal_GetListReq) (string, __api.UnnamedParams, error) {
		return "/cache/list/:key", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_GetListReq) any {
		return nil
	},
	Service:           "cache",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}
