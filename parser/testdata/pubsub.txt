# Verify that pub sub is parsed
parse
stdout 'pubsubTopic basic-topic'
stdout 'pubsubTopic another-topic'
stdout 'pubsubPublisher basic-topic foo'
stdout 'pubsubSubscriber basic-topic basic-subscription svc'
stdout 'pubsubSubscriber basic-topic another-subscription svc'
stdout 'pubsubSubscriber basic-topic a-third-subscription foo'

-- shared/topics.go --
package shared

import (
    "encore.dev/pubsub"
)

type MessageType struct {
    Name string
}

var (
    BasicTopic = pubsub.NewTopic[*MessageType]("basic-topic")
    AnotherTopic = pubsub.NewTopic[*MessageType]("another-topic")
)

-- svc/svc.go --
package svc

import (
    "context"

    "encore.dev/pubsub"

    "test/shared"
    "test/svc/domain"
)


var (
    _ = pubsub.NewSubscription(shared.BasicTopic, "basic-subscription", Subscriber1)
    _ = pubsub.NewSubscription(shared.BasicTopic, "another-subscription", domain.SubscriptionCode)
)

// encore:api
func Subscriber1(ctx context.Context, msg *shared.MessageType) error {
    return nil
}

-- svc/domain/code.go --
package domain

import (
    "context"

    "test/shared"
)

func SubscriptionCode(ctx context.Context, msg *shared.MessageType) error {
    return nil
}

-- foo/code.go --
package foo

import (
    "context"

    "encore.dev/pubsub"

    "test/shared"
)

var _ = pubsub.NewSubscription(
    shared.BasicTopic,
    "a-third-subscription",
    func(ctx context.Context, msg *shared.MessageType) error {
        return nil
    },
)

// encore:api
func DoStuff(ctx context.Context) error {
    shared.BasicTopic.Publish(ctx, &shared.MessageType{Name: "foo"})
}
