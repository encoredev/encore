# Verify the cron job definition
parse
stdout 'rpc svc.Cron access=public raw=false path=/cron'
stdout 'cronJob cronfooboo name=Cron Foo Boo'
stdout 'cronJob cronfoo name=Cron Foo Bar'
stdout 'cronJob cronfood name=Cron Food Bar'
stdout 'cronJob cronfoocious name=Cron Foo Bar Bazz'
stdout 'cronJob cron-every name=Cron Foo Bar Bazz'

-- svc/svc.go --
package svc

import (
	"context"
	"time"

	"encore.dev/cron"
)

var _ = cron.NewJob("cronfooboo", cron.JobConfig{
	Name:     "Cron Foo Boo",
	Schedule: "* * * * 5",
	Endpoint: Cron,
})

// A cron job to send out emails to newsletter subscribers.
// On two lines.
var _ = cron.NewJob("cronfoo", cron.JobConfig{
	Name:     "Cron Foo Bar",
	Schedule: "* * * * 5",
	Endpoint: Cron,
})

/*
	In this example, we are defining a cron job, together with
	a random string.

	var _, bd = cron.NewJob("cronfood", cron.JobConfig{
		Name:     "Cron Food Bar",
		Schedule: "* * * * 5",
		Endpoint: Cron,
	}), "barfoo"

	We are being very explicit, and we are also giving a description
	that includes a code snippet.
*/
var _, bd = cron.NewJob("cronfood", cron.JobConfig{
	Name:     "Cron Food Bar",
	Schedule: "* * * * 5",
	Endpoint: Cron,
}), "barfoo"

// A cron job to send out push notifications to new subscribers.
var _ = cron.NewJob("cronfoocious", cron.JobConfig{
	Name:     "Cron Foo Bar Bazz",
	Schedule: "* * * * 4",
	Endpoint: Cron,
})

// A cron job using Every instead of Schedule
var _ = cron.NewJob("cron-every", cron.JobConfig{
	Name:     "Cron Foo Bar Bazz",
	Every:    3 * cron.Minute,
	Endpoint: Cron,
})

//encore:api public path=/cron
func Cron(ctx context.Context) (*Response, error) {
	msg := "Hello, Cron!"
	return &Response{Message: msg}, nil
}

type Response struct {
	Message string
}
