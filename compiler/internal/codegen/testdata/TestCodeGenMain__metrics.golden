// main code
package main

import (
	"encore.app/svc"
	__api "encore.dev/appruntime/api"
	__appinit "encore.dev/appruntime/app/appinit"
	__config "encore.dev/appruntime/config"
	__service "encore.dev/appruntime/service"
	_ "unsafe"
)

// loadApp loads the Encore app runtime.
//
//go:linkname loadApp encore.dev/appruntime/app/appinit.load
func loadApp() *__appinit.LoadData {
	static := &__config.Static{
		AppCommit: __config.CommitInfo{
			Revision:    "",
			Uncommitted: false,
		},
		AuthData:          nil,
		BundledServices:   []string{"svc"},
		CORSAllowHeaders:  nil,
		CORSExposeHeaders: nil,
		EncoreCompiler:    "test",
		PubsubTopics:      map[string]*__config.StaticPubsubTopic{},
		TestService:       "",
		Testing:           false,
	}
	handlers := []__api.HandlerRegistration{
		{
			Handler:    svc.EncoreInternal_DummyHandler,
			Middleware: nil,
		},
	}
	svcInit := []__service.Initializer{}
	return &__appinit.LoadData{
		APIHandlers: handlers,
		AuthHandler: nil,
		ServiceInit: svcInit,
		StaticCfg:   static,
	}
}

func main() {
	__appinit.AppMain()
}


// generated types for service svc
package svc

import (
	"context"
	__api "encore.dev/appruntime/api"
	_ "encore.dev/appruntime/app/appinit"
	jsoniter "github.com/json-iterator/go"
	"net/http"
)

type EncoreInternal_DummyReq struct{}

type EncoreInternal_DummyResp = __api.Void

var EncoreInternal_DummyHandler = &__api.Desc[*EncoreInternal_DummyReq, EncoreInternal_DummyResp]{
	Service:        "svc",
	SvcNum:         1,
	Endpoint:       "Dummy",
	Methods:        []string{"GET", "POST"},
	Raw:            false,
	Path:           "/svc.Dummy",
	RawPath:        "/svc.Dummy",
	PathParamNames: nil,
	DefLoc:         6,
	Access:         __api.Public,
	DecodeReq: func(req *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_DummyReq, pathParams __api.UnnamedParams, err error) {
		reqData = &EncoreInternal_DummyReq{}
		return reqData, nil, nil
	},
	CloneReq: func(p *EncoreInternal_DummyReq) (*EncoreInternal_DummyReq, error) {
		var clone EncoreInternal_DummyReq
		bytes, err := jsoniter.ConfigDefault.Marshal(p)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return &clone, err
	},
	ReqPath: func(p *EncoreInternal_DummyReq) (string, __api.UnnamedParams, error) {

		return "/svc.Dummy", nil, nil
	},
	ReqUserPayload: func(p *EncoreInternal_DummyReq) any {
		return nil
	},
	AppHandler: func(ctx context.Context, req *EncoreInternal_DummyReq) (EncoreInternal_DummyResp, error) {
		err := Dummy(ctx)
		if err != nil {
			return EncoreInternal_DummyResp{}, err
		}
		return EncoreInternal_DummyResp{}, nil
	},
	RawHandler: nil,
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_DummyResp) (err error) {
		return nil
	},
	CloneResp: __api.CloneVoid,
}

func EncoreInternal_CallDummy(ctx context.Context) error {
	_, err := EncoreInternal_DummyHandler.Call(__api.NewCallContext(ctx), &EncoreInternal_DummyReq{})
	if err != nil {
		return err
	}
	return nil
}


// config unmarshallers for service svc
package svc

/*
These functions are automatically generated and maintained by Encore to allow config values
to be unmarshalled into the correct types. They are not intended to be used directly. They
are automatically updated by Encore whenever you change the data types used within your
calls to config.Load[T]().
*/


// generated infra types for package svc
package svc

import (
	_ "encore.dev/appruntime/app/appinit"
	metrics "encore.dev/metrics"
	"strconv"
)

func EncoreInternal_CounterGroupLabelMapper(key Labels) []metrics.KeyValue {
	return []metrics.KeyValue{{
		Key:   "bool",
		Value: strconv.FormatBool(key.Bool),
	}, {
		Key:   "int",
		Value: strconv.FormatInt(int64(key.Int), 10),
	}, {
		Key:   "string",
		Value: key.String,
	}}
}

func EncoreInternal_GaugeGroupLabelMapper(key Labels) []metrics.KeyValue {
	return []metrics.KeyValue{{
		Key:   "bool",
		Value: strconv.FormatBool(key.Bool),
	}, {
		Key:   "int",
		Value: strconv.FormatInt(int64(key.Int), 10),
	}, {
		Key:   "string",
		Value: key.String,
	}}
}
// etype package
package etype

import _ "encore.dev/appruntime/app/appinit"
