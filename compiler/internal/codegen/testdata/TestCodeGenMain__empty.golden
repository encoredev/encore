// main code
package main

import (
	"encore.dev/runtime"
	"encore.dev/runtime/config"
	"github.com/json-iterator/go"
	"io"
	"os"
	_ "unsafe"
)

var json = jsoniter.Config{
	EscapeHTML:             false,
	IndentionStep:          config.JsonIndentStepForResponses(),
	SortMapKeys:            true,
	ValidateJsonRawMessage: true,
}.Froze()

// loadConfig registers the Encore services.
//go:linkname loadConfig encore.dev/runtime/config.loadConfig
func loadConfig() (*config.Config, error) {
	services := []*config.Service{}
	static := &config.Static{
		AppCommit: config.CommitInfo{
			Revision:    "",
			Uncommitted: false,
		},
		AuthData:       nil,
		EncoreCompiler: "test",
		PubsubTopics:   map[string]*config.StaticPubsubTopic{},
		Services:       services,
		TestService:    "",
		Testing:        false,
	}
	return &config.Config{
		Runtime: config.ParseRuntime(getAndClearEnv("ENCORE_RUNTIME_CONFIG")),
		Secrets: config.ParseSecrets(getAndClearEnv("ENCORE_APP_SECRETS")),
		Static:  static,
	}, nil
}

func main() {
	if err := runtime.ListenAndServe(); err != nil && err != io.EOF {
		runtime.Logger().Fatal().Err(err).Msg("could not listen and serve")
	}
}

// getAndClearEnv gets an env variable and unsets it.
func getAndClearEnv(env string) string {
	val := os.Getenv(env)
	os.Unsetenv(env)
	return val
}

type validationDetails struct {
	Field string `json:"field"`
	Err   string `json:"err"`
}

func (validationDetails) ErrDetails() {}
