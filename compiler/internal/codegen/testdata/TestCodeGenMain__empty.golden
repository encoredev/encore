// main code
package main

import (
	"encore.dev/beta/errs"
	"encore.dev/runtime"
	"encore.dev/runtime/config"
	"fmt"
	"github.com/json-iterator/go"
	"io"
	"io/ioutil"
	"os"
	_ "unsafe"
)

var json = jsoniter.Config{
	EscapeHTML:             false,
	SortMapKeys:            true,
	ValidateJsonRawMessage: true,
}.Froze()

// loadConfig registers the Encore services.
//go:linkname loadConfig encore.dev/runtime/config.loadConfig
func loadConfig() (*config.Config, error) {
	services := []*config.Service{}
	return &config.Config{
		AuthData: "",
		Encore: &config.Encore{
			AppID:         config.MustGetenv("ENCORE_APP_ID"),
			EnvID:         config.MustGetenv("ENCORE_ENV_ID"),
			EnvName:       config.MustGetenv("ENCORE_ENV_NAME"),
			MACKeys:       config.ParseMACKeys(config.MustGetenv("ENCORE_MAC_KEYS")),
			TraceEndpoint: config.MustGetenv("ENCORE_TRACE_ENDPOINT"),
		},
		Secrets:  config.ParseSecrets(os.Getenv("ENCORE_APP_SECRETS")),
		Services: services,
		Testing:  false,
	}, nil
}

func main() {
	if err := runtime.ListenAndServe(); err != nil {
		runtime.Logger().Fatal().Err(err).Msg("could not listen and serve")
	}
}

type validationDetails struct {
	Field string `json:"field"`
	Err   string `json:"err"`
}

func (validationDetails) ErrDetails() {}

// typeDecoder decodes types from incoming requests
type typeDecoder struct {
	err error
}

func (d *typeDecoder) Body(body io.Reader, dst interface{}) (payload []byte) {
	payload, err := ioutil.ReadAll(body)
	if err == nil && len(payload) == 0 {
		d.setErr("missing request body", "request_body", fmt.Errorf("missing request body"))
	} else if err != nil {
		d.setErr("could not parse request body", "request_body", err)
	} else if err := json.Unmarshal(payload, dst); err != nil {
		d.setErr("could not parse request body", "request_body", err)
	}
	return payload
}

func (d *typeDecoder) Err() error {
	return d.err
}

func (d *typeDecoder) setErr(msg, field string, err error) {
	if err != nil && d.err == nil {
		d.err = errs.B().Code(errs.InvalidArgument).Msg(msg).Details(validationDetails{
			Err:   err.Error(),
			Field: field,
		}).Err()
	}
}
