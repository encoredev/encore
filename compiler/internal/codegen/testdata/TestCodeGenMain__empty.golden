// main code
package main

import (
	"encore.dev/beta/errs"
	"encore.dev/runtime"
	"encore.dev/runtime/config"
	"encore.dev/storage/sqldb"
	"fmt"
	"github.com/json-iterator/go"
	"io"
	"io/ioutil"
)

var json = jsoniter.Config{
	EscapeHTML:             false,
	SortMapKeys:            true,
	ValidateJsonRawMessage: true,
}.Froze()

var srv *runtime.Server

func main() {
	// Register the Encore services
	services := []*config.Service{}

	cfg := &config.ServerConfig{
		AuthData: nil,
		Services: services,
		Testing:  false,
	}
	srv = runtime.Setup(cfg)
	sqldb.Setup(cfg)
	srv.ListenAndServe()
}

type validationDetails struct {
	Field string `json:"field"`
	Err   string `json:"err"`
}

func (validationDetails) ErrDetails() {}

// typeDecoder decodes types from incoming requests
type typeDecoder struct {
	err error
}

func (d *typeDecoder) Body(body io.Reader, dst interface{}) (payload []byte) {
	payload, err := ioutil.ReadAll(body)
	if err == nil && len(payload) == 0 {
		d.setErr("missing request body", "request_body", fmt.Errorf("missing request body"))
	} else if err != nil {
		d.setErr("could not parse request body", "request_body", err)
	} else if err := json.Unmarshal(payload, dst); err != nil {
		d.setErr("could not parse request body", "request_body", err)
	}
	return payload
}

func (d *typeDecoder) Err() error {
	return d.err
}

func (d *typeDecoder) setErr(msg, field string, err error) {
	if err != nil && d.err == nil {
		d.err = errs.B().Code(errs.InvalidArgument).Msg(msg).Details(validationDetails{
			Err:   err.Error(),
			Field: field,
		}).Err()
	}
}
