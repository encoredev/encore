-- svc/svc.go --
package svc

import (
	"context"
	"encoding/json"
	"net/http"
	"time"

	"encore.dev/beta/auth"
	"encore.dev/rlog"
	"encore.dev/types/uuid"
)

type FooParams struct {
	Name string
}

//encore:api public
func One(ctx context.Context) error {
	rlog.Info("one")
	return nil
}

//encore:api public
func Two(ctx context.Context, p *FooParams) error {
	rlog.Info("two", "p", p)
	return nil
}

//encore:api public path=/three/:id
func Three(ctx context.Context, id string) error {
	rlog.Info("three", "id", id)
	return nil
}

//encore:api public path=/four/*baz
func Four(ctx context.Context, baz string) error {
	rlog.Info("four", "baz", baz)
	return Three(ctx, baz)
}

//encore:api public path=/five/:id/:key method=GET,POST
func Five(ctx context.Context, id uuid.UUID, key uint, p *FooParams) error {
	rlog.Info("five", "id", id, "key", key, "p", p)
	Six(ctx, id, id.String(), p)
	return nil
}

//encore:api public path=/six/:id/*key method=GET,POST
func Six(ctx context.Context, id uuid.UUID, key string, p *FooParams) error {
	rlog.Info("six", "id", id, "key", key, "p", p)
	return nil
}

//encore:api public raw path=/foo/:bar/:baz
func Seven(w http.ResponseWriter, req *http.Request) {
	rlog.Info("seven", "method", req.Method, "path", req.URL.Path)
}

type Response struct {
	Message string
}

//encore:api public path=/eight/:bar/:baz
func Eight(ctx context.Context, bar, baz string) (*Response, error) {
	rlog.Info("eight", "bar", bar, "baz", baz)
	return &Response{Message: bar}, nil
}

type QueryParams struct {
	Time time.Time
	UID auth.UID
	JSON json.RawMessage
	Float32 float32
	Float64 float64
}

//encore:api public path=/query method=GET
func Query(ctx context.Context, p *QueryParams) error {
	return nil
}

type AuthData struct{}

//encore:authhandler
func AuthHandler(ctx context.Context, token string) (auth.UID, *AuthData, error) {
	return "", nil, nil
}