-- svc/svc.go --
package svc

import (
	"context"
	"encoding/json"
	"net/http"
	"time"

	"encore.dev/beta/auth"
	"encore.dev/config"
	"encore.dev/cron"
	"encore.dev/middleware"
	"encore.dev/pubsub"
	"encore.dev/rlog"
	"encore.dev/storage/cache"
	"encore.dev/types/uuid"
)

var _ = cron.NewJob("cron-one", cron.JobConfig{
	Title:    "A cron job",
	Schedule: "* * * * 5",
	Endpoint: CronOne,
})

var Topic = pubsub.NewTopic[*FooParams](
	"test-topic",
	pubsub.TopicConfig{
		DeliveryGuarantee: pubsub.AtLeastOnce,
	},
)

type FooParams struct {
	Name string
}

type SubType[T any] struct {
	FieldA config.String
	FieldB config.Value[[]string]
	FieldC []config.Int
	FieldD map[int]config.String
	FieldE struct{
	    SubA config.String
	    SubB FooParams
	    Blah config.Value[T]
	    Foo  []byte
	    Json json.RawMessage
	}
}

type Optional[T any] struct {
    Wrapped T
    Present bool
}

type Cfg struct {
    DefaultFooParams config.Value[FooParams]
    ReadOnly         config.Bool
    MagicNumber      int
    Sub              SubType[Optional[string]]
}

var _ = config.Load[Cfg]()

var _ = config.Load[*Optional[bool]]()

//encore:api public
func One(ctx context.Context) error {
	rlog.Info("one")
	return nil
}

//encore:api public
func Two(ctx context.Context, p *FooParams) error {
	rlog.Info("two", "p", p)
	return nil
}

//encore:api public path=/three/:id
func Three(ctx context.Context, id string) error {
	rlog.Info("three", "id", id)
	return nil
}

//encore:api public path=/four/*baz
func Four(ctx context.Context, baz string) error {
	rlog.Info("four", "baz", baz)
	return Three(ctx, baz)
}

//encore:api public path=/five/:id/:key method=GET,POST
func Five(ctx context.Context, id uuid.UUID, key uint, p *FooParams) error {
	rlog.Info("five", "id", id, "key", key, "p", p)
	Six(ctx, id, id.String(), p)
	return nil
}

//encore:api public path=/six/:id/*key method=GET,POST
func Six(ctx context.Context, id uuid.UUID, key string, p *FooParams) error {
	rlog.Info("six", "id", id, "key", key, "p", p)
	return nil
}

//encore:api public raw path=/foo/:bar/:baz
func Seven(w http.ResponseWriter, req *http.Request) {
	rlog.Info("seven", "method", req.Method, "path", req.URL.Path)
}

type Response struct {
	Message string
}

//encore:api public path=/eight/:bar/:baz
func Eight(ctx context.Context, bar, baz string) (*Response, error) {
	rlog.Info("eight", "bar", bar, "baz", baz)
	return &Response{Message: bar}, nil
}

type ComplexResponse struct {
	Header string `header:"X-Header"`
	Message string
}

//encore:api public path=/nine/:bar/:baz
func Nine(ctx context.Context, bar, baz string) (*ComplexResponse, error) {
	rlog.Info("nine", "bar", bar, "baz", baz)
	return &Response{Message: bar, Header: baz}, nil
}

type HeaderResponse struct {
	Header string `header:"X-Header"`
}

//encore:api public path=/ten
func Ten(ctx context.Context) (*HeaderResponse, error) {
	rlog.Info("nine")
	return &HeaderResponse{Header: "header"}, nil
}

//encore:api private path=/cron
func CronOne(ctx context.Context) error {
	return nil
}

type QueryParams struct {
	Time time.Time
	UID auth.UID
	JSON json.RawMessage
	Float32 float32
	Float64 float64
	Strings []string
	Times []time.Time
}

//encore:api public path=/query method=GET,POST
func Query(ctx context.Context, p *QueryParams) (*QueryParams, error) {
	return p, nil
}

type AuthData struct{}

type AuthParams struct {
    Header1 string `header:"one"`
    Header2 int `header:"two"`
    Header3 uint `header:"three"`
    Query1 string `query:"one"`
    Query2 []string `query:"two"`
    Query3 time.Time `query:"three"`

}

//encore:authhandler
func AuthHandler(ctx context.Context, params *AuthParams) (auth.UID, *AuthData, error) {
	return "", nil, nil
}

//encore:service
type Service struct{}

func initService() (*Service, error) { return nil, nil }


//encore:api public path=/di method=GET tag:di
func (s *Service) DI(ctx context.Context) error {
    return nil
}

//encore:api public raw path=/di/raw
func (s *Service) DIRaw(w http.ResponseWriter, req *http.Request) {
}

//encore:middleware target=tag:di
func (s *Service) MyMiddleware(req middleware.Request, next middleware.Next) middleware.Response {
    return next(req)
}

var cluster = cache.NewCluster("cluster", cache.ClusterConfig{})

var strings = cache.NewIntKeyspace[int](cluster, cache.KeyspaceConfig{
    KeyPattern: "foo/:key",
})

-- otherservice/svc.go --
package otherservice

import (
	"context"

	"encore.dev/pubsub"

	"encore.app/svc"
)

var _ = pubsub.NewSubscription(
	svc.Topic, "subscription-name",
	pubsub.SubscriptionConfig[*svc.Topic]{
		Handler: Consumer,
	},
)

func Consumer(ctx context.Context, msg *svc.Topic) error {
    return nil
}
