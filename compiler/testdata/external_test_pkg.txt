test

-- go.mod --
module test

require "encore.dev" v0.0.0

-- svc/svc.go --
package svc

import (
	"context"
	"encoding/json"
	"net/http"
)

type StartIngestResponse struct {
	ID string
}

//encore:api public path=/api/ingest method=POST
func StartIngest(ctx context.Context) (StartIngestResponse, error) {
	return StartIngestResponse{ID: "foo"}, nil
}

//encore:api public raw path=/api/ingest-raw method=POST
func StartIngestRaw(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusAccepted)
	res := StartIngestResponse{ID: "foo"}
	err := json.NewEncoder(w).Encode(res)
	if err != nil {
		panic(err)
	}
}
-- svc/svc_test.go --
package svc

import (
	"context"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestAPI(t *testing.T) {
	// this test works fine
	t.Run("can call an encore handler", func(t *testing.T) {
		ctx := context.Background()

		res, err := StartIngest(ctx)
        if err != nil {
            t.Fatal(err)
        } else if res.ID == "" {
            t.Fatal("got empty id")
        }
	})

	// if this is present, the encore test command fails
	t.Run("can call a raw handler", func(t *testing.T) {
		req := httptest.NewRequest(http.MethodPost, "http://example.com/bleh", nil)
		w := httptest.NewRecorder()

		StartIngestRaw(w, req)

		response := w.Result()
		defer response.Body.Close()

		var res StartIngestResponse
		err := json.NewDecoder(response.Body).Decode(&res)
        if err != nil {
            t.Fatal(err)
        } else if res.ID == "" {
            t.Fatal("got empty id")
        }
	})
}