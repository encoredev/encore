package main

import (
	"context"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"

	{{if .AuthHandler}}"encore.dev/beta/auth"{{end}}
	"encore.dev/beta/errs"
	"encore.dev/runtime"
	"encore.dev/runtime/config"
	"encore.dev/storage/sqldb"
	jsoniter "github.com/json-iterator/go"
	"github.com/felixge/httpsnoop"

	{{range .Imports -}}
		{{if .Named}}{{.Name}} {{end}}"{{.Path}}"
	{{end}}
)

// Prevent unused imports
var (
	_ = context.Background
	_ = fmt.Errorf
	_ = http.Error
	_ = io.EOF
	_ = errs.B
	_ = ioutil.ReadAll
	_ = strconv.Quote
	_ = strings.HasPrefix
	_ = httpsnoop.CaptureMetrics
)

var json = jsoniter.Config{
	EscapeHTML: false,
	SortMapKeys: true,
	ValidateJsonRawMessage: true,
}.Froze()

{{range .Svcs}}
{{- range .RPCs}}
func __encore_{{.Svc.Name}}_{{.Name}}(w http.ResponseWriter, req *http.Request) {
	runtime.BeginOperation()
	defer runtime.FinishOperation()
	var err error
{{- if $.AuthHandler}}

	var (
		uid      auth.UID
		token    string
		authData interface{}
	)
	if auth := req.Header.Get("Authorization"); strings.HasPrefix(auth, "Bearer ") {
		token = auth[len("Bearer "):]
		uid, authData, err = __encore_validateAuth(req.Context(), token)
		if err != nil {
			errs.HTTPError(w, err)
			return
		}
	}
{{- if requiresAuth .}}
	if uid == "" {
		if token == "" {
			runtime.Logger().Info().
				Str("service", "{{.Svc.Name}}").
				Str("endpoint", "{{.Name}}").
				Msg("rejecting request due to missing auth token")
		}
		errs.HTTPError(w, errs.B().Code(errs.Unauthenticated).Msg("missing auth token").Err())
		return
	}
{{- end}}
{{- end}}

{{- if .Raw}}
	err = runtime.BeginRequest(runtime.RequestData{
		Type:            runtime.RPCCall,
		Service:         "{{.Svc.Name}}",
		Endpoint:        "{{.Name}}",
		CallExprIdx:     0,
		EndpointExprIdx: {{traceExpr .}},
		Inputs:          nil,
{{- if $.AuthHandler}}
		UID:             uid,
		AuthData:        authData,
{{- end}}
	})
	if err != nil {
		errs.HTTPError(w, errs.B().Code(errs.Internal).Msg("internal error").Err())
		return
	}

	// Call the endpoint
	m := httpsnoop.CaptureMetrics(http.HandlerFunc({{.Svc.Name}}.{{.Name}}), w, req)
	if m.Code >= 400 {
		err = fmt.Errorf("response status code %d", m.Code)
	}
	runtime.FinishHTTPRequest(nil, err, m.Code)
{{- else }}
{{- if .Request}}

	payload, err := ioutil.ReadAll(req.Body)
	if err != nil {
		errs.HTTPError(w, errs.WrapCode(err, errs.InvalidArgument, "could not read request"))
		return
	}
	inputs := [][]byte{payload}
{{- end}}
	
	err = runtime.BeginRequest(runtime.RequestData{
		Type:            runtime.RPCCall,
		Service:         "{{.Svc.Name}}",
		Endpoint:        "{{.Name}}",
		CallExprIdx:     0,
		EndpointExprIdx: {{traceExpr .}},
		Inputs:          {{if .Request}}inputs{{else}}nil{{end}},
{{- if $.AuthHandler}}
		UID:             uid,
		AuthData:        authData,
{{- end}}
	})
	if err != nil {
		errs.HTTPError(w, errs.B().Code(errs.Internal).Msg("internal error").Err())
		return
	}
{{- if .Request}}

	// Parse the request payload
	var params {{typeName .Request}}
	err = json.Unmarshal(payload, &params)
	if err != nil {
		if len(payload) == 0 {
			err = errs.B().Code(errs.InvalidArgument).Msg("missing request payload").Err()
		} else {
			err = errs.WrapCode(err, errs.InvalidArgument, "could not parse request")
		}
		runtime.FinishRequest(nil, err)
		errs.HTTPError(w, err)
		return
	}
{{- end}}

	// Call the endpoint
	defer func() {
		// Catch handler panic
		if e := recover(); e != nil {
			err := errs.B().Code(errs.Internal).Msgf("panic handling request: %v", e).Err()
			runtime.FinishRequest(nil, err)
			errs.HTTPError(w, err)
		}
	}()
	{{if .Response}}resp, {{end}}respErr := {{pkgName .Svc.Root.ImportPath}}.{{.Name}}(req.Context(){{if .Request}}, params{{end}})
	if respErr != nil {
		respErr = errs.Convert(respErr)
		runtime.FinishRequest(nil, respErr)
		errs.HTTPError(w, respErr)
		return
	}

{{- if .Response}}

	// Serialize the response
	var respData []byte
	respData, marshalErr := json.MarshalIndent(resp, "", "  ")
	if marshalErr != nil {
		marshalErr = errs.WrapCode(marshalErr, errs.Internal, "failed to marshal response")
		runtime.FinishRequest(nil, marshalErr)
		errs.HTTPError(w, marshalErr)
		return
	}
	respData = append(respData, '\n')
	output := [][]byte{respData}
	runtime.FinishRequest(output, nil)
	w.WriteHeader(200)
	w.Write(respData)
{{- else}}
	runtime.FinishRequest(nil, nil)
	w.WriteHeader(200)
{{- end}}
{{- end}}
}
{{end}}
{{end}}

{{- with .AuthHandler}}
func __encore_validateAuth(ctx context.Context, token string) (uid auth.UID, authData interface{}, authErr error) {
	if token == "" {
		return "", nil, nil
	}
	done := make(chan struct{})
	call, err := runtime.BeginAuth({{traceExpr .}}, token)
	if err != nil {
		return "", nil, err
	}

	go func() {
		defer close(done)
		authErr = call.BeginReq(runtime.RequestData{
			Type:            runtime.AuthHandler,
			Service:         "{{.Svc.Name}}",
			Endpoint:        "{{.Name}}",
			CallExprIdx:     0,
			EndpointExprIdx: {{traceExpr .}},
			Inputs:          [][]byte{[]byte(strconv.Quote(token))},
		})
		if authErr != nil {
			return
		}
		defer func() {
			if err2 := recover(); err2 != nil {
				authErr = errs.B().Code(errs.Internal).Msgf("auth handler panicked: %v", err2).Err()
				call.FinishReq(nil, authErr)
			}
		}()
{{- if $.AuthHandler.AuthData}}
		uid, authData, authErr = {{pkgName .Svc.Root.ImportPath}}.{{.Name}}(ctx, token)
		serialized, _ := runtime.SerializeInputs(uid, authData)
{{- else}}
		uid, authErr = {{pkgName .Svc.Root.ImportPath}}.{{.Name}}(ctx, token)
		serialized, _ := runtime.SerializeInputs(uid)
{{- end}}
		if authErr != nil {
			call.FinishReq(nil, authErr)
		} else {
			call.FinishReq(serialized, nil)
		}
	}()
	<-done
	call.Finish(uid, authErr)
	return uid, authData, authErr
}
{{- end}}

var srv *runtime.Server

func main() {
	// Register the Encore services
	services := []*config.Service{
{{- range .Svcs}}
		{
			Name: "{{.Name}}",
			RelPath: "{{.Root.RelPath}}",
			SQLDB: {{usesSQLDB .}},
			Endpoints: []*config.Endpoint{
{{- range .RPCs}}
				{
					Name: "{{.Name}}",
					Raw: {{.Raw}},
					Handler: __encore_{{.Svc.Name}}_{{.Name}},
				},
{{- end}}
			},
		},
{{- end}}
	}

	cfg := &config.ServerConfig{
		Services: services,
		Testing: false,
	}
	srv = runtime.Setup(cfg)
	sqldb.Setup(cfg)
	srv.ListenAndServe()
}