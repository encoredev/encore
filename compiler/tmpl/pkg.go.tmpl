package {{.Pkg.Name}}

import (
	"context"

	"encore.dev/runtime"
	"encore.dev/beta/errs"
	{{range .Imports -}}
		{{if .Named}}{{.Name}} {{end}}"{{.Path}}"
	{{end}}
)

{{range $rpcIdx, $rpc := .RPCs}}
func __encore_{{$rpc.Svc}}_{{$rpc.Name}}(callExprIdx, endpointExprIdx int32, ctx context.Context
	{{- range $idx, $typ := $rpc.Params}}, p{{$idx}} {{$typ}}{{end}}) (
	{{- if $rpc.Resp}}resp {{$rpc.Resp}}, {{end}}err error) {
{{- if $rpc.Params}}
	inputs, err := runtime.SerializeInputs({{range $idx, $typ := $rpc.Params}}p{{$idx}},{{end}})
	if err != nil {
		return 
	}
{{- else}}
	var inputs [][]byte
{{- end}}
	call, err := runtime.BeginCall(runtime.CallParams{
		Service:  "{{$rpc.Svc}}",
		Endpoint: "{{$rpc.Name}}",
		CallExprIdx: callExprIdx,
		EndpointExprIdx: endpointExprIdx,
	})
	if err != nil {
		return
	}

	// Run the request in a different goroutine
	var response struct {
		data [][]byte
		err error
		panicked bool
	}
	done := make(chan struct{})
	go func() {
		defer close(done)
		err := call.BeginReq(runtime.RequestData{
			Type:            runtime.RPCCall,
			Service:         "{{$rpc.Svc}}",
			Endpoint:        "{{$rpc.Name}}",
			CallExprIdx:     callExprIdx,
			EndpointExprIdx: endpointExprIdx,
			Inputs:          inputs,
		})
		if err != nil {
			response.err = err
			return
		}
		defer func() {
			if err2 := recover(); err2 != nil {
				response.err = errs.B().Code(errs.Internal).Msgf("panic handling request: %v", err2).Err()
				response.panicked = true
				call.FinishReq(nil, response.err)
			}
		}()
		
{{- if $rpc.Params}}
		var (
{{- range $idx, $typ := $rpc.Params}}
			r{{$idx}} {{$typ}}
{{- end}}
		)
		if response.err = runtime.CopyInputs(inputs, []interface{}{ {{range $idx, $typ := $rpc.Params}}&r{{$idx}},{{end}} }); response.err != nil {
			call.FinishReq(nil, response.err)
			return
		}
{{- end}}

		{{if $rpc.Resp}}rpcResp, {{end}}rpcErr := {{$rpc.Func}}(ctx{{range $idx, $typ := $rpc.Params}}, p{{$idx}}{{end}})
{{- if $rpc.Resp}}
		response.data, _ = runtime.SerializeInputs(rpcResp)
{{- end}}
		if rpcErr != nil {
			call.FinishReq(nil, rpcErr)
			response.err = errs.RoundTrip(rpcErr)
		} else {
			call.FinishReq(response.data, nil)
		}
	}()
	<-done

	call.Finish(response.err)
{{- if $rpc.Resp}}
	// If the handler panicked we won't have any response data.
	if !response.panicked {
		_ = runtime.CopyInputs(response.data, []interface{}{&resp})
	}
	return resp, response.err
{{- else}}
	return response.err
{{- end}}
}
{{end}}