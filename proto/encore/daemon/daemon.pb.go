// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: encore/daemon/daemon.proto

package daemon

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DBRole int32

const (
	DBRole_DB_ROLE_UNSPECIFIED DBRole = 0
	DBRole_DB_ROLE_SUPERUSER   DBRole = 1
	DBRole_DB_ROLE_ADMIN       DBRole = 2
	DBRole_DB_ROLE_WRITE       DBRole = 3
	DBRole_DB_ROLE_READ        DBRole = 4
)

// Enum value maps for DBRole.
var (
	DBRole_name = map[int32]string{
		0: "DB_ROLE_UNSPECIFIED",
		1: "DB_ROLE_SUPERUSER",
		2: "DB_ROLE_ADMIN",
		3: "DB_ROLE_WRITE",
		4: "DB_ROLE_READ",
	}
	DBRole_value = map[string]int32{
		"DB_ROLE_UNSPECIFIED": 0,
		"DB_ROLE_SUPERUSER":   1,
		"DB_ROLE_ADMIN":       2,
		"DB_ROLE_WRITE":       3,
		"DB_ROLE_READ":        4,
	}
)

func (x DBRole) Enum() *DBRole {
	p := new(DBRole)
	*p = x
	return p
}

func (x DBRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBRole) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_daemon_daemon_proto_enumTypes[0].Descriptor()
}

func (DBRole) Type() protoreflect.EnumType {
	return &file_encore_daemon_daemon_proto_enumTypes[0]
}

func (x DBRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBRole.Descriptor instead.
func (DBRole) EnumDescriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{0}
}

type DBClusterType int32

const (
	DBClusterType_DB_CLUSTER_TYPE_UNSPECIFIED DBClusterType = 0
	DBClusterType_DB_CLUSTER_TYPE_RUN         DBClusterType = 1
	DBClusterType_DB_CLUSTER_TYPE_TEST        DBClusterType = 2
	DBClusterType_DB_CLUSTER_TYPE_SHADOW      DBClusterType = 3
)

// Enum value maps for DBClusterType.
var (
	DBClusterType_name = map[int32]string{
		0: "DB_CLUSTER_TYPE_UNSPECIFIED",
		1: "DB_CLUSTER_TYPE_RUN",
		2: "DB_CLUSTER_TYPE_TEST",
		3: "DB_CLUSTER_TYPE_SHADOW",
	}
	DBClusterType_value = map[string]int32{
		"DB_CLUSTER_TYPE_UNSPECIFIED": 0,
		"DB_CLUSTER_TYPE_RUN":         1,
		"DB_CLUSTER_TYPE_TEST":        2,
		"DB_CLUSTER_TYPE_SHADOW":      3,
	}
)

func (x DBClusterType) Enum() *DBClusterType {
	p := new(DBClusterType)
	*p = x
	return p
}

func (x DBClusterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBClusterType) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_daemon_daemon_proto_enumTypes[1].Descriptor()
}

func (DBClusterType) Type() protoreflect.EnumType {
	return &file_encore_daemon_daemon_proto_enumTypes[1]
}

func (x DBClusterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBClusterType.Descriptor instead.
func (DBClusterType) EnumDescriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{1}
}

type RunRequest_BrowserMode int32

const (
	RunRequest_BROWSER_AUTO   RunRequest_BrowserMode = 0
	RunRequest_BROWSER_NEVER  RunRequest_BrowserMode = 1
	RunRequest_BROWSER_ALWAYS RunRequest_BrowserMode = 2
)

// Enum value maps for RunRequest_BrowserMode.
var (
	RunRequest_BrowserMode_name = map[int32]string{
		0: "BROWSER_AUTO",
		1: "BROWSER_NEVER",
		2: "BROWSER_ALWAYS",
	}
	RunRequest_BrowserMode_value = map[string]int32{
		"BROWSER_AUTO":   0,
		"BROWSER_NEVER":  1,
		"BROWSER_ALWAYS": 2,
	}
)

func (x RunRequest_BrowserMode) Enum() *RunRequest_BrowserMode {
	p := new(RunRequest_BrowserMode)
	*p = x
	return p
}

func (x RunRequest_BrowserMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunRequest_BrowserMode) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_daemon_daemon_proto_enumTypes[2].Descriptor()
}

func (RunRequest_BrowserMode) Type() protoreflect.EnumType {
	return &file_encore_daemon_daemon_proto_enumTypes[2]
}

func (x RunRequest_BrowserMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunRequest_BrowserMode.Descriptor instead.
func (RunRequest_BrowserMode) EnumDescriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{6, 0}
}

type RunRequest_DebugMode int32

const (
	RunRequest_DEBUG_DISABLED RunRequest_DebugMode = 0
	RunRequest_DEBUG_ENABLED  RunRequest_DebugMode = 1
	RunRequest_DEBUG_BREAK    RunRequest_DebugMode = 2
)

// Enum value maps for RunRequest_DebugMode.
var (
	RunRequest_DebugMode_name = map[int32]string{
		0: "DEBUG_DISABLED",
		1: "DEBUG_ENABLED",
		2: "DEBUG_BREAK",
	}
	RunRequest_DebugMode_value = map[string]int32{
		"DEBUG_DISABLED": 0,
		"DEBUG_ENABLED":  1,
		"DEBUG_BREAK":    2,
	}
)

func (x RunRequest_DebugMode) Enum() *RunRequest_DebugMode {
	p := new(RunRequest_DebugMode)
	*p = x
	return p
}

func (x RunRequest_DebugMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunRequest_DebugMode) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_daemon_daemon_proto_enumTypes[3].Descriptor()
}

func (RunRequest_DebugMode) Type() protoreflect.EnumType {
	return &file_encore_daemon_daemon_proto_enumTypes[3]
}

func (x RunRequest_DebugMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunRequest_DebugMode.Descriptor instead.
func (RunRequest_DebugMode) EnumDescriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{6, 1}
}

type DumpMetaRequest_Format int32

const (
	DumpMetaRequest_FORMAT_UNSPECIFIED DumpMetaRequest_Format = 0
	DumpMetaRequest_FORMAT_JSON        DumpMetaRequest_Format = 1
	DumpMetaRequest_FORMAT_PROTO       DumpMetaRequest_Format = 2
)

// Enum value maps for DumpMetaRequest_Format.
var (
	DumpMetaRequest_Format_name = map[int32]string{
		0: "FORMAT_UNSPECIFIED",
		1: "FORMAT_JSON",
		2: "FORMAT_PROTO",
	}
	DumpMetaRequest_Format_value = map[string]int32{
		"FORMAT_UNSPECIFIED": 0,
		"FORMAT_JSON":        1,
		"FORMAT_PROTO":       2,
	}
)

func (x DumpMetaRequest_Format) Enum() *DumpMetaRequest_Format {
	p := new(DumpMetaRequest_Format)
	*p = x
	return p
}

func (x DumpMetaRequest_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DumpMetaRequest_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_daemon_daemon_proto_enumTypes[4].Descriptor()
}

func (DumpMetaRequest_Format) Type() protoreflect.EnumType {
	return &file_encore_daemon_daemon_proto_enumTypes[4]
}

func (x DumpMetaRequest_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DumpMetaRequest_Format.Descriptor instead.
func (DumpMetaRequest_Format) EnumDescriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{32, 0}
}

type CommandMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Msg:
	//
	//	*CommandMessage_Output
	//	*CommandMessage_Exit
	//	*CommandMessage_Errors
	Msg           isCommandMessage_Msg `protobuf_oneof:"msg"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandMessage) Reset() {
	*x = CommandMessage{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandMessage) ProtoMessage() {}

func (x *CommandMessage) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandMessage.ProtoReflect.Descriptor instead.
func (*CommandMessage) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{0}
}

func (x *CommandMessage) GetMsg() isCommandMessage_Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *CommandMessage) GetOutput() *CommandOutput {
	if x != nil {
		if x, ok := x.Msg.(*CommandMessage_Output); ok {
			return x.Output
		}
	}
	return nil
}

func (x *CommandMessage) GetExit() *CommandExit {
	if x != nil {
		if x, ok := x.Msg.(*CommandMessage_Exit); ok {
			return x.Exit
		}
	}
	return nil
}

func (x *CommandMessage) GetErrors() *CommandDisplayErrors {
	if x != nil {
		if x, ok := x.Msg.(*CommandMessage_Errors); ok {
			return x.Errors
		}
	}
	return nil
}

type isCommandMessage_Msg interface {
	isCommandMessage_Msg()
}

type CommandMessage_Output struct {
	Output *CommandOutput `protobuf:"bytes,1,opt,name=output,proto3,oneof"`
}

type CommandMessage_Exit struct {
	Exit *CommandExit `protobuf:"bytes,2,opt,name=exit,proto3,oneof"`
}

type CommandMessage_Errors struct {
	Errors *CommandDisplayErrors `protobuf:"bytes,3,opt,name=errors,proto3,oneof"`
}

func (*CommandMessage_Output) isCommandMessage_Msg() {}

func (*CommandMessage_Exit) isCommandMessage_Msg() {}

func (*CommandMessage_Errors) isCommandMessage_Msg() {}

type CommandOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stdout        []byte                 `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr        []byte                 `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandOutput) Reset() {
	*x = CommandOutput{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandOutput) ProtoMessage() {}

func (x *CommandOutput) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandOutput.ProtoReflect.Descriptor instead.
func (*CommandOutput) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{1}
}

func (x *CommandOutput) GetStdout() []byte {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *CommandOutput) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

type CommandExit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // exit code
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandExit) Reset() {
	*x = CommandExit{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandExit) ProtoMessage() {}

func (x *CommandExit) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandExit.ProtoReflect.Descriptor instead.
func (*CommandExit) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{2}
}

func (x *CommandExit) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type CommandDisplayErrors struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Errinsrc      []byte                 `protobuf:"bytes,1,opt,name=errinsrc,proto3" json:"errinsrc,omitempty"` // error messages in source code
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandDisplayErrors) Reset() {
	*x = CommandDisplayErrors{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandDisplayErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandDisplayErrors) ProtoMessage() {}

func (x *CommandDisplayErrors) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandDisplayErrors.ProtoReflect.Descriptor instead.
func (*CommandDisplayErrors) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{3}
}

func (x *CommandDisplayErrors) GetErrinsrc() []byte {
	if x != nil {
		return x.Errinsrc
	}
	return nil
}

type CreateAppRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// app_root is the absolute filesystem path to the Encore app root.
	AppRoot string `protobuf:"bytes,1,opt,name=app_root,json=appRoot,proto3" json:"app_root,omitempty"`
	// template is the template used to create the app
	Template string `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
	// tutorial is a flag to indicate if the app is a tutorial app
	Tutorial      bool `protobuf:"varint,3,opt,name=tutorial,proto3" json:"tutorial,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAppRequest) Reset() {
	*x = CreateAppRequest{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppRequest) ProtoMessage() {}

func (x *CreateAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppRequest.ProtoReflect.Descriptor instead.
func (*CreateAppRequest) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{4}
}

func (x *CreateAppRequest) GetAppRoot() string {
	if x != nil {
		return x.AppRoot
	}
	return ""
}

func (x *CreateAppRequest) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *CreateAppRequest) GetTutorial() bool {
	if x != nil {
		return x.Tutorial
	}
	return false
}

type CreateAppResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppId         string                 `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAppResponse) Reset() {
	*x = CreateAppResponse{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppResponse) ProtoMessage() {}

func (x *CreateAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppResponse.ProtoReflect.Descriptor instead.
func (*CreateAppResponse) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{5}
}

func (x *CreateAppResponse) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type RunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// app_root is the absolute filesystem path to the Encore app root.
	AppRoot string `protobuf:"bytes,1,opt,name=app_root,json=appRoot,proto3" json:"app_root,omitempty"`
	// working_dir is the working directory relative to the app_root,
	// for formatting relative paths in error messages.
	WorkingDir string `protobuf:"bytes,2,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`
	// watch, if true, enables live reloading of the app whenever the source changes.
	Watch bool `protobuf:"varint,5,opt,name=watch,proto3" json:"watch,omitempty"`
	// listen_addr is the address to listen on.
	ListenAddr string `protobuf:"bytes,6,opt,name=listen_addr,json=listenAddr,proto3" json:"listen_addr,omitempty"`
	// environ is the environment to set for the running command.
	// Each entry is a string in the format "KEY=VALUE", identical to os.Environ().
	Environ []string `protobuf:"bytes,7,rep,name=environ,proto3" json:"environ,omitempty"`
	// trace_file, if set specifies a trace file to write trace information
	// about the parse and compilation process to.
	TraceFile *string `protobuf:"bytes,8,opt,name=trace_file,json=traceFile,proto3,oneof" json:"trace_file,omitempty"`
	// namespace is the infrastructure namespace to use.
	// If empty the active namespace is used.
	Namespace *string `protobuf:"bytes,9,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
	// browser specifies whether and how to open the browser on startup.
	Browser RunRequest_BrowserMode `protobuf:"varint,10,opt,name=browser,proto3,enum=encore.daemon.RunRequest_BrowserMode" json:"browser,omitempty"`
	// debug_mode specifies the debug mode to use.
	DebugMode     RunRequest_DebugMode `protobuf:"varint,11,opt,name=debug_mode,json=debugMode,proto3,enum=encore.daemon.RunRequest_DebugMode" json:"debug_mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunRequest) Reset() {
	*x = RunRequest{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequest) ProtoMessage() {}

func (x *RunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequest.ProtoReflect.Descriptor instead.
func (*RunRequest) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{6}
}

func (x *RunRequest) GetAppRoot() string {
	if x != nil {
		return x.AppRoot
	}
	return ""
}

func (x *RunRequest) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *RunRequest) GetWatch() bool {
	if x != nil {
		return x.Watch
	}
	return false
}

func (x *RunRequest) GetListenAddr() string {
	if x != nil {
		return x.ListenAddr
	}
	return ""
}

func (x *RunRequest) GetEnviron() []string {
	if x != nil {
		return x.Environ
	}
	return nil
}

func (x *RunRequest) GetTraceFile() string {
	if x != nil && x.TraceFile != nil {
		return *x.TraceFile
	}
	return ""
}

func (x *RunRequest) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *RunRequest) GetBrowser() RunRequest_BrowserMode {
	if x != nil {
		return x.Browser
	}
	return RunRequest_BROWSER_AUTO
}

func (x *RunRequest) GetDebugMode() RunRequest_DebugMode {
	if x != nil {
		return x.DebugMode
	}
	return RunRequest_DEBUG_DISABLED
}

type TestRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	AppRoot    string                 `protobuf:"bytes,1,opt,name=app_root,json=appRoot,proto3" json:"app_root,omitempty"`
	WorkingDir string                 `protobuf:"bytes,2,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`
	Args       []string               `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	// environ is the environment to set for the running command.
	// Each entry is a string in the format "KEY=VALUE", identical to os.Environ().
	Environ []string `protobuf:"bytes,4,rep,name=environ,proto3" json:"environ,omitempty"`
	// trace_file, if set specifies a trace file to write trace information
	// about the parse and compilation process to.
	TraceFile *string `protobuf:"bytes,6,opt,name=trace_file,json=traceFile,proto3,oneof" json:"trace_file,omitempty"`
	// codegen_debug, if true, dumps the generated code and prints where it is located.
	CodegenDebug  bool `protobuf:"varint,7,opt,name=codegen_debug,json=codegenDebug,proto3" json:"codegen_debug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestRequest) Reset() {
	*x = TestRequest{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRequest) ProtoMessage() {}

func (x *TestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRequest.ProtoReflect.Descriptor instead.
func (*TestRequest) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{7}
}

func (x *TestRequest) GetAppRoot() string {
	if x != nil {
		return x.AppRoot
	}
	return ""
}

func (x *TestRequest) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *TestRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *TestRequest) GetEnviron() []string {
	if x != nil {
		return x.Environ
	}
	return nil
}

func (x *TestRequest) GetTraceFile() string {
	if x != nil && x.TraceFile != nil {
		return *x.TraceFile
	}
	return ""
}

func (x *TestRequest) GetCodegenDebug() bool {
	if x != nil {
		return x.CodegenDebug
	}
	return false
}

type TestSpecRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	AppRoot    string                 `protobuf:"bytes,1,opt,name=app_root,json=appRoot,proto3" json:"app_root,omitempty"`
	WorkingDir string                 `protobuf:"bytes,2,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`
	Args       []string               `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	// environ is the environment to set for the running command.
	// Each entry is a string in the format "KEY=VALUE", identical to os.Environ().
	Environ       []string `protobuf:"bytes,4,rep,name=environ,proto3" json:"environ,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestSpecRequest) Reset() {
	*x = TestSpecRequest{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSpecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSpecRequest) ProtoMessage() {}

func (x *TestSpecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSpecRequest.ProtoReflect.Descriptor instead.
func (*TestSpecRequest) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{8}
}

func (x *TestSpecRequest) GetAppRoot() string {
	if x != nil {
		return x.AppRoot
	}
	return ""
}

func (x *TestSpecRequest) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *TestSpecRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *TestSpecRequest) GetEnviron() []string {
	if x != nil {
		return x.Environ
	}
	return nil
}

type TestSpecResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Command       string                 `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Args          []string               `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Environ       []string               `protobuf:"bytes,3,rep,name=environ,proto3" json:"environ,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestSpecResponse) Reset() {
	*x = TestSpecResponse{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSpecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSpecResponse) ProtoMessage() {}

func (x *TestSpecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSpecResponse.ProtoReflect.Descriptor instead.
func (*TestSpecResponse) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{9}
}

func (x *TestSpecResponse) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *TestSpecResponse) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *TestSpecResponse) GetEnviron() []string {
	if x != nil {
		return x.Environ
	}
	return nil
}

type ExecScriptRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	AppRoot    string                 `protobuf:"bytes,1,opt,name=app_root,json=appRoot,proto3" json:"app_root,omitempty"`
	WorkingDir string                 `protobuf:"bytes,2,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`
	ScriptArgs []string               `protobuf:"bytes,4,rep,name=script_args,json=scriptArgs,proto3" json:"script_args,omitempty"`
	// environ is the environment to set for the running command.
	// Each entry is a string in the format "KEY=VALUE", identical to os.Environ().
	Environ []string `protobuf:"bytes,5,rep,name=environ,proto3" json:"environ,omitempty"`
	// trace_file, if set specifies a trace file to write trace information
	// about the parse and compilation process to.
	TraceFile *string `protobuf:"bytes,6,opt,name=trace_file,json=traceFile,proto3,oneof" json:"trace_file,omitempty"`
	// namespace is the infrastructure namespace to use.
	// If empty the active namespace is used.
	Namespace     *string `protobuf:"bytes,7,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecScriptRequest) Reset() {
	*x = ExecScriptRequest{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecScriptRequest) ProtoMessage() {}

func (x *ExecScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecScriptRequest.ProtoReflect.Descriptor instead.
func (*ExecScriptRequest) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{10}
}

func (x *ExecScriptRequest) GetAppRoot() string {
	if x != nil {
		return x.AppRoot
	}
	return ""
}

func (x *ExecScriptRequest) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *ExecScriptRequest) GetScriptArgs() []string {
	if x != nil {
		return x.ScriptArgs
	}
	return nil
}

func (x *ExecScriptRequest) GetEnviron() []string {
	if x != nil {
		return x.Environ
	}
	return nil
}

func (x *ExecScriptRequest) GetTraceFile() string {
	if x != nil && x.TraceFile != nil {
		return *x.TraceFile
	}
	return ""
}

func (x *ExecScriptRequest) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

type CheckRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	AppRoot    string                 `protobuf:"bytes,1,opt,name=app_root,json=appRoot,proto3" json:"app_root,omitempty"`
	WorkingDir string                 `protobuf:"bytes,2,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`
	// codegen_debug, if true, dumps the generated code and prints where it is located.
	CodegenDebug bool `protobuf:"varint,3,opt,name=codegen_debug,json=codegenDebug,proto3" json:"codegen_debug,omitempty"`
	// parse_tests, if true, exercises test parsing and codegen as well.
	ParseTests bool `protobuf:"varint,4,opt,name=parse_tests,json=parseTests,proto3" json:"parse_tests,omitempty"`
	// environ is the environment to set for the running command.
	// Each entry is a string in the format "KEY=VALUE", identical to os.Environ().
	Environ       []string `protobuf:"bytes,5,rep,name=environ,proto3" json:"environ,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckRequest) Reset() {
	*x = CheckRequest{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRequest) ProtoMessage() {}

func (x *CheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRequest.ProtoReflect.Descriptor instead.
func (*CheckRequest) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{11}
}

func (x *CheckRequest) GetAppRoot() string {
	if x != nil {
		return x.AppRoot
	}
	return ""
}

func (x *CheckRequest) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *CheckRequest) GetCodegenDebug() bool {
	if x != nil {
		return x.CodegenDebug
	}
	return false
}

func (x *CheckRequest) GetParseTests() bool {
	if x != nil {
		return x.ParseTests
	}
	return false
}

func (x *CheckRequest) GetEnviron() []string {
	if x != nil {
		return x.Environ
	}
	return nil
}

type ExportRequest struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	AppRoot string                 `protobuf:"bytes,1,opt,name=app_root,json=appRoot,proto3" json:"app_root,omitempty"`
	// goos and goarch specify the platform configuration to compile
	// the application for. The values must be valid GOOS/GOARCH values.
	Goos   string `protobuf:"bytes,2,opt,name=goos,proto3" json:"goos,omitempty"`
	Goarch string `protobuf:"bytes,3,opt,name=goarch,proto3" json:"goarch,omitempty"`
	// cgo_enabled specifies whether to build with cgo enabled.
	// The host must have a valid C compiler for the target platform
	// if true.
	CgoEnabled bool `protobuf:"varint,4,opt,name=cgo_enabled,json=cgoEnabled,proto3" json:"cgo_enabled,omitempty"`
	// environ is the environment to set for the running command.
	// Each entry is a string in the format "KEY=VALUE", identical to os.Environ().
	Environ []string `protobuf:"bytes,5,rep,name=environ,proto3" json:"environ,omitempty"`
	// Types that are valid to be assigned to Format:
	//
	//	*ExportRequest_Docker
	Format        isExportRequest_Format `protobuf_oneof:"format"`
	InfraConfPath string                 `protobuf:"bytes,7,opt,name=infra_conf_path,json=infraConfPath,proto3" json:"infra_conf_path,omitempty"`
	Services      []string               `protobuf:"bytes,8,rep,name=services,proto3" json:"services,omitempty"`
	Gateways      []string               `protobuf:"bytes,9,rep,name=gateways,proto3" json:"gateways,omitempty"`
	SkipInfraConf bool                   `protobuf:"varint,10,opt,name=skip_infra_conf,json=skipInfraConf,proto3" json:"skip_infra_conf,omitempty"`
	// A parent path to app_root containing the .git, or the same as app_root
	WorkspaceRoot string `protobuf:"bytes,11,opt,name=workspace_root,json=workspaceRoot,proto3" json:"workspace_root,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportRequest) Reset() {
	*x = ExportRequest{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportRequest) ProtoMessage() {}

func (x *ExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportRequest.ProtoReflect.Descriptor instead.
func (*ExportRequest) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{12}
}

func (x *ExportRequest) GetAppRoot() string {
	if x != nil {
		return x.AppRoot
	}
	return ""
}

func (x *ExportRequest) GetGoos() string {
	if x != nil {
		return x.Goos
	}
	return ""
}

func (x *ExportRequest) GetGoarch() string {
	if x != nil {
		return x.Goarch
	}
	return ""
}

func (x *ExportRequest) GetCgoEnabled() bool {
	if x != nil {
		return x.CgoEnabled
	}
	return false
}

func (x *ExportRequest) GetEnviron() []string {
	if x != nil {
		return x.Environ
	}
	return nil
}

func (x *ExportRequest) GetFormat() isExportRequest_Format {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *ExportRequest) GetDocker() *DockerExportParams {
	if x != nil {
		if x, ok := x.Format.(*ExportRequest_Docker); ok {
			return x.Docker
		}
	}
	return nil
}

func (x *ExportRequest) GetInfraConfPath() string {
	if x != nil {
		return x.InfraConfPath
	}
	return ""
}

func (x *ExportRequest) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ExportRequest) GetGateways() []string {
	if x != nil {
		return x.Gateways
	}
	return nil
}

func (x *ExportRequest) GetSkipInfraConf() bool {
	if x != nil {
		return x.SkipInfraConf
	}
	return false
}

func (x *ExportRequest) GetWorkspaceRoot() string {
	if x != nil {
		return x.WorkspaceRoot
	}
	return ""
}

type isExportRequest_Format interface {
	isExportRequest_Format()
}

type ExportRequest_Docker struct {
	// docker specifies to export the app as a docker image.
	Docker *DockerExportParams `protobuf:"bytes,6,opt,name=docker,proto3,oneof"`
}

func (*ExportRequest_Docker) isExportRequest_Format() {}

type DockerExportParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// local_daemon_tag specifies what to tag the image as
	// in the local Docker daemon. If empty the export does not
	// interact with (or require) the local docker daemon at all.
	LocalDaemonTag string `protobuf:"bytes,1,opt,name=local_daemon_tag,json=localDaemonTag,proto3" json:"local_daemon_tag,omitempty"`
	// push_destination_tag specifies the remote registry tag
	// to push the exported image to. If empty the built image
	// is not pushed anywhere.
	PushDestinationTag string `protobuf:"bytes,2,opt,name=push_destination_tag,json=pushDestinationTag,proto3" json:"push_destination_tag,omitempty"`
	// base_image_tag is the base image to build the image from.
	BaseImageTag  string `protobuf:"bytes,3,opt,name=base_image_tag,json=baseImageTag,proto3" json:"base_image_tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DockerExportParams) Reset() {
	*x = DockerExportParams{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DockerExportParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerExportParams) ProtoMessage() {}

func (x *DockerExportParams) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerExportParams.ProtoReflect.Descriptor instead.
func (*DockerExportParams) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{13}
}

func (x *DockerExportParams) GetLocalDaemonTag() string {
	if x != nil {
		return x.LocalDaemonTag
	}
	return ""
}

func (x *DockerExportParams) GetPushDestinationTag() string {
	if x != nil {
		return x.PushDestinationTag
	}
	return ""
}

func (x *DockerExportParams) GetBaseImageTag() string {
	if x != nil {
		return x.BaseImageTag
	}
	return ""
}

type DBConnectRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	AppRoot     string                 `protobuf:"bytes,1,opt,name=app_root,json=appRoot,proto3" json:"app_root,omitempty"`
	DbName      string                 `protobuf:"bytes,2,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	EnvName     string                 `protobuf:"bytes,3,opt,name=env_name,json=envName,proto3" json:"env_name,omitempty"` // optional
	ClusterType DBClusterType          `protobuf:"varint,4,opt,name=cluster_type,json=clusterType,proto3,enum=encore.daemon.DBClusterType" json:"cluster_type,omitempty"`
	// namespace is the infrastructure namespace to use.
	// If empty the active namespace is used.
	Namespace     *string `protobuf:"bytes,5,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
	Role          DBRole  `protobuf:"varint,6,opt,name=role,proto3,enum=encore.daemon.DBRole" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DBConnectRequest) Reset() {
	*x = DBConnectRequest{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBConnectRequest) ProtoMessage() {}

func (x *DBConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBConnectRequest.ProtoReflect.Descriptor instead.
func (*DBConnectRequest) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{14}
}

func (x *DBConnectRequest) GetAppRoot() string {
	if x != nil {
		return x.AppRoot
	}
	return ""
}

func (x *DBConnectRequest) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *DBConnectRequest) GetEnvName() string {
	if x != nil {
		return x.EnvName
	}
	return ""
}

func (x *DBConnectRequest) GetClusterType() DBClusterType {
	if x != nil {
		return x.ClusterType
	}
	return DBClusterType_DB_CLUSTER_TYPE_UNSPECIFIED
}

func (x *DBConnectRequest) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *DBConnectRequest) GetRole() DBRole {
	if x != nil {
		return x.Role
	}
	return DBRole_DB_ROLE_UNSPECIFIED
}

type DBConnectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dsn           string                 `protobuf:"bytes,1,opt,name=dsn,proto3" json:"dsn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DBConnectResponse) Reset() {
	*x = DBConnectResponse{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBConnectResponse) ProtoMessage() {}

func (x *DBConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBConnectResponse.ProtoReflect.Descriptor instead.
func (*DBConnectResponse) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{15}
}

func (x *DBConnectResponse) GetDsn() string {
	if x != nil {
		return x.Dsn
	}
	return ""
}

type DBProxyRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	AppRoot     string                 `protobuf:"bytes,1,opt,name=app_root,json=appRoot,proto3" json:"app_root,omitempty"`
	EnvName     string                 `protobuf:"bytes,2,opt,name=env_name,json=envName,proto3" json:"env_name,omitempty"` // optional
	Port        int32                  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`                     // optional
	ClusterType DBClusterType          `protobuf:"varint,4,opt,name=cluster_type,json=clusterType,proto3,enum=encore.daemon.DBClusterType" json:"cluster_type,omitempty"`
	// namespace is the infrastructure namespace to use.
	// If empty the active namespace is used.
	Namespace     *string `protobuf:"bytes,5,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
	Role          DBRole  `protobuf:"varint,6,opt,name=role,proto3,enum=encore.daemon.DBRole" json:"role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DBProxyRequest) Reset() {
	*x = DBProxyRequest{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBProxyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBProxyRequest) ProtoMessage() {}

func (x *DBProxyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBProxyRequest.ProtoReflect.Descriptor instead.
func (*DBProxyRequest) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{16}
}

func (x *DBProxyRequest) GetAppRoot() string {
	if x != nil {
		return x.AppRoot
	}
	return ""
}

func (x *DBProxyRequest) GetEnvName() string {
	if x != nil {
		return x.EnvName
	}
	return ""
}

func (x *DBProxyRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DBProxyRequest) GetClusterType() DBClusterType {
	if x != nil {
		return x.ClusterType
	}
	return DBClusterType_DB_CLUSTER_TYPE_UNSPECIFIED
}

func (x *DBProxyRequest) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *DBProxyRequest) GetRole() DBRole {
	if x != nil {
		return x.Role
	}
	return DBRole_DB_ROLE_UNSPECIFIED
}

type DBResetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppRoot       string                 `protobuf:"bytes,1,opt,name=app_root,json=appRoot,proto3" json:"app_root,omitempty"`
	DatabaseNames []string               `protobuf:"bytes,2,rep,name=database_names,json=databaseNames,proto3" json:"database_names,omitempty"` // database names to reset
	ClusterType   DBClusterType          `protobuf:"varint,3,opt,name=cluster_type,json=clusterType,proto3,enum=encore.daemon.DBClusterType" json:"cluster_type,omitempty"`
	// namespace is the infrastructure namespace to use.
	// If empty the active namespace is used.
	Namespace     *string `protobuf:"bytes,4,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DBResetRequest) Reset() {
	*x = DBResetRequest{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBResetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBResetRequest) ProtoMessage() {}

func (x *DBResetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBResetRequest.ProtoReflect.Descriptor instead.
func (*DBResetRequest) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{17}
}

func (x *DBResetRequest) GetAppRoot() string {
	if x != nil {
		return x.AppRoot
	}
	return ""
}

func (x *DBResetRequest) GetDatabaseNames() []string {
	if x != nil {
		return x.DatabaseNames
	}
	return nil
}

func (x *DBResetRequest) GetClusterType() DBClusterType {
	if x != nil {
		return x.ClusterType
	}
	return DBClusterType_DB_CLUSTER_TYPE_UNSPECIFIED
}

func (x *DBResetRequest) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

type GenClientRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	AppId    string                 `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	EnvName  string                 `protobuf:"bytes,2,opt,name=env_name,json=envName,proto3" json:"env_name,omitempty"`
	Lang     string                 `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`
	Filepath string                 `protobuf:"bytes,4,opt,name=filepath,proto3" json:"filepath,omitempty"`
	// Services to include in the output.
	// If the string "*" is present all services are included.
	Services []string `protobuf:"bytes,5,rep,name=services,proto3" json:"services,omitempty"`
	// Services to exclude from the output.
	// Takes precedence over 'services' above.
	ExcludedServices []string `protobuf:"bytes,6,rep,name=excluded_services,json=excludedServices,proto3" json:"excluded_services,omitempty"`
	// Tags of endpoints to include in the output.
	// Only includes endpoints from services included in 'services' above.
	EndpointTags []string `protobuf:"bytes,7,rep,name=endpoint_tags,json=endpointTags,proto3" json:"endpoint_tags,omitempty"`
	// Tags of endpoints to exclude from the output.
	// Takes precedence over 'endpoint_tags' above.
	ExcludedEndpointTags []string `protobuf:"bytes,8,rep,name=excluded_endpoint_tags,json=excludedEndpointTags,proto3" json:"excluded_endpoint_tags,omitempty"`
	// The OpenAPI spec generator by default includes private endpoints.
	// If this is set to `true`, private endpoints will not be included
	// in the generated OpenAPI spec.
	OpenapiExcludePrivateEndpoints *bool `protobuf:"varint,9,opt,name=openapi_exclude_private_endpoints,json=openapiExcludePrivateEndpoints,proto3,oneof" json:"openapi_exclude_private_endpoints,omitempty"`
	// The TS generator by default re-declares the api types in the client.
	// If this is set to `true`, the types will be imported and shared between
	// the client and the server. It assumes "~backend" is available in the
	// import path.
	TsSharedTypes *bool `protobuf:"varint,10,opt,name=ts_shared_types,json=tsSharedTypes,proto3,oneof" json:"ts_shared_types,omitempty"`
	// If set, the default export of the generate TypeScript client will be
	// an instantiated client with the given target. The target can be e.g.
	// a variable, e.g. "import.meta.env.VITE_CLIENT_TARGET" or a string literal.
	TsClientTarget *string `protobuf:"bytes,11,opt,name=ts_client_target,json=tsClientTarget,proto3,oneof" json:"ts_client_target,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GenClientRequest) Reset() {
	*x = GenClientRequest{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenClientRequest) ProtoMessage() {}

func (x *GenClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenClientRequest.ProtoReflect.Descriptor instead.
func (*GenClientRequest) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{18}
}

func (x *GenClientRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *GenClientRequest) GetEnvName() string {
	if x != nil {
		return x.EnvName
	}
	return ""
}

func (x *GenClientRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *GenClientRequest) GetFilepath() string {
	if x != nil {
		return x.Filepath
	}
	return ""
}

func (x *GenClientRequest) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *GenClientRequest) GetExcludedServices() []string {
	if x != nil {
		return x.ExcludedServices
	}
	return nil
}

func (x *GenClientRequest) GetEndpointTags() []string {
	if x != nil {
		return x.EndpointTags
	}
	return nil
}

func (x *GenClientRequest) GetExcludedEndpointTags() []string {
	if x != nil {
		return x.ExcludedEndpointTags
	}
	return nil
}

func (x *GenClientRequest) GetOpenapiExcludePrivateEndpoints() bool {
	if x != nil && x.OpenapiExcludePrivateEndpoints != nil {
		return *x.OpenapiExcludePrivateEndpoints
	}
	return false
}

func (x *GenClientRequest) GetTsSharedTypes() bool {
	if x != nil && x.TsSharedTypes != nil {
		return *x.TsSharedTypes
	}
	return false
}

func (x *GenClientRequest) GetTsClientTarget() string {
	if x != nil && x.TsClientTarget != nil {
		return *x.TsClientTarget
	}
	return ""
}

type GenClientResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          []byte                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenClientResponse) Reset() {
	*x = GenClientResponse{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenClientResponse) ProtoMessage() {}

func (x *GenClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenClientResponse.ProtoReflect.Descriptor instead.
func (*GenClientResponse) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{19}
}

func (x *GenClientResponse) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type GenWrappersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppRoot       string                 `protobuf:"bytes,1,opt,name=app_root,json=appRoot,proto3" json:"app_root,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenWrappersRequest) Reset() {
	*x = GenWrappersRequest{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenWrappersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenWrappersRequest) ProtoMessage() {}

func (x *GenWrappersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenWrappersRequest.ProtoReflect.Descriptor instead.
func (*GenWrappersRequest) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{20}
}

func (x *GenWrappersRequest) GetAppRoot() string {
	if x != nil {
		return x.AppRoot
	}
	return ""
}

type GenWrappersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenWrappersResponse) Reset() {
	*x = GenWrappersResponse{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenWrappersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenWrappersResponse) ProtoMessage() {}

func (x *GenWrappersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenWrappersResponse.ProtoReflect.Descriptor instead.
func (*GenWrappersResponse) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{21}
}

type SecretsRefreshRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppRoot       string                 `protobuf:"bytes,1,opt,name=app_root,json=appRoot,proto3" json:"app_root,omitempty"`
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SecretsRefreshRequest) Reset() {
	*x = SecretsRefreshRequest{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretsRefreshRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretsRefreshRequest) ProtoMessage() {}

func (x *SecretsRefreshRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretsRefreshRequest.ProtoReflect.Descriptor instead.
func (*SecretsRefreshRequest) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{22}
}

func (x *SecretsRefreshRequest) GetAppRoot() string {
	if x != nil {
		return x.AppRoot
	}
	return ""
}

func (x *SecretsRefreshRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SecretsRefreshRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SecretsRefreshResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SecretsRefreshResponse) Reset() {
	*x = SecretsRefreshResponse{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretsRefreshResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretsRefreshResponse) ProtoMessage() {}

func (x *SecretsRefreshResponse) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretsRefreshResponse.ProtoReflect.Descriptor instead.
func (*SecretsRefreshResponse) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{23}
}

type VersionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	ConfigHash    string                 `protobuf:"bytes,2,opt,name=config_hash,json=configHash,proto3" json:"config_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{24}
}

func (x *VersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VersionResponse) GetConfigHash() string {
	if x != nil {
		return x.ConfigHash
	}
	return ""
}

type Namespace struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Active        bool                   `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastActiveAt  *string                `protobuf:"bytes,5,opt,name=last_active_at,json=lastActiveAt,proto3,oneof" json:"last_active_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Namespace) Reset() {
	*x = Namespace{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace) ProtoMessage() {}

func (x *Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace.ProtoReflect.Descriptor instead.
func (*Namespace) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{25}
}

func (x *Namespace) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Namespace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Namespace) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Namespace) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Namespace) GetLastActiveAt() string {
	if x != nil && x.LastActiveAt != nil {
		return *x.LastActiveAt
	}
	return ""
}

type CreateNamespaceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppRoot       string                 `protobuf:"bytes,1,opt,name=app_root,json=appRoot,proto3" json:"app_root,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateNamespaceRequest) Reset() {
	*x = CreateNamespaceRequest{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceRequest) ProtoMessage() {}

func (x *CreateNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceRequest.ProtoReflect.Descriptor instead.
func (*CreateNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{26}
}

func (x *CreateNamespaceRequest) GetAppRoot() string {
	if x != nil {
		return x.AppRoot
	}
	return ""
}

func (x *CreateNamespaceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SwitchNamespaceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppRoot       string                 `protobuf:"bytes,1,opt,name=app_root,json=appRoot,proto3" json:"app_root,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Create        bool                   `protobuf:"varint,3,opt,name=create,proto3" json:"create,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwitchNamespaceRequest) Reset() {
	*x = SwitchNamespaceRequest{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchNamespaceRequest) ProtoMessage() {}

func (x *SwitchNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchNamespaceRequest.ProtoReflect.Descriptor instead.
func (*SwitchNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{27}
}

func (x *SwitchNamespaceRequest) GetAppRoot() string {
	if x != nil {
		return x.AppRoot
	}
	return ""
}

func (x *SwitchNamespaceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SwitchNamespaceRequest) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

type ListNamespacesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppRoot       string                 `protobuf:"bytes,1,opt,name=app_root,json=appRoot,proto3" json:"app_root,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNamespacesRequest) Reset() {
	*x = ListNamespacesRequest{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNamespacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespacesRequest) ProtoMessage() {}

func (x *ListNamespacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespacesRequest.ProtoReflect.Descriptor instead.
func (*ListNamespacesRequest) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{28}
}

func (x *ListNamespacesRequest) GetAppRoot() string {
	if x != nil {
		return x.AppRoot
	}
	return ""
}

type DeleteNamespaceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppRoot       string                 `protobuf:"bytes,1,opt,name=app_root,json=appRoot,proto3" json:"app_root,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteNamespaceRequest) Reset() {
	*x = DeleteNamespaceRequest{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNamespaceRequest) ProtoMessage() {}

func (x *DeleteNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNamespaceRequest.ProtoReflect.Descriptor instead.
func (*DeleteNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteNamespaceRequest) GetAppRoot() string {
	if x != nil {
		return x.AppRoot
	}
	return ""
}

func (x *DeleteNamespaceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListNamespacesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespaces    []*Namespace           `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNamespacesResponse) Reset() {
	*x = ListNamespacesResponse{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNamespacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespacesResponse) ProtoMessage() {}

func (x *ListNamespacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespacesResponse.ProtoReflect.Descriptor instead.
func (*ListNamespacesResponse) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{30}
}

func (x *ListNamespacesResponse) GetNamespaces() []*Namespace {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

type TelemetryConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AnonId        string                 `protobuf:"bytes,1,opt,name=anon_id,json=anonId,proto3" json:"anon_id,omitempty"`
	Enabled       bool                   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Debug         bool                   `protobuf:"varint,3,opt,name=debug,proto3" json:"debug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetryConfig) Reset() {
	*x = TelemetryConfig{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryConfig) ProtoMessage() {}

func (x *TelemetryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryConfig.ProtoReflect.Descriptor instead.
func (*TelemetryConfig) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{31}
}

func (x *TelemetryConfig) GetAnonId() string {
	if x != nil {
		return x.AnonId
	}
	return ""
}

func (x *TelemetryConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TelemetryConfig) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

type DumpMetaRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	AppRoot    string                 `protobuf:"bytes,1,opt,name=app_root,json=appRoot,proto3" json:"app_root,omitempty"`
	WorkingDir string                 `protobuf:"bytes,2,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"` // for error reporting
	// environ is the environment to set for the running command.
	// Each entry is a string in the format "KEY=VALUE", identical to os.Environ().
	Environ []string `protobuf:"bytes,3,rep,name=environ,proto3" json:"environ,omitempty"`
	// Whether or not to parse tests.
	ParseTests    bool                   `protobuf:"varint,4,opt,name=parse_tests,json=parseTests,proto3" json:"parse_tests,omitempty"`
	Format        DumpMetaRequest_Format `protobuf:"varint,5,opt,name=format,proto3,enum=encore.daemon.DumpMetaRequest_Format" json:"format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DumpMetaRequest) Reset() {
	*x = DumpMetaRequest{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DumpMetaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpMetaRequest) ProtoMessage() {}

func (x *DumpMetaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpMetaRequest.ProtoReflect.Descriptor instead.
func (*DumpMetaRequest) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{32}
}

func (x *DumpMetaRequest) GetAppRoot() string {
	if x != nil {
		return x.AppRoot
	}
	return ""
}

func (x *DumpMetaRequest) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *DumpMetaRequest) GetEnviron() []string {
	if x != nil {
		return x.Environ
	}
	return nil
}

func (x *DumpMetaRequest) GetParseTests() bool {
	if x != nil {
		return x.ParseTests
	}
	return false
}

func (x *DumpMetaRequest) GetFormat() DumpMetaRequest_Format {
	if x != nil {
		return x.Format
	}
	return DumpMetaRequest_FORMAT_UNSPECIFIED
}

type DumpMetaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Meta          []byte                 `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DumpMetaResponse) Reset() {
	*x = DumpMetaResponse{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DumpMetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpMetaResponse) ProtoMessage() {}

func (x *DumpMetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpMetaResponse.ProtoReflect.Descriptor instead.
func (*DumpMetaResponse) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{33}
}

func (x *DumpMetaResponse) GetMeta() []byte {
	if x != nil {
		return x.Meta
	}
	return nil
}

// The following messages are used for sqlc plugin integration.
type SQLCPlugin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SQLCPlugin) Reset() {
	*x = SQLCPlugin{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLCPlugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLCPlugin) ProtoMessage() {}

func (x *SQLCPlugin) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLCPlugin.ProtoReflect.Descriptor instead.
func (*SQLCPlugin) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{34}
}

type SQLCPlugin_File struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Contents      []byte                 `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SQLCPlugin_File) Reset() {
	*x = SQLCPlugin_File{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLCPlugin_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLCPlugin_File) ProtoMessage() {}

func (x *SQLCPlugin_File) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLCPlugin_File.ProtoReflect.Descriptor instead.
func (*SQLCPlugin_File) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{34, 0}
}

func (x *SQLCPlugin_File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SQLCPlugin_File) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

type SQLCPlugin_Settings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Engine        string                 `protobuf:"bytes,2,opt,name=engine,proto3" json:"engine,omitempty"`
	Schema        []string               `protobuf:"bytes,3,rep,name=schema,proto3" json:"schema,omitempty"`
	Queries       []string               `protobuf:"bytes,4,rep,name=queries,proto3" json:"queries,omitempty"`
	Codegen       *SQLCPlugin_Codegen    `protobuf:"bytes,12,opt,name=codegen,proto3" json:"codegen,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SQLCPlugin_Settings) Reset() {
	*x = SQLCPlugin_Settings{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLCPlugin_Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLCPlugin_Settings) ProtoMessage() {}

func (x *SQLCPlugin_Settings) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLCPlugin_Settings.ProtoReflect.Descriptor instead.
func (*SQLCPlugin_Settings) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{34, 1}
}

func (x *SQLCPlugin_Settings) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SQLCPlugin_Settings) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *SQLCPlugin_Settings) GetSchema() []string {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *SQLCPlugin_Settings) GetQueries() []string {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *SQLCPlugin_Settings) GetCodegen() *SQLCPlugin_Codegen {
	if x != nil {
		return x.Codegen
	}
	return nil
}

type SQLCPlugin_Codegen struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Out           string                      `protobuf:"bytes,1,opt,name=out,proto3" json:"out,omitempty"`
	Plugin        string                      `protobuf:"bytes,2,opt,name=plugin,proto3" json:"plugin,omitempty"`
	Options       []byte                      `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	Env           []string                    `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty"`
	Process       *SQLCPlugin_Codegen_Process `protobuf:"bytes,5,opt,name=process,proto3" json:"process,omitempty"`
	Wasm          *SQLCPlugin_Codegen_WASM    `protobuf:"bytes,6,opt,name=wasm,proto3" json:"wasm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SQLCPlugin_Codegen) Reset() {
	*x = SQLCPlugin_Codegen{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLCPlugin_Codegen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLCPlugin_Codegen) ProtoMessage() {}

func (x *SQLCPlugin_Codegen) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLCPlugin_Codegen.ProtoReflect.Descriptor instead.
func (*SQLCPlugin_Codegen) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{34, 2}
}

func (x *SQLCPlugin_Codegen) GetOut() string {
	if x != nil {
		return x.Out
	}
	return ""
}

func (x *SQLCPlugin_Codegen) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

func (x *SQLCPlugin_Codegen) GetOptions() []byte {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *SQLCPlugin_Codegen) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *SQLCPlugin_Codegen) GetProcess() *SQLCPlugin_Codegen_Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *SQLCPlugin_Codegen) GetWasm() *SQLCPlugin_Codegen_WASM {
	if x != nil {
		return x.Wasm
	}
	return nil
}

type SQLCPlugin_Catalog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Comment       string                 `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
	DefaultSchema string                 `protobuf:"bytes,2,opt,name=default_schema,json=defaultSchema,proto3" json:"default_schema,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Schemas       []*SQLCPlugin_Schema   `protobuf:"bytes,4,rep,name=schemas,proto3" json:"schemas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SQLCPlugin_Catalog) Reset() {
	*x = SQLCPlugin_Catalog{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLCPlugin_Catalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLCPlugin_Catalog) ProtoMessage() {}

func (x *SQLCPlugin_Catalog) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLCPlugin_Catalog.ProtoReflect.Descriptor instead.
func (*SQLCPlugin_Catalog) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{34, 3}
}

func (x *SQLCPlugin_Catalog) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SQLCPlugin_Catalog) GetDefaultSchema() string {
	if x != nil {
		return x.DefaultSchema
	}
	return ""
}

func (x *SQLCPlugin_Catalog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SQLCPlugin_Catalog) GetSchemas() []*SQLCPlugin_Schema {
	if x != nil {
		return x.Schemas
	}
	return nil
}

type SQLCPlugin_Schema struct {
	state          protoimpl.MessageState      `protogen:"open.v1"`
	Comment        string                      `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
	Name           string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tables         []*SQLCPlugin_Table         `protobuf:"bytes,3,rep,name=tables,proto3" json:"tables,omitempty"`
	Enums          []*SQLCPlugin_Enum          `protobuf:"bytes,4,rep,name=enums,proto3" json:"enums,omitempty"`
	CompositeTypes []*SQLCPlugin_CompositeType `protobuf:"bytes,5,rep,name=composite_types,json=compositeTypes,proto3" json:"composite_types,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SQLCPlugin_Schema) Reset() {
	*x = SQLCPlugin_Schema{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLCPlugin_Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLCPlugin_Schema) ProtoMessage() {}

func (x *SQLCPlugin_Schema) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLCPlugin_Schema.ProtoReflect.Descriptor instead.
func (*SQLCPlugin_Schema) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{34, 4}
}

func (x *SQLCPlugin_Schema) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SQLCPlugin_Schema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SQLCPlugin_Schema) GetTables() []*SQLCPlugin_Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *SQLCPlugin_Schema) GetEnums() []*SQLCPlugin_Enum {
	if x != nil {
		return x.Enums
	}
	return nil
}

func (x *SQLCPlugin_Schema) GetCompositeTypes() []*SQLCPlugin_CompositeType {
	if x != nil {
		return x.CompositeTypes
	}
	return nil
}

type SQLCPlugin_CompositeType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Comment       string                 `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SQLCPlugin_CompositeType) Reset() {
	*x = SQLCPlugin_CompositeType{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLCPlugin_CompositeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLCPlugin_CompositeType) ProtoMessage() {}

func (x *SQLCPlugin_CompositeType) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLCPlugin_CompositeType.ProtoReflect.Descriptor instead.
func (*SQLCPlugin_CompositeType) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{34, 5}
}

func (x *SQLCPlugin_CompositeType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SQLCPlugin_CompositeType) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type SQLCPlugin_Enum struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Vals          []string               `protobuf:"bytes,2,rep,name=vals,proto3" json:"vals,omitempty"`
	Comment       string                 `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SQLCPlugin_Enum) Reset() {
	*x = SQLCPlugin_Enum{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLCPlugin_Enum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLCPlugin_Enum) ProtoMessage() {}

func (x *SQLCPlugin_Enum) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLCPlugin_Enum.ProtoReflect.Descriptor instead.
func (*SQLCPlugin_Enum) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{34, 6}
}

func (x *SQLCPlugin_Enum) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SQLCPlugin_Enum) GetVals() []string {
	if x != nil {
		return x.Vals
	}
	return nil
}

func (x *SQLCPlugin_Enum) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type SQLCPlugin_Table struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rel           *SQLCPlugin_Identifier `protobuf:"bytes,1,opt,name=rel,proto3" json:"rel,omitempty"`
	Columns       []*SQLCPlugin_Column   `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	Comment       string                 `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SQLCPlugin_Table) Reset() {
	*x = SQLCPlugin_Table{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLCPlugin_Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLCPlugin_Table) ProtoMessage() {}

func (x *SQLCPlugin_Table) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLCPlugin_Table.ProtoReflect.Descriptor instead.
func (*SQLCPlugin_Table) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{34, 7}
}

func (x *SQLCPlugin_Table) GetRel() *SQLCPlugin_Identifier {
	if x != nil {
		return x.Rel
	}
	return nil
}

func (x *SQLCPlugin_Table) GetColumns() []*SQLCPlugin_Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *SQLCPlugin_Table) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type SQLCPlugin_Identifier struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Catalog       string                 `protobuf:"bytes,1,opt,name=catalog,proto3" json:"catalog,omitempty"`
	Schema        string                 `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SQLCPlugin_Identifier) Reset() {
	*x = SQLCPlugin_Identifier{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLCPlugin_Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLCPlugin_Identifier) ProtoMessage() {}

func (x *SQLCPlugin_Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLCPlugin_Identifier.ProtoReflect.Descriptor instead.
func (*SQLCPlugin_Identifier) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{34, 8}
}

func (x *SQLCPlugin_Identifier) GetCatalog() string {
	if x != nil {
		return x.Catalog
	}
	return ""
}

func (x *SQLCPlugin_Identifier) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *SQLCPlugin_Identifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SQLCPlugin_Column struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Name         string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NotNull      bool                   `protobuf:"varint,3,opt,name=not_null,json=notNull,proto3" json:"not_null,omitempty"`
	IsArray      bool                   `protobuf:"varint,4,opt,name=is_array,json=isArray,proto3" json:"is_array,omitempty"`
	Comment      string                 `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	Length       int32                  `protobuf:"varint,6,opt,name=length,proto3" json:"length,omitempty"`
	IsNamedParam bool                   `protobuf:"varint,7,opt,name=is_named_param,json=isNamedParam,proto3" json:"is_named_param,omitempty"`
	IsFuncCall   bool                   `protobuf:"varint,8,opt,name=is_func_call,json=isFuncCall,proto3" json:"is_func_call,omitempty"`
	// XXX: Figure out what PostgreSQL calls `foo.id`
	Scope         string                 `protobuf:"bytes,9,opt,name=scope,proto3" json:"scope,omitempty"`
	Table         *SQLCPlugin_Identifier `protobuf:"bytes,10,opt,name=table,proto3" json:"table,omitempty"`
	TableAlias    string                 `protobuf:"bytes,11,opt,name=table_alias,json=tableAlias,proto3" json:"table_alias,omitempty"`
	Type          *SQLCPlugin_Identifier `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`
	IsSqlcSlice   bool                   `protobuf:"varint,13,opt,name=is_sqlc_slice,json=isSqlcSlice,proto3" json:"is_sqlc_slice,omitempty"`
	EmbedTable    *SQLCPlugin_Identifier `protobuf:"bytes,14,opt,name=embed_table,json=embedTable,proto3" json:"embed_table,omitempty"`
	OriginalName  string                 `protobuf:"bytes,15,opt,name=original_name,json=originalName,proto3" json:"original_name,omitempty"`
	Unsigned      bool                   `protobuf:"varint,16,opt,name=unsigned,proto3" json:"unsigned,omitempty"`
	ArrayDims     int32                  `protobuf:"varint,17,opt,name=array_dims,json=arrayDims,proto3" json:"array_dims,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SQLCPlugin_Column) Reset() {
	*x = SQLCPlugin_Column{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLCPlugin_Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLCPlugin_Column) ProtoMessage() {}

func (x *SQLCPlugin_Column) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLCPlugin_Column.ProtoReflect.Descriptor instead.
func (*SQLCPlugin_Column) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{34, 9}
}

func (x *SQLCPlugin_Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SQLCPlugin_Column) GetNotNull() bool {
	if x != nil {
		return x.NotNull
	}
	return false
}

func (x *SQLCPlugin_Column) GetIsArray() bool {
	if x != nil {
		return x.IsArray
	}
	return false
}

func (x *SQLCPlugin_Column) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SQLCPlugin_Column) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *SQLCPlugin_Column) GetIsNamedParam() bool {
	if x != nil {
		return x.IsNamedParam
	}
	return false
}

func (x *SQLCPlugin_Column) GetIsFuncCall() bool {
	if x != nil {
		return x.IsFuncCall
	}
	return false
}

func (x *SQLCPlugin_Column) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *SQLCPlugin_Column) GetTable() *SQLCPlugin_Identifier {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *SQLCPlugin_Column) GetTableAlias() string {
	if x != nil {
		return x.TableAlias
	}
	return ""
}

func (x *SQLCPlugin_Column) GetType() *SQLCPlugin_Identifier {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SQLCPlugin_Column) GetIsSqlcSlice() bool {
	if x != nil {
		return x.IsSqlcSlice
	}
	return false
}

func (x *SQLCPlugin_Column) GetEmbedTable() *SQLCPlugin_Identifier {
	if x != nil {
		return x.EmbedTable
	}
	return nil
}

func (x *SQLCPlugin_Column) GetOriginalName() string {
	if x != nil {
		return x.OriginalName
	}
	return ""
}

func (x *SQLCPlugin_Column) GetUnsigned() bool {
	if x != nil {
		return x.Unsigned
	}
	return false
}

func (x *SQLCPlugin_Column) GetArrayDims() int32 {
	if x != nil {
		return x.ArrayDims
	}
	return 0
}

type SQLCPlugin_Query struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	Text            string                  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Name            string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Cmd             string                  `protobuf:"bytes,3,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Columns         []*SQLCPlugin_Column    `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
	Params          []*SQLCPlugin_Parameter `protobuf:"bytes,5,rep,name=params,json=parameters,proto3" json:"params,omitempty"`
	Comments        []string                `protobuf:"bytes,6,rep,name=comments,proto3" json:"comments,omitempty"`
	Filename        string                  `protobuf:"bytes,7,opt,name=filename,proto3" json:"filename,omitempty"`
	InsertIntoTable *SQLCPlugin_Identifier  `protobuf:"bytes,8,opt,name=insert_into_table,proto3" json:"insert_into_table,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SQLCPlugin_Query) Reset() {
	*x = SQLCPlugin_Query{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLCPlugin_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLCPlugin_Query) ProtoMessage() {}

func (x *SQLCPlugin_Query) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLCPlugin_Query.ProtoReflect.Descriptor instead.
func (*SQLCPlugin_Query) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{34, 10}
}

func (x *SQLCPlugin_Query) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SQLCPlugin_Query) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SQLCPlugin_Query) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *SQLCPlugin_Query) GetColumns() []*SQLCPlugin_Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *SQLCPlugin_Query) GetParams() []*SQLCPlugin_Parameter {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SQLCPlugin_Query) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *SQLCPlugin_Query) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *SQLCPlugin_Query) GetInsertIntoTable() *SQLCPlugin_Identifier {
	if x != nil {
		return x.InsertIntoTable
	}
	return nil
}

type SQLCPlugin_Parameter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Number        int32                  `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Column        *SQLCPlugin_Column     `protobuf:"bytes,2,opt,name=column,proto3" json:"column,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SQLCPlugin_Parameter) Reset() {
	*x = SQLCPlugin_Parameter{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLCPlugin_Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLCPlugin_Parameter) ProtoMessage() {}

func (x *SQLCPlugin_Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLCPlugin_Parameter.ProtoReflect.Descriptor instead.
func (*SQLCPlugin_Parameter) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{34, 11}
}

func (x *SQLCPlugin_Parameter) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *SQLCPlugin_Parameter) GetColumn() *SQLCPlugin_Column {
	if x != nil {
		return x.Column
	}
	return nil
}

type SQLCPlugin_GenerateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Settings      *SQLCPlugin_Settings   `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	Catalog       *SQLCPlugin_Catalog    `protobuf:"bytes,2,opt,name=catalog,proto3" json:"catalog,omitempty"`
	Queries       []*SQLCPlugin_Query    `protobuf:"bytes,3,rep,name=queries,proto3" json:"queries,omitempty"`
	SqlcVersion   string                 `protobuf:"bytes,4,opt,name=sqlc_version,proto3" json:"sqlc_version,omitempty"`
	PluginOptions []byte                 `protobuf:"bytes,5,opt,name=plugin_options,proto3" json:"plugin_options,omitempty"`
	GlobalOptions []byte                 `protobuf:"bytes,6,opt,name=global_options,proto3" json:"global_options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SQLCPlugin_GenerateRequest) Reset() {
	*x = SQLCPlugin_GenerateRequest{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLCPlugin_GenerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLCPlugin_GenerateRequest) ProtoMessage() {}

func (x *SQLCPlugin_GenerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLCPlugin_GenerateRequest.ProtoReflect.Descriptor instead.
func (*SQLCPlugin_GenerateRequest) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{34, 12}
}

func (x *SQLCPlugin_GenerateRequest) GetSettings() *SQLCPlugin_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *SQLCPlugin_GenerateRequest) GetCatalog() *SQLCPlugin_Catalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

func (x *SQLCPlugin_GenerateRequest) GetQueries() []*SQLCPlugin_Query {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *SQLCPlugin_GenerateRequest) GetSqlcVersion() string {
	if x != nil {
		return x.SqlcVersion
	}
	return ""
}

func (x *SQLCPlugin_GenerateRequest) GetPluginOptions() []byte {
	if x != nil {
		return x.PluginOptions
	}
	return nil
}

func (x *SQLCPlugin_GenerateRequest) GetGlobalOptions() []byte {
	if x != nil {
		return x.GlobalOptions
	}
	return nil
}

type SQLCPlugin_GenerateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Files         []*SQLCPlugin_File     `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SQLCPlugin_GenerateResponse) Reset() {
	*x = SQLCPlugin_GenerateResponse{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLCPlugin_GenerateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLCPlugin_GenerateResponse) ProtoMessage() {}

func (x *SQLCPlugin_GenerateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLCPlugin_GenerateResponse.ProtoReflect.Descriptor instead.
func (*SQLCPlugin_GenerateResponse) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{34, 13}
}

func (x *SQLCPlugin_GenerateResponse) GetFiles() []*SQLCPlugin_File {
	if x != nil {
		return x.Files
	}
	return nil
}

type SQLCPlugin_Codegen_Process struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cmd           string                 `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SQLCPlugin_Codegen_Process) Reset() {
	*x = SQLCPlugin_Codegen_Process{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLCPlugin_Codegen_Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLCPlugin_Codegen_Process) ProtoMessage() {}

func (x *SQLCPlugin_Codegen_Process) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLCPlugin_Codegen_Process.ProtoReflect.Descriptor instead.
func (*SQLCPlugin_Codegen_Process) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{34, 2, 0}
}

func (x *SQLCPlugin_Codegen_Process) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

type SQLCPlugin_Codegen_WASM struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Sha256        string                 `protobuf:"bytes,2,opt,name=sha256,proto3" json:"sha256,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SQLCPlugin_Codegen_WASM) Reset() {
	*x = SQLCPlugin_Codegen_WASM{}
	mi := &file_encore_daemon_daemon_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLCPlugin_Codegen_WASM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLCPlugin_Codegen_WASM) ProtoMessage() {}

func (x *SQLCPlugin_Codegen_WASM) ProtoReflect() protoreflect.Message {
	mi := &file_encore_daemon_daemon_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLCPlugin_Codegen_WASM.ProtoReflect.Descriptor instead.
func (*SQLCPlugin_Codegen_WASM) Descriptor() ([]byte, []int) {
	return file_encore_daemon_daemon_proto_rawDescGZIP(), []int{34, 2, 1}
}

func (x *SQLCPlugin_Codegen_WASM) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SQLCPlugin_Codegen_WASM) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

var File_encore_daemon_daemon_proto protoreflect.FileDescriptor

const file_encore_daemon_daemon_proto_rawDesc = "" +
	"\n" +
	"\x1aencore/daemon/daemon.proto\x12\rencore.daemon\x1a\x1bgoogle/protobuf/empty.proto\"\xc0\x01\n" +
	"\x0eCommandMessage\x126\n" +
	"\x06output\x18\x01 \x01(\v2\x1c.encore.daemon.CommandOutputH\x00R\x06output\x120\n" +
	"\x04exit\x18\x02 \x01(\v2\x1a.encore.daemon.CommandExitH\x00R\x04exit\x12=\n" +
	"\x06errors\x18\x03 \x01(\v2#.encore.daemon.CommandDisplayErrorsH\x00R\x06errorsB\x05\n" +
	"\x03msg\"?\n" +
	"\rCommandOutput\x12\x16\n" +
	"\x06stdout\x18\x01 \x01(\fR\x06stdout\x12\x16\n" +
	"\x06stderr\x18\x02 \x01(\fR\x06stderr\"!\n" +
	"\vCommandExit\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\"2\n" +
	"\x14CommandDisplayErrors\x12\x1a\n" +
	"\berrinsrc\x18\x01 \x01(\fR\berrinsrc\"e\n" +
	"\x10CreateAppRequest\x12\x19\n" +
	"\bapp_root\x18\x01 \x01(\tR\aappRoot\x12\x1a\n" +
	"\btemplate\x18\x02 \x01(\tR\btemplate\x12\x1a\n" +
	"\btutorial\x18\x03 \x01(\bR\btutorial\"*\n" +
	"\x11CreateAppResponse\x12\x15\n" +
	"\x06app_id\x18\x01 \x01(\tR\x05appId\"\x8f\x04\n" +
	"\n" +
	"RunRequest\x12\x19\n" +
	"\bapp_root\x18\x01 \x01(\tR\aappRoot\x12\x1f\n" +
	"\vworking_dir\x18\x02 \x01(\tR\n" +
	"workingDir\x12\x14\n" +
	"\x05watch\x18\x05 \x01(\bR\x05watch\x12\x1f\n" +
	"\vlisten_addr\x18\x06 \x01(\tR\n" +
	"listenAddr\x12\x18\n" +
	"\aenviron\x18\a \x03(\tR\aenviron\x12\"\n" +
	"\n" +
	"trace_file\x18\b \x01(\tH\x00R\ttraceFile\x88\x01\x01\x12!\n" +
	"\tnamespace\x18\t \x01(\tH\x01R\tnamespace\x88\x01\x01\x12?\n" +
	"\abrowser\x18\n" +
	" \x01(\x0e2%.encore.daemon.RunRequest.BrowserModeR\abrowser\x12B\n" +
	"\n" +
	"debug_mode\x18\v \x01(\x0e2#.encore.daemon.RunRequest.DebugModeR\tdebugMode\"F\n" +
	"\vBrowserMode\x12\x10\n" +
	"\fBROWSER_AUTO\x10\x00\x12\x11\n" +
	"\rBROWSER_NEVER\x10\x01\x12\x12\n" +
	"\x0eBROWSER_ALWAYS\x10\x02\"C\n" +
	"\tDebugMode\x12\x12\n" +
	"\x0eDEBUG_DISABLED\x10\x00\x12\x11\n" +
	"\rDEBUG_ENABLED\x10\x01\x12\x0f\n" +
	"\vDEBUG_BREAK\x10\x02B\r\n" +
	"\v_trace_fileB\f\n" +
	"\n" +
	"_namespace\"\xd5\x01\n" +
	"\vTestRequest\x12\x19\n" +
	"\bapp_root\x18\x01 \x01(\tR\aappRoot\x12\x1f\n" +
	"\vworking_dir\x18\x02 \x01(\tR\n" +
	"workingDir\x12\x12\n" +
	"\x04args\x18\x03 \x03(\tR\x04args\x12\x18\n" +
	"\aenviron\x18\x04 \x03(\tR\aenviron\x12\"\n" +
	"\n" +
	"trace_file\x18\x06 \x01(\tH\x00R\ttraceFile\x88\x01\x01\x12#\n" +
	"\rcodegen_debug\x18\a \x01(\bR\fcodegenDebugB\r\n" +
	"\v_trace_fileJ\x04\b\x05\x10\x06\"{\n" +
	"\x0fTestSpecRequest\x12\x19\n" +
	"\bapp_root\x18\x01 \x01(\tR\aappRoot\x12\x1f\n" +
	"\vworking_dir\x18\x02 \x01(\tR\n" +
	"workingDir\x12\x12\n" +
	"\x04args\x18\x03 \x03(\tR\x04args\x12\x18\n" +
	"\aenviron\x18\x04 \x03(\tR\aenviron\"Z\n" +
	"\x10TestSpecResponse\x12\x18\n" +
	"\acommand\x18\x01 \x01(\tR\acommand\x12\x12\n" +
	"\x04args\x18\x02 \x03(\tR\x04args\x12\x18\n" +
	"\aenviron\x18\x03 \x03(\tR\aenviron\"\xee\x01\n" +
	"\x11ExecScriptRequest\x12\x19\n" +
	"\bapp_root\x18\x01 \x01(\tR\aappRoot\x12\x1f\n" +
	"\vworking_dir\x18\x02 \x01(\tR\n" +
	"workingDir\x12\x1f\n" +
	"\vscript_args\x18\x04 \x03(\tR\n" +
	"scriptArgs\x12\x18\n" +
	"\aenviron\x18\x05 \x03(\tR\aenviron\x12\"\n" +
	"\n" +
	"trace_file\x18\x06 \x01(\tH\x00R\ttraceFile\x88\x01\x01\x12!\n" +
	"\tnamespace\x18\a \x01(\tH\x01R\tnamespace\x88\x01\x01B\r\n" +
	"\v_trace_fileB\f\n" +
	"\n" +
	"_namespace\"\xaa\x01\n" +
	"\fCheckRequest\x12\x19\n" +
	"\bapp_root\x18\x01 \x01(\tR\aappRoot\x12\x1f\n" +
	"\vworking_dir\x18\x02 \x01(\tR\n" +
	"workingDir\x12#\n" +
	"\rcodegen_debug\x18\x03 \x01(\bR\fcodegenDebug\x12\x1f\n" +
	"\vparse_tests\x18\x04 \x01(\bR\n" +
	"parseTests\x12\x18\n" +
	"\aenviron\x18\x05 \x03(\tR\aenviron\"\x87\x03\n" +
	"\rExportRequest\x12\x19\n" +
	"\bapp_root\x18\x01 \x01(\tR\aappRoot\x12\x12\n" +
	"\x04goos\x18\x02 \x01(\tR\x04goos\x12\x16\n" +
	"\x06goarch\x18\x03 \x01(\tR\x06goarch\x12\x1f\n" +
	"\vcgo_enabled\x18\x04 \x01(\bR\n" +
	"cgoEnabled\x12\x18\n" +
	"\aenviron\x18\x05 \x03(\tR\aenviron\x12;\n" +
	"\x06docker\x18\x06 \x01(\v2!.encore.daemon.DockerExportParamsH\x00R\x06docker\x12&\n" +
	"\x0finfra_conf_path\x18\a \x01(\tR\rinfraConfPath\x12\x1a\n" +
	"\bservices\x18\b \x03(\tR\bservices\x12\x1a\n" +
	"\bgateways\x18\t \x03(\tR\bgateways\x12&\n" +
	"\x0fskip_infra_conf\x18\n" +
	" \x01(\bR\rskipInfraConf\x12%\n" +
	"\x0eworkspace_root\x18\v \x01(\tR\rworkspaceRootB\b\n" +
	"\x06format\"\x96\x01\n" +
	"\x12DockerExportParams\x12(\n" +
	"\x10local_daemon_tag\x18\x01 \x01(\tR\x0elocalDaemonTag\x120\n" +
	"\x14push_destination_tag\x18\x02 \x01(\tR\x12pushDestinationTag\x12$\n" +
	"\x0ebase_image_tag\x18\x03 \x01(\tR\fbaseImageTag\"\xfe\x01\n" +
	"\x10DBConnectRequest\x12\x19\n" +
	"\bapp_root\x18\x01 \x01(\tR\aappRoot\x12\x17\n" +
	"\adb_name\x18\x02 \x01(\tR\x06dbName\x12\x19\n" +
	"\benv_name\x18\x03 \x01(\tR\aenvName\x12?\n" +
	"\fcluster_type\x18\x04 \x01(\x0e2\x1c.encore.daemon.DBClusterTypeR\vclusterType\x12!\n" +
	"\tnamespace\x18\x05 \x01(\tH\x00R\tnamespace\x88\x01\x01\x12)\n" +
	"\x04role\x18\x06 \x01(\x0e2\x15.encore.daemon.DBRoleR\x04roleB\f\n" +
	"\n" +
	"_namespace\"%\n" +
	"\x11DBConnectResponse\x12\x10\n" +
	"\x03dsn\x18\x01 \x01(\tR\x03dsn\"\xf7\x01\n" +
	"\x0eDBProxyRequest\x12\x19\n" +
	"\bapp_root\x18\x01 \x01(\tR\aappRoot\x12\x19\n" +
	"\benv_name\x18\x02 \x01(\tR\aenvName\x12\x12\n" +
	"\x04port\x18\x03 \x01(\x05R\x04port\x12?\n" +
	"\fcluster_type\x18\x04 \x01(\x0e2\x1c.encore.daemon.DBClusterTypeR\vclusterType\x12!\n" +
	"\tnamespace\x18\x05 \x01(\tH\x00R\tnamespace\x88\x01\x01\x12)\n" +
	"\x04role\x18\x06 \x01(\x0e2\x15.encore.daemon.DBRoleR\x04roleB\f\n" +
	"\n" +
	"_namespace\"\xc4\x01\n" +
	"\x0eDBResetRequest\x12\x19\n" +
	"\bapp_root\x18\x01 \x01(\tR\aappRoot\x12%\n" +
	"\x0edatabase_names\x18\x02 \x03(\tR\rdatabaseNames\x12?\n" +
	"\fcluster_type\x18\x03 \x01(\x0e2\x1c.encore.daemon.DBClusterTypeR\vclusterType\x12!\n" +
	"\tnamespace\x18\x04 \x01(\tH\x00R\tnamespace\x88\x01\x01B\f\n" +
	"\n" +
	"_namespace\"\x93\x04\n" +
	"\x10GenClientRequest\x12\x15\n" +
	"\x06app_id\x18\x01 \x01(\tR\x05appId\x12\x19\n" +
	"\benv_name\x18\x02 \x01(\tR\aenvName\x12\x12\n" +
	"\x04lang\x18\x03 \x01(\tR\x04lang\x12\x1a\n" +
	"\bfilepath\x18\x04 \x01(\tR\bfilepath\x12\x1a\n" +
	"\bservices\x18\x05 \x03(\tR\bservices\x12+\n" +
	"\x11excluded_services\x18\x06 \x03(\tR\x10excludedServices\x12#\n" +
	"\rendpoint_tags\x18\a \x03(\tR\fendpointTags\x124\n" +
	"\x16excluded_endpoint_tags\x18\b \x03(\tR\x14excludedEndpointTags\x12N\n" +
	"!openapi_exclude_private_endpoints\x18\t \x01(\bH\x00R\x1eopenapiExcludePrivateEndpoints\x88\x01\x01\x12+\n" +
	"\x0fts_shared_types\x18\n" +
	" \x01(\bH\x01R\rtsSharedTypes\x88\x01\x01\x12-\n" +
	"\x10ts_client_target\x18\v \x01(\tH\x02R\x0etsClientTarget\x88\x01\x01B$\n" +
	"\"_openapi_exclude_private_endpointsB\x12\n" +
	"\x10_ts_shared_typesB\x13\n" +
	"\x11_ts_client_target\"'\n" +
	"\x11GenClientResponse\x12\x12\n" +
	"\x04code\x18\x01 \x01(\fR\x04code\"/\n" +
	"\x12GenWrappersRequest\x12\x19\n" +
	"\bapp_root\x18\x01 \x01(\tR\aappRoot\"\x15\n" +
	"\x13GenWrappersResponse\"Z\n" +
	"\x15SecretsRefreshRequest\x12\x19\n" +
	"\bapp_root\x18\x01 \x01(\tR\aappRoot\x12\x10\n" +
	"\x03key\x18\x02 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\"\x18\n" +
	"\x16SecretsRefreshResponse\"L\n" +
	"\x0fVersionResponse\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12\x1f\n" +
	"\vconfig_hash\x18\x02 \x01(\tR\n" +
	"configHash\"\xa4\x01\n" +
	"\tNamespace\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x16\n" +
	"\x06active\x18\x03 \x01(\bR\x06active\x12\x1d\n" +
	"\n" +
	"created_at\x18\x04 \x01(\tR\tcreatedAt\x12)\n" +
	"\x0elast_active_at\x18\x05 \x01(\tH\x00R\flastActiveAt\x88\x01\x01B\x11\n" +
	"\x0f_last_active_at\"G\n" +
	"\x16CreateNamespaceRequest\x12\x19\n" +
	"\bapp_root\x18\x01 \x01(\tR\aappRoot\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"_\n" +
	"\x16SwitchNamespaceRequest\x12\x19\n" +
	"\bapp_root\x18\x01 \x01(\tR\aappRoot\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x16\n" +
	"\x06create\x18\x03 \x01(\bR\x06create\"2\n" +
	"\x15ListNamespacesRequest\x12\x19\n" +
	"\bapp_root\x18\x01 \x01(\tR\aappRoot\"G\n" +
	"\x16DeleteNamespaceRequest\x12\x19\n" +
	"\bapp_root\x18\x01 \x01(\tR\aappRoot\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"R\n" +
	"\x16ListNamespacesResponse\x128\n" +
	"\n" +
	"namespaces\x18\x01 \x03(\v2\x18.encore.daemon.NamespaceR\n" +
	"namespaces\"Z\n" +
	"\x0fTelemetryConfig\x12\x17\n" +
	"\aanon_id\x18\x01 \x01(\tR\x06anonId\x12\x18\n" +
	"\aenabled\x18\x02 \x01(\bR\aenabled\x12\x14\n" +
	"\x05debug\x18\x03 \x01(\bR\x05debug\"\x8c\x02\n" +
	"\x0fDumpMetaRequest\x12\x19\n" +
	"\bapp_root\x18\x01 \x01(\tR\aappRoot\x12\x1f\n" +
	"\vworking_dir\x18\x02 \x01(\tR\n" +
	"workingDir\x12\x18\n" +
	"\aenviron\x18\x03 \x03(\tR\aenviron\x12\x1f\n" +
	"\vparse_tests\x18\x04 \x01(\bR\n" +
	"parseTests\x12=\n" +
	"\x06format\x18\x05 \x01(\x0e2%.encore.daemon.DumpMetaRequest.FormatR\x06format\"C\n" +
	"\x06Format\x12\x16\n" +
	"\x12FORMAT_UNSPECIFIED\x10\x00\x12\x0f\n" +
	"\vFORMAT_JSON\x10\x01\x12\x10\n" +
	"\fFORMAT_PROTO\x10\x02\"&\n" +
	"\x10DumpMetaResponse\x12\x12\n" +
	"\x04meta\x18\x01 \x01(\fR\x04meta\"\xcb\x15\n" +
	"\n" +
	"SQLCPlugin\x1a6\n" +
	"\x04File\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\bcontents\x18\x02 \x01(\fR\bcontents\x1a\xc9\x01\n" +
	"\bSettings\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12\x16\n" +
	"\x06engine\x18\x02 \x01(\tR\x06engine\x12\x16\n" +
	"\x06schema\x18\x03 \x03(\tR\x06schema\x12\x18\n" +
	"\aqueries\x18\x04 \x03(\tR\aqueries\x12;\n" +
	"\acodegen\x18\f \x01(\v2!.encore.daemon.SQLCPlugin.CodegenR\acodegenJ\x04\b\x05\x10\x06J\x04\b\b\x10\tJ\x04\b\t\x10\n" +
	"J\x04\b\n" +
	"\x10\vJ\x04\b\v\x10\f\x1a\xaf\x02\n" +
	"\aCodegen\x12\x10\n" +
	"\x03out\x18\x01 \x01(\tR\x03out\x12\x16\n" +
	"\x06plugin\x18\x02 \x01(\tR\x06plugin\x12\x18\n" +
	"\aoptions\x18\x03 \x01(\fR\aoptions\x12\x10\n" +
	"\x03env\x18\x04 \x03(\tR\x03env\x12C\n" +
	"\aprocess\x18\x05 \x01(\v2).encore.daemon.SQLCPlugin.Codegen.ProcessR\aprocess\x12:\n" +
	"\x04wasm\x18\x06 \x01(\v2&.encore.daemon.SQLCPlugin.Codegen.WASMR\x04wasm\x1a\x1b\n" +
	"\aProcess\x12\x10\n" +
	"\x03cmd\x18\x01 \x01(\tR\x03cmd\x1a0\n" +
	"\x04WASM\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x16\n" +
	"\x06sha256\x18\x02 \x01(\tR\x06sha256\x1a\x9a\x01\n" +
	"\aCatalog\x12\x18\n" +
	"\acomment\x18\x01 \x01(\tR\acomment\x12%\n" +
	"\x0edefault_schema\x18\x02 \x01(\tR\rdefaultSchema\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12:\n" +
	"\aschemas\x18\x04 \x03(\v2 .encore.daemon.SQLCPlugin.SchemaR\aschemas\x1a\xf7\x01\n" +
	"\x06Schema\x12\x18\n" +
	"\acomment\x18\x01 \x01(\tR\acomment\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x127\n" +
	"\x06tables\x18\x03 \x03(\v2\x1f.encore.daemon.SQLCPlugin.TableR\x06tables\x124\n" +
	"\x05enums\x18\x04 \x03(\v2\x1e.encore.daemon.SQLCPlugin.EnumR\x05enums\x12P\n" +
	"\x0fcomposite_types\x18\x05 \x03(\v2'.encore.daemon.SQLCPlugin.CompositeTypeR\x0ecompositeTypes\x1a=\n" +
	"\rCompositeType\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\acomment\x18\x02 \x01(\tR\acomment\x1aH\n" +
	"\x04Enum\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04vals\x18\x02 \x03(\tR\x04vals\x12\x18\n" +
	"\acomment\x18\x03 \x01(\tR\acomment\x1a\x95\x01\n" +
	"\x05Table\x126\n" +
	"\x03rel\x18\x01 \x01(\v2$.encore.daemon.SQLCPlugin.IdentifierR\x03rel\x12:\n" +
	"\acolumns\x18\x02 \x03(\v2 .encore.daemon.SQLCPlugin.ColumnR\acolumns\x12\x18\n" +
	"\acomment\x18\x03 \x01(\tR\acomment\x1aR\n" +
	"\n" +
	"Identifier\x12\x18\n" +
	"\acatalog\x18\x01 \x01(\tR\acatalog\x12\x16\n" +
	"\x06schema\x18\x02 \x01(\tR\x06schema\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x1a\xc4\x04\n" +
	"\x06Column\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x19\n" +
	"\bnot_null\x18\x03 \x01(\bR\anotNull\x12\x19\n" +
	"\bis_array\x18\x04 \x01(\bR\aisArray\x12\x18\n" +
	"\acomment\x18\x05 \x01(\tR\acomment\x12\x16\n" +
	"\x06length\x18\x06 \x01(\x05R\x06length\x12$\n" +
	"\x0eis_named_param\x18\a \x01(\bR\fisNamedParam\x12 \n" +
	"\fis_func_call\x18\b \x01(\bR\n" +
	"isFuncCall\x12\x14\n" +
	"\x05scope\x18\t \x01(\tR\x05scope\x12:\n" +
	"\x05table\x18\n" +
	" \x01(\v2$.encore.daemon.SQLCPlugin.IdentifierR\x05table\x12\x1f\n" +
	"\vtable_alias\x18\v \x01(\tR\n" +
	"tableAlias\x128\n" +
	"\x04type\x18\f \x01(\v2$.encore.daemon.SQLCPlugin.IdentifierR\x04type\x12\"\n" +
	"\ris_sqlc_slice\x18\r \x01(\bR\visSqlcSlice\x12E\n" +
	"\vembed_table\x18\x0e \x01(\v2$.encore.daemon.SQLCPlugin.IdentifierR\n" +
	"embedTable\x12#\n" +
	"\roriginal_name\x18\x0f \x01(\tR\foriginalName\x12\x1a\n" +
	"\bunsigned\x18\x10 \x01(\bR\bunsigned\x12\x1d\n" +
	"\n" +
	"array_dims\x18\x11 \x01(\x05R\tarrayDims\x1a\xca\x02\n" +
	"\x05Query\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x10\n" +
	"\x03cmd\x18\x03 \x01(\tR\x03cmd\x12:\n" +
	"\acolumns\x18\x04 \x03(\v2 .encore.daemon.SQLCPlugin.ColumnR\acolumns\x12?\n" +
	"\x06params\x18\x05 \x03(\v2#.encore.daemon.SQLCPlugin.ParameterR\n" +
	"parameters\x12\x1a\n" +
	"\bcomments\x18\x06 \x03(\tR\bcomments\x12\x1a\n" +
	"\bfilename\x18\a \x01(\tR\bfilename\x12R\n" +
	"\x11insert_into_table\x18\b \x01(\v2$.encore.daemon.SQLCPlugin.IdentifierR\x11insert_into_table\x1a]\n" +
	"\tParameter\x12\x16\n" +
	"\x06number\x18\x01 \x01(\x05R\x06number\x128\n" +
	"\x06column\x18\x02 \x01(\v2 .encore.daemon.SQLCPlugin.ColumnR\x06column\x1a\xbd\x02\n" +
	"\x0fGenerateRequest\x12>\n" +
	"\bsettings\x18\x01 \x01(\v2\".encore.daemon.SQLCPlugin.SettingsR\bsettings\x12;\n" +
	"\acatalog\x18\x02 \x01(\v2!.encore.daemon.SQLCPlugin.CatalogR\acatalog\x129\n" +
	"\aqueries\x18\x03 \x03(\v2\x1f.encore.daemon.SQLCPlugin.QueryR\aqueries\x12\"\n" +
	"\fsqlc_version\x18\x04 \x01(\tR\fsqlc_version\x12&\n" +
	"\x0eplugin_options\x18\x05 \x01(\fR\x0eplugin_options\x12&\n" +
	"\x0eglobal_options\x18\x06 \x01(\fR\x0eglobal_options\x1aH\n" +
	"\x10GenerateResponse\x124\n" +
	"\x05files\x18\x01 \x03(\v2\x1e.encore.daemon.SQLCPlugin.FileR\x05files*p\n" +
	"\x06DBRole\x12\x17\n" +
	"\x13DB_ROLE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11DB_ROLE_SUPERUSER\x10\x01\x12\x11\n" +
	"\rDB_ROLE_ADMIN\x10\x02\x12\x11\n" +
	"\rDB_ROLE_WRITE\x10\x03\x12\x10\n" +
	"\fDB_ROLE_READ\x10\x04*\x7f\n" +
	"\rDBClusterType\x12\x1f\n" +
	"\x1bDB_CLUSTER_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13DB_CLUSTER_TYPE_RUN\x10\x01\x12\x18\n" +
	"\x14DB_CLUSTER_TYPE_TEST\x10\x02\x12\x1a\n" +
	"\x16DB_CLUSTER_TYPE_SHADOW\x10\x032\xa7\f\n" +
	"\x06Daemon\x12A\n" +
	"\x03Run\x12\x19.encore.daemon.RunRequest\x1a\x1d.encore.daemon.CommandMessage0\x01\x12C\n" +
	"\x04Test\x12\x1a.encore.daemon.TestRequest\x1a\x1d.encore.daemon.CommandMessage0\x01\x12K\n" +
	"\bTestSpec\x12\x1e.encore.daemon.TestSpecRequest\x1a\x1f.encore.daemon.TestSpecResponse\x12O\n" +
	"\n" +
	"ExecScript\x12 .encore.daemon.ExecScriptRequest\x1a\x1d.encore.daemon.CommandMessage0\x01\x12E\n" +
	"\x05Check\x12\x1b.encore.daemon.CheckRequest\x1a\x1d.encore.daemon.CommandMessage0\x01\x12G\n" +
	"\x06Export\x12\x1c.encore.daemon.ExportRequest\x1a\x1d.encore.daemon.CommandMessage0\x01\x12N\n" +
	"\tDBConnect\x12\x1f.encore.daemon.DBConnectRequest\x1a .encore.daemon.DBConnectResponse\x12I\n" +
	"\aDBProxy\x12\x1d.encore.daemon.DBProxyRequest\x1a\x1d.encore.daemon.CommandMessage0\x01\x12I\n" +
	"\aDBReset\x12\x1d.encore.daemon.DBResetRequest\x1a\x1d.encore.daemon.CommandMessage0\x01\x12N\n" +
	"\tGenClient\x12\x1f.encore.daemon.GenClientRequest\x1a .encore.daemon.GenClientResponse\x12T\n" +
	"\vGenWrappers\x12!.encore.daemon.GenWrappersRequest\x1a\".encore.daemon.GenWrappersResponse\x12]\n" +
	"\x0eSecretsRefresh\x12$.encore.daemon.SecretsRefreshRequest\x1a%.encore.daemon.SecretsRefreshResponse\x12A\n" +
	"\aVersion\x12\x16.google.protobuf.Empty\x1a\x1e.encore.daemon.VersionResponse\x12R\n" +
	"\x0fCreateNamespace\x12%.encore.daemon.CreateNamespaceRequest\x1a\x18.encore.daemon.Namespace\x12R\n" +
	"\x0fSwitchNamespace\x12%.encore.daemon.SwitchNamespaceRequest\x1a\x18.encore.daemon.Namespace\x12]\n" +
	"\x0eListNamespaces\x12$.encore.daemon.ListNamespacesRequest\x1a%.encore.daemon.ListNamespacesResponse\x12P\n" +
	"\x0fDeleteNamespace\x12%.encore.daemon.DeleteNamespaceRequest\x1a\x16.google.protobuf.Empty\x12K\n" +
	"\bDumpMeta\x12\x1e.encore.daemon.DumpMetaRequest\x1a\x1f.encore.daemon.DumpMetaResponse\x12C\n" +
	"\tTelemetry\x12\x1e.encore.daemon.TelemetryConfig\x1a\x16.google.protobuf.Empty\x12N\n" +
	"\tCreateApp\x12\x1f.encore.daemon.CreateAppRequest\x1a .encore.daemon.CreateAppResponseB\x1eZ\x1cencr.dev/proto/encore/daemonb\x06proto3"

var (
	file_encore_daemon_daemon_proto_rawDescOnce sync.Once
	file_encore_daemon_daemon_proto_rawDescData []byte
)

func file_encore_daemon_daemon_proto_rawDescGZIP() []byte {
	file_encore_daemon_daemon_proto_rawDescOnce.Do(func() {
		file_encore_daemon_daemon_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_encore_daemon_daemon_proto_rawDesc), len(file_encore_daemon_daemon_proto_rawDesc)))
	})
	return file_encore_daemon_daemon_proto_rawDescData
}

var file_encore_daemon_daemon_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_encore_daemon_daemon_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_encore_daemon_daemon_proto_goTypes = []any{
	(DBRole)(0),                         // 0: encore.daemon.DBRole
	(DBClusterType)(0),                  // 1: encore.daemon.DBClusterType
	(RunRequest_BrowserMode)(0),         // 2: encore.daemon.RunRequest.BrowserMode
	(RunRequest_DebugMode)(0),           // 3: encore.daemon.RunRequest.DebugMode
	(DumpMetaRequest_Format)(0),         // 4: encore.daemon.DumpMetaRequest.Format
	(*CommandMessage)(nil),              // 5: encore.daemon.CommandMessage
	(*CommandOutput)(nil),               // 6: encore.daemon.CommandOutput
	(*CommandExit)(nil),                 // 7: encore.daemon.CommandExit
	(*CommandDisplayErrors)(nil),        // 8: encore.daemon.CommandDisplayErrors
	(*CreateAppRequest)(nil),            // 9: encore.daemon.CreateAppRequest
	(*CreateAppResponse)(nil),           // 10: encore.daemon.CreateAppResponse
	(*RunRequest)(nil),                  // 11: encore.daemon.RunRequest
	(*TestRequest)(nil),                 // 12: encore.daemon.TestRequest
	(*TestSpecRequest)(nil),             // 13: encore.daemon.TestSpecRequest
	(*TestSpecResponse)(nil),            // 14: encore.daemon.TestSpecResponse
	(*ExecScriptRequest)(nil),           // 15: encore.daemon.ExecScriptRequest
	(*CheckRequest)(nil),                // 16: encore.daemon.CheckRequest
	(*ExportRequest)(nil),               // 17: encore.daemon.ExportRequest
	(*DockerExportParams)(nil),          // 18: encore.daemon.DockerExportParams
	(*DBConnectRequest)(nil),            // 19: encore.daemon.DBConnectRequest
	(*DBConnectResponse)(nil),           // 20: encore.daemon.DBConnectResponse
	(*DBProxyRequest)(nil),              // 21: encore.daemon.DBProxyRequest
	(*DBResetRequest)(nil),              // 22: encore.daemon.DBResetRequest
	(*GenClientRequest)(nil),            // 23: encore.daemon.GenClientRequest
	(*GenClientResponse)(nil),           // 24: encore.daemon.GenClientResponse
	(*GenWrappersRequest)(nil),          // 25: encore.daemon.GenWrappersRequest
	(*GenWrappersResponse)(nil),         // 26: encore.daemon.GenWrappersResponse
	(*SecretsRefreshRequest)(nil),       // 27: encore.daemon.SecretsRefreshRequest
	(*SecretsRefreshResponse)(nil),      // 28: encore.daemon.SecretsRefreshResponse
	(*VersionResponse)(nil),             // 29: encore.daemon.VersionResponse
	(*Namespace)(nil),                   // 30: encore.daemon.Namespace
	(*CreateNamespaceRequest)(nil),      // 31: encore.daemon.CreateNamespaceRequest
	(*SwitchNamespaceRequest)(nil),      // 32: encore.daemon.SwitchNamespaceRequest
	(*ListNamespacesRequest)(nil),       // 33: encore.daemon.ListNamespacesRequest
	(*DeleteNamespaceRequest)(nil),      // 34: encore.daemon.DeleteNamespaceRequest
	(*ListNamespacesResponse)(nil),      // 35: encore.daemon.ListNamespacesResponse
	(*TelemetryConfig)(nil),             // 36: encore.daemon.TelemetryConfig
	(*DumpMetaRequest)(nil),             // 37: encore.daemon.DumpMetaRequest
	(*DumpMetaResponse)(nil),            // 38: encore.daemon.DumpMetaResponse
	(*SQLCPlugin)(nil),                  // 39: encore.daemon.SQLCPlugin
	(*SQLCPlugin_File)(nil),             // 40: encore.daemon.SQLCPlugin.File
	(*SQLCPlugin_Settings)(nil),         // 41: encore.daemon.SQLCPlugin.Settings
	(*SQLCPlugin_Codegen)(nil),          // 42: encore.daemon.SQLCPlugin.Codegen
	(*SQLCPlugin_Catalog)(nil),          // 43: encore.daemon.SQLCPlugin.Catalog
	(*SQLCPlugin_Schema)(nil),           // 44: encore.daemon.SQLCPlugin.Schema
	(*SQLCPlugin_CompositeType)(nil),    // 45: encore.daemon.SQLCPlugin.CompositeType
	(*SQLCPlugin_Enum)(nil),             // 46: encore.daemon.SQLCPlugin.Enum
	(*SQLCPlugin_Table)(nil),            // 47: encore.daemon.SQLCPlugin.Table
	(*SQLCPlugin_Identifier)(nil),       // 48: encore.daemon.SQLCPlugin.Identifier
	(*SQLCPlugin_Column)(nil),           // 49: encore.daemon.SQLCPlugin.Column
	(*SQLCPlugin_Query)(nil),            // 50: encore.daemon.SQLCPlugin.Query
	(*SQLCPlugin_Parameter)(nil),        // 51: encore.daemon.SQLCPlugin.Parameter
	(*SQLCPlugin_GenerateRequest)(nil),  // 52: encore.daemon.SQLCPlugin.GenerateRequest
	(*SQLCPlugin_GenerateResponse)(nil), // 53: encore.daemon.SQLCPlugin.GenerateResponse
	(*SQLCPlugin_Codegen_Process)(nil),  // 54: encore.daemon.SQLCPlugin.Codegen.Process
	(*SQLCPlugin_Codegen_WASM)(nil),     // 55: encore.daemon.SQLCPlugin.Codegen.WASM
	(*emptypb.Empty)(nil),               // 56: google.protobuf.Empty
}
var file_encore_daemon_daemon_proto_depIdxs = []int32{
	6,  // 0: encore.daemon.CommandMessage.output:type_name -> encore.daemon.CommandOutput
	7,  // 1: encore.daemon.CommandMessage.exit:type_name -> encore.daemon.CommandExit
	8,  // 2: encore.daemon.CommandMessage.errors:type_name -> encore.daemon.CommandDisplayErrors
	2,  // 3: encore.daemon.RunRequest.browser:type_name -> encore.daemon.RunRequest.BrowserMode
	3,  // 4: encore.daemon.RunRequest.debug_mode:type_name -> encore.daemon.RunRequest.DebugMode
	18, // 5: encore.daemon.ExportRequest.docker:type_name -> encore.daemon.DockerExportParams
	1,  // 6: encore.daemon.DBConnectRequest.cluster_type:type_name -> encore.daemon.DBClusterType
	0,  // 7: encore.daemon.DBConnectRequest.role:type_name -> encore.daemon.DBRole
	1,  // 8: encore.daemon.DBProxyRequest.cluster_type:type_name -> encore.daemon.DBClusterType
	0,  // 9: encore.daemon.DBProxyRequest.role:type_name -> encore.daemon.DBRole
	1,  // 10: encore.daemon.DBResetRequest.cluster_type:type_name -> encore.daemon.DBClusterType
	30, // 11: encore.daemon.ListNamespacesResponse.namespaces:type_name -> encore.daemon.Namespace
	4,  // 12: encore.daemon.DumpMetaRequest.format:type_name -> encore.daemon.DumpMetaRequest.Format
	42, // 13: encore.daemon.SQLCPlugin.Settings.codegen:type_name -> encore.daemon.SQLCPlugin.Codegen
	54, // 14: encore.daemon.SQLCPlugin.Codegen.process:type_name -> encore.daemon.SQLCPlugin.Codegen.Process
	55, // 15: encore.daemon.SQLCPlugin.Codegen.wasm:type_name -> encore.daemon.SQLCPlugin.Codegen.WASM
	44, // 16: encore.daemon.SQLCPlugin.Catalog.schemas:type_name -> encore.daemon.SQLCPlugin.Schema
	47, // 17: encore.daemon.SQLCPlugin.Schema.tables:type_name -> encore.daemon.SQLCPlugin.Table
	46, // 18: encore.daemon.SQLCPlugin.Schema.enums:type_name -> encore.daemon.SQLCPlugin.Enum
	45, // 19: encore.daemon.SQLCPlugin.Schema.composite_types:type_name -> encore.daemon.SQLCPlugin.CompositeType
	48, // 20: encore.daemon.SQLCPlugin.Table.rel:type_name -> encore.daemon.SQLCPlugin.Identifier
	49, // 21: encore.daemon.SQLCPlugin.Table.columns:type_name -> encore.daemon.SQLCPlugin.Column
	48, // 22: encore.daemon.SQLCPlugin.Column.table:type_name -> encore.daemon.SQLCPlugin.Identifier
	48, // 23: encore.daemon.SQLCPlugin.Column.type:type_name -> encore.daemon.SQLCPlugin.Identifier
	48, // 24: encore.daemon.SQLCPlugin.Column.embed_table:type_name -> encore.daemon.SQLCPlugin.Identifier
	49, // 25: encore.daemon.SQLCPlugin.Query.columns:type_name -> encore.daemon.SQLCPlugin.Column
	51, // 26: encore.daemon.SQLCPlugin.Query.params:type_name -> encore.daemon.SQLCPlugin.Parameter
	48, // 27: encore.daemon.SQLCPlugin.Query.insert_into_table:type_name -> encore.daemon.SQLCPlugin.Identifier
	49, // 28: encore.daemon.SQLCPlugin.Parameter.column:type_name -> encore.daemon.SQLCPlugin.Column
	41, // 29: encore.daemon.SQLCPlugin.GenerateRequest.settings:type_name -> encore.daemon.SQLCPlugin.Settings
	43, // 30: encore.daemon.SQLCPlugin.GenerateRequest.catalog:type_name -> encore.daemon.SQLCPlugin.Catalog
	50, // 31: encore.daemon.SQLCPlugin.GenerateRequest.queries:type_name -> encore.daemon.SQLCPlugin.Query
	40, // 32: encore.daemon.SQLCPlugin.GenerateResponse.files:type_name -> encore.daemon.SQLCPlugin.File
	11, // 33: encore.daemon.Daemon.Run:input_type -> encore.daemon.RunRequest
	12, // 34: encore.daemon.Daemon.Test:input_type -> encore.daemon.TestRequest
	13, // 35: encore.daemon.Daemon.TestSpec:input_type -> encore.daemon.TestSpecRequest
	15, // 36: encore.daemon.Daemon.ExecScript:input_type -> encore.daemon.ExecScriptRequest
	16, // 37: encore.daemon.Daemon.Check:input_type -> encore.daemon.CheckRequest
	17, // 38: encore.daemon.Daemon.Export:input_type -> encore.daemon.ExportRequest
	19, // 39: encore.daemon.Daemon.DBConnect:input_type -> encore.daemon.DBConnectRequest
	21, // 40: encore.daemon.Daemon.DBProxy:input_type -> encore.daemon.DBProxyRequest
	22, // 41: encore.daemon.Daemon.DBReset:input_type -> encore.daemon.DBResetRequest
	23, // 42: encore.daemon.Daemon.GenClient:input_type -> encore.daemon.GenClientRequest
	25, // 43: encore.daemon.Daemon.GenWrappers:input_type -> encore.daemon.GenWrappersRequest
	27, // 44: encore.daemon.Daemon.SecretsRefresh:input_type -> encore.daemon.SecretsRefreshRequest
	56, // 45: encore.daemon.Daemon.Version:input_type -> google.protobuf.Empty
	31, // 46: encore.daemon.Daemon.CreateNamespace:input_type -> encore.daemon.CreateNamespaceRequest
	32, // 47: encore.daemon.Daemon.SwitchNamespace:input_type -> encore.daemon.SwitchNamespaceRequest
	33, // 48: encore.daemon.Daemon.ListNamespaces:input_type -> encore.daemon.ListNamespacesRequest
	34, // 49: encore.daemon.Daemon.DeleteNamespace:input_type -> encore.daemon.DeleteNamespaceRequest
	37, // 50: encore.daemon.Daemon.DumpMeta:input_type -> encore.daemon.DumpMetaRequest
	36, // 51: encore.daemon.Daemon.Telemetry:input_type -> encore.daemon.TelemetryConfig
	9,  // 52: encore.daemon.Daemon.CreateApp:input_type -> encore.daemon.CreateAppRequest
	5,  // 53: encore.daemon.Daemon.Run:output_type -> encore.daemon.CommandMessage
	5,  // 54: encore.daemon.Daemon.Test:output_type -> encore.daemon.CommandMessage
	14, // 55: encore.daemon.Daemon.TestSpec:output_type -> encore.daemon.TestSpecResponse
	5,  // 56: encore.daemon.Daemon.ExecScript:output_type -> encore.daemon.CommandMessage
	5,  // 57: encore.daemon.Daemon.Check:output_type -> encore.daemon.CommandMessage
	5,  // 58: encore.daemon.Daemon.Export:output_type -> encore.daemon.CommandMessage
	20, // 59: encore.daemon.Daemon.DBConnect:output_type -> encore.daemon.DBConnectResponse
	5,  // 60: encore.daemon.Daemon.DBProxy:output_type -> encore.daemon.CommandMessage
	5,  // 61: encore.daemon.Daemon.DBReset:output_type -> encore.daemon.CommandMessage
	24, // 62: encore.daemon.Daemon.GenClient:output_type -> encore.daemon.GenClientResponse
	26, // 63: encore.daemon.Daemon.GenWrappers:output_type -> encore.daemon.GenWrappersResponse
	28, // 64: encore.daemon.Daemon.SecretsRefresh:output_type -> encore.daemon.SecretsRefreshResponse
	29, // 65: encore.daemon.Daemon.Version:output_type -> encore.daemon.VersionResponse
	30, // 66: encore.daemon.Daemon.CreateNamespace:output_type -> encore.daemon.Namespace
	30, // 67: encore.daemon.Daemon.SwitchNamespace:output_type -> encore.daemon.Namespace
	35, // 68: encore.daemon.Daemon.ListNamespaces:output_type -> encore.daemon.ListNamespacesResponse
	56, // 69: encore.daemon.Daemon.DeleteNamespace:output_type -> google.protobuf.Empty
	38, // 70: encore.daemon.Daemon.DumpMeta:output_type -> encore.daemon.DumpMetaResponse
	56, // 71: encore.daemon.Daemon.Telemetry:output_type -> google.protobuf.Empty
	10, // 72: encore.daemon.Daemon.CreateApp:output_type -> encore.daemon.CreateAppResponse
	53, // [53:73] is the sub-list for method output_type
	33, // [33:53] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_encore_daemon_daemon_proto_init() }
func file_encore_daemon_daemon_proto_init() {
	if File_encore_daemon_daemon_proto != nil {
		return
	}
	file_encore_daemon_daemon_proto_msgTypes[0].OneofWrappers = []any{
		(*CommandMessage_Output)(nil),
		(*CommandMessage_Exit)(nil),
		(*CommandMessage_Errors)(nil),
	}
	file_encore_daemon_daemon_proto_msgTypes[6].OneofWrappers = []any{}
	file_encore_daemon_daemon_proto_msgTypes[7].OneofWrappers = []any{}
	file_encore_daemon_daemon_proto_msgTypes[10].OneofWrappers = []any{}
	file_encore_daemon_daemon_proto_msgTypes[12].OneofWrappers = []any{
		(*ExportRequest_Docker)(nil),
	}
	file_encore_daemon_daemon_proto_msgTypes[14].OneofWrappers = []any{}
	file_encore_daemon_daemon_proto_msgTypes[16].OneofWrappers = []any{}
	file_encore_daemon_daemon_proto_msgTypes[17].OneofWrappers = []any{}
	file_encore_daemon_daemon_proto_msgTypes[18].OneofWrappers = []any{}
	file_encore_daemon_daemon_proto_msgTypes[25].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_encore_daemon_daemon_proto_rawDesc), len(file_encore_daemon_daemon_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_encore_daemon_daemon_proto_goTypes,
		DependencyIndexes: file_encore_daemon_daemon_proto_depIdxs,
		EnumInfos:         file_encore_daemon_daemon_proto_enumTypes,
		MessageInfos:      file_encore_daemon_daemon_proto_msgTypes,
	}.Build()
	File_encore_daemon_daemon_proto = out.File
	file_encore_daemon_daemon_proto_goTypes = nil
	file_encore_daemon_daemon_proto_depIdxs = nil
}
