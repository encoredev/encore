syntax = "proto3";

option go_package = "encr.dev/proto/encore/server/remote";

import "encore/parser/meta/v1/meta.proto";
import "encore/server/remote/tunnel/tunnel.proto";

package encore.server.remote;

service Remote {
  rpc Tunnel (stream TunnelClientMsg) returns (stream TunnelServerMsg);
  rpc Meta (MetaRequest) returns (encore.parser.meta.v1.Data);
  rpc DBConnect (stream Data) returns (stream Data);
  rpc RecordTrace (RecordTraceRequest) returns (RecordTraceResponse);
  rpc GetSecrets (GetSecretsRequest) returns (GetSecretsResponse);
  rpc SetSecret (SetSecretRequest) returns (SetSecretResponse);
  rpc Logs (LogsRequest) returns (stream LogsResponse);
}

message TunnelClientMsg {
  oneof msg {
    tunnel.SetupReq setup = 1;
    tunnel.RPCResp rpc = 2;
  }
}

message TunnelServerMsg {
  oneof msg {
    tunnel.SetupResp setup = 1;
    tunnel.RPCReq rpc = 2;
  }
}

message RecordTraceRequest {
  bytes data = 1;
}

message RecordTraceResponse {
}

message MetaRequest {
  string app_slug = 1;
  string env_name = 2;
}

message GetSecretsRequest {
  string app_slug = 1;
  bool poll = 2;
}

message GetSecretsResponse {
  repeated Secret secrets = 1;
}

message Secret {
  string key = 1;
  string value = 2;
}

message SetSecretRequest {
  enum Type {
      DEVELOPMENT = 0;
      PRODUCTION = 1;
  }
  string app_slug = 1;
  string key = 2;
  string value = 3;
  Type type = 4;
}

message SetSecretResponse {
    bool created = 1; // whether or not the secret was created (as opposed to updated)
}

message Data {
  bytes data = 1;
}

message LogsRequest {
  string app_slug = 1;
  string env_name = 2;
}

message LogsResponse {
  repeated bytes lines = 1;
  bool drop_notice = 2;
}