// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.19.4
// source: encore/parser/meta/v1/meta.proto

package v1

import (
	v1 "encr.dev/proto/encore/parser/schema/v1"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RPC_AccessType int32

const (
	RPC_PRIVATE RPC_AccessType = 0
	RPC_PUBLIC  RPC_AccessType = 1
	RPC_AUTH    RPC_AccessType = 2
)

// Enum value maps for RPC_AccessType.
var (
	RPC_AccessType_name = map[int32]string{
		0: "PRIVATE",
		1: "PUBLIC",
		2: "AUTH",
	}
	RPC_AccessType_value = map[string]int32{
		"PRIVATE": 0,
		"PUBLIC":  1,
		"AUTH":    2,
	}
)

func (x RPC_AccessType) Enum() *RPC_AccessType {
	p := new(RPC_AccessType)
	*p = x
	return p
}

func (x RPC_AccessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RPC_AccessType) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_parser_meta_v1_meta_proto_enumTypes[0].Descriptor()
}

func (RPC_AccessType) Type() protoreflect.EnumType {
	return &file_encore_parser_meta_v1_meta_proto_enumTypes[0]
}

func (x RPC_AccessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RPC_AccessType.Descriptor instead.
func (RPC_AccessType) EnumDescriptor() ([]byte, []int) {
	return file_encore_parser_meta_v1_meta_proto_rawDescGZIP(), []int{5, 0}
}

type RPC_Protocol int32

const (
	RPC_REGULAR RPC_Protocol = 0
	RPC_RAW     RPC_Protocol = 1
)

// Enum value maps for RPC_Protocol.
var (
	RPC_Protocol_name = map[int32]string{
		0: "REGULAR",
		1: "RAW",
	}
	RPC_Protocol_value = map[string]int32{
		"REGULAR": 0,
		"RAW":     1,
	}
)

func (x RPC_Protocol) Enum() *RPC_Protocol {
	p := new(RPC_Protocol)
	*p = x
	return p
}

func (x RPC_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RPC_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_parser_meta_v1_meta_proto_enumTypes[1].Descriptor()
}

func (RPC_Protocol) Type() protoreflect.EnumType {
	return &file_encore_parser_meta_v1_meta_proto_enumTypes[1]
}

func (x RPC_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RPC_Protocol.Descriptor instead.
func (RPC_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_encore_parser_meta_v1_meta_proto_rawDescGZIP(), []int{5, 1}
}

type StaticCallNode_Package int32

const (
	StaticCallNode_UNKNOWN StaticCallNode_Package = 0
	StaticCallNode_SQLDB   StaticCallNode_Package = 1
	StaticCallNode_RLOG    StaticCallNode_Package = 2
)

// Enum value maps for StaticCallNode_Package.
var (
	StaticCallNode_Package_name = map[int32]string{
		0: "UNKNOWN",
		1: "SQLDB",
		2: "RLOG",
	}
	StaticCallNode_Package_value = map[string]int32{
		"UNKNOWN": 0,
		"SQLDB":   1,
		"RLOG":    2,
	}
)

func (x StaticCallNode_Package) Enum() *StaticCallNode_Package {
	p := new(StaticCallNode_Package)
	*p = x
	return p
}

func (x StaticCallNode_Package) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StaticCallNode_Package) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_parser_meta_v1_meta_proto_enumTypes[2].Descriptor()
}

func (StaticCallNode_Package) Type() protoreflect.EnumType {
	return &file_encore_parser_meta_v1_meta_proto_enumTypes[2]
}

func (x StaticCallNode_Package) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StaticCallNode_Package.Descriptor instead.
func (StaticCallNode_Package) EnumDescriptor() ([]byte, []int) {
	return file_encore_parser_meta_v1_meta_proto_rawDescGZIP(), []int{10, 0}
}

type PathSegment_SegmentType int32

const (
	PathSegment_LITERAL  PathSegment_SegmentType = 0
	PathSegment_PARAM    PathSegment_SegmentType = 1
	PathSegment_WILDCARD PathSegment_SegmentType = 2
)

// Enum value maps for PathSegment_SegmentType.
var (
	PathSegment_SegmentType_name = map[int32]string{
		0: "LITERAL",
		1: "PARAM",
		2: "WILDCARD",
	}
	PathSegment_SegmentType_value = map[string]int32{
		"LITERAL":  0,
		"PARAM":    1,
		"WILDCARD": 2,
	}
)

func (x PathSegment_SegmentType) Enum() *PathSegment_SegmentType {
	p := new(PathSegment_SegmentType)
	*p = x
	return p
}

func (x PathSegment_SegmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PathSegment_SegmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_parser_meta_v1_meta_proto_enumTypes[3].Descriptor()
}

func (PathSegment_SegmentType) Type() protoreflect.EnumType {
	return &file_encore_parser_meta_v1_meta_proto_enumTypes[3]
}

func (x PathSegment_SegmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PathSegment_SegmentType.Descriptor instead.
func (PathSegment_SegmentType) EnumDescriptor() ([]byte, []int) {
	return file_encore_parser_meta_v1_meta_proto_rawDescGZIP(), []int{13, 0}
}

type PathSegment_ParamType int32

const (
	PathSegment_STRING PathSegment_ParamType = 0
	PathSegment_BOOL   PathSegment_ParamType = 1
	PathSegment_INT8   PathSegment_ParamType = 2
	PathSegment_INT16  PathSegment_ParamType = 3
	PathSegment_INT32  PathSegment_ParamType = 4
	PathSegment_INT64  PathSegment_ParamType = 5
	PathSegment_INT    PathSegment_ParamType = 6
	PathSegment_UINT8  PathSegment_ParamType = 7
	PathSegment_UINT16 PathSegment_ParamType = 8
	PathSegment_UINT32 PathSegment_ParamType = 9
	PathSegment_UINT64 PathSegment_ParamType = 10
	PathSegment_UINT   PathSegment_ParamType = 11
	PathSegment_UUID   PathSegment_ParamType = 12
)

// Enum value maps for PathSegment_ParamType.
var (
	PathSegment_ParamType_name = map[int32]string{
		0:  "STRING",
		1:  "BOOL",
		2:  "INT8",
		3:  "INT16",
		4:  "INT32",
		5:  "INT64",
		6:  "INT",
		7:  "UINT8",
		8:  "UINT16",
		9:  "UINT32",
		10: "UINT64",
		11: "UINT",
		12: "UUID",
	}
	PathSegment_ParamType_value = map[string]int32{
		"STRING": 0,
		"BOOL":   1,
		"INT8":   2,
		"INT16":  3,
		"INT32":  4,
		"INT64":  5,
		"INT":    6,
		"UINT8":  7,
		"UINT16": 8,
		"UINT32": 9,
		"UINT64": 10,
		"UINT":   11,
		"UUID":   12,
	}
)

func (x PathSegment_ParamType) Enum() *PathSegment_ParamType {
	p := new(PathSegment_ParamType)
	*p = x
	return p
}

func (x PathSegment_ParamType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PathSegment_ParamType) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_parser_meta_v1_meta_proto_enumTypes[4].Descriptor()
}

func (PathSegment_ParamType) Type() protoreflect.EnumType {
	return &file_encore_parser_meta_v1_meta_proto_enumTypes[4]
}

func (x PathSegment_ParamType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PathSegment_ParamType.Descriptor instead.
func (PathSegment_ParamType) EnumDescriptor() ([]byte, []int) {
	return file_encore_parser_meta_v1_meta_proto_rawDescGZIP(), []int{13, 1}
}

// Data is the metadata associated with an app version.
type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModulePath  string       `protobuf:"bytes,1,opt,name=module_path,json=modulePath,proto3" json:"module_path,omitempty"` // app module path
	AppVersion  string       `protobuf:"bytes,2,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	Decls       []*v1.Decl   `protobuf:"bytes,3,rep,name=decls,proto3" json:"decls,omitempty"`
	Pkgs        []*Package   `protobuf:"bytes,4,rep,name=pkgs,proto3" json:"pkgs,omitempty"`
	Svcs        []*Service   `protobuf:"bytes,5,rep,name=svcs,proto3" json:"svcs,omitempty"`
	AuthHandler *AuthHandler `protobuf:"bytes,6,opt,name=auth_handler,json=authHandler,proto3,oneof" json:"auth_handler,omitempty"` // the auth handler or nil
	CronJobs    []*CronJob   `protobuf:"bytes,7,rep,name=cron_jobs,json=cronJobs,proto3" json:"cron_jobs,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_encore_parser_meta_v1_meta_proto_rawDescGZIP(), []int{0}
}

func (x *Data) GetModulePath() string {
	if x != nil {
		return x.ModulePath
	}
	return ""
}

func (x *Data) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *Data) GetDecls() []*v1.Decl {
	if x != nil {
		return x.Decls
	}
	return nil
}

func (x *Data) GetPkgs() []*Package {
	if x != nil {
		return x.Pkgs
	}
	return nil
}

func (x *Data) GetSvcs() []*Service {
	if x != nil {
		return x.Svcs
	}
	return nil
}

func (x *Data) GetAuthHandler() *AuthHandler {
	if x != nil {
		return x.AuthHandler
	}
	return nil
}

func (x *Data) GetCronJobs() []*CronJob {
	if x != nil {
		return x.CronJobs
	}
	return nil
}

// QualifiedName is a name of an object in a specific package.
// It is never an unqualified name, even in circumstances
// where a package may refer to its own objects.
type QualifiedName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pkg  string `protobuf:"bytes,1,opt,name=pkg,proto3" json:"pkg,omitempty"`   // "rel/path/to/pkg"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // ObjectName
}

func (x *QualifiedName) Reset() {
	*x = QualifiedName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualifiedName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualifiedName) ProtoMessage() {}

func (x *QualifiedName) ProtoReflect() protoreflect.Message {
	mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualifiedName.ProtoReflect.Descriptor instead.
func (*QualifiedName) Descriptor() ([]byte, []int) {
	return file_encore_parser_meta_v1_meta_proto_rawDescGZIP(), []int{1}
}

func (x *QualifiedName) GetPkg() string {
	if x != nil {
		return x.Pkg
	}
	return ""
}

func (x *QualifiedName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelPath     string           `protobuf:"bytes,1,opt,name=rel_path,json=relPath,proto3" json:"rel_path,omitempty"`             // import path relative to app root ("." for the app root itself)
	Name        string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                  // package name as declared in Go files
	Doc         string           `protobuf:"bytes,3,opt,name=doc,proto3" json:"doc,omitempty"`                                    // associated documentation
	ServiceName string           `protobuf:"bytes,4,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"` // service name this package is a part of, if any
	Secrets     []string         `protobuf:"bytes,5,rep,name=secrets,proto3" json:"secrets,omitempty"`                            // secrets required by this package
	RpcCalls    []*QualifiedName `protobuf:"bytes,6,rep,name=rpc_calls,json=rpcCalls,proto3" json:"rpc_calls,omitempty"`          // RPCs called by the package
	TraceNodes  []*TraceNode     `protobuf:"bytes,7,rep,name=trace_nodes,json=traceNodes,proto3" json:"trace_nodes,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_encore_parser_meta_v1_meta_proto_rawDescGZIP(), []int{2}
}

func (x *Package) GetRelPath() string {
	if x != nil {
		return x.RelPath
	}
	return ""
}

func (x *Package) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Package) GetDoc() string {
	if x != nil {
		return x.Doc
	}
	return ""
}

func (x *Package) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Package) GetSecrets() []string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *Package) GetRpcCalls() []*QualifiedName {
	if x != nil {
		return x.RpcCalls
	}
	return nil
}

func (x *Package) GetTraceNodes() []*TraceNode {
	if x != nil {
		return x.TraceNodes
	}
	return nil
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RelPath    string         `protobuf:"bytes,2,opt,name=rel_path,json=relPath,proto3" json:"rel_path,omitempty"` // import path relative to app root for the root package in the service
	Rpcs       []*RPC         `protobuf:"bytes,3,rep,name=rpcs,proto3" json:"rpcs,omitempty"`
	Migrations []*DBMigration `protobuf:"bytes,4,rep,name=migrations,proto3" json:"migrations,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_encore_parser_meta_v1_meta_proto_rawDescGZIP(), []int{3}
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetRelPath() string {
	if x != nil {
		return x.RelPath
	}
	return ""
}

func (x *Service) GetRpcs() []*RPC {
	if x != nil {
		return x.Rpcs
	}
	return nil
}

func (x *Service) GetMigrations() []*DBMigration {
	if x != nil {
		return x.Migrations
	}
	return nil
}

type DBMigration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename    string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`       // filename
	Number      int32  `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`          // migration number
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"` // descriptive name
}

func (x *DBMigration) Reset() {
	*x = DBMigration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBMigration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBMigration) ProtoMessage() {}

func (x *DBMigration) ProtoReflect() protoreflect.Message {
	mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBMigration.ProtoReflect.Descriptor instead.
func (*DBMigration) Descriptor() ([]byte, []int) {
	return file_encore_parser_meta_v1_meta_proto_rawDescGZIP(), []int{4}
}

func (x *DBMigration) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *DBMigration) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *DBMigration) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type RPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                          // name of the RPC endpoint
	Doc            string         `protobuf:"bytes,2,opt,name=doc,proto3" json:"doc,omitempty"`                                                                            // associated documentation
	ServiceName    string         `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`                                         // the service the RPC belongs to.
	AccessType     RPC_AccessType `protobuf:"varint,4,opt,name=access_type,json=accessType,proto3,enum=encore.parser.meta.v1.RPC_AccessType" json:"access_type,omitempty"` // how can the RPC be accessed?
	RequestSchema  *v1.Type       `protobuf:"bytes,5,opt,name=request_schema,json=requestSchema,proto3,oneof" json:"request_schema,omitempty"`                             // request schema, or nil
	ResponseSchema *v1.Type       `protobuf:"bytes,6,opt,name=response_schema,json=responseSchema,proto3,oneof" json:"response_schema,omitempty"`                          // response schema, or nil
	Proto          RPC_Protocol   `protobuf:"varint,7,opt,name=proto,proto3,enum=encore.parser.meta.v1.RPC_Protocol" json:"proto,omitempty"`
	Loc            *v1.Loc        `protobuf:"bytes,8,opt,name=loc,proto3" json:"loc,omitempty"`
	Path           *Path          `protobuf:"bytes,9,opt,name=path,proto3" json:"path,omitempty"`
	HttpMethods    []string       `protobuf:"bytes,10,rep,name=http_methods,json=httpMethods,proto3" json:"http_methods,omitempty"`
}

func (x *RPC) Reset() {
	*x = RPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPC) ProtoMessage() {}

func (x *RPC) ProtoReflect() protoreflect.Message {
	mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPC.ProtoReflect.Descriptor instead.
func (*RPC) Descriptor() ([]byte, []int) {
	return file_encore_parser_meta_v1_meta_proto_rawDescGZIP(), []int{5}
}

func (x *RPC) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RPC) GetDoc() string {
	if x != nil {
		return x.Doc
	}
	return ""
}

func (x *RPC) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RPC) GetAccessType() RPC_AccessType {
	if x != nil {
		return x.AccessType
	}
	return RPC_PRIVATE
}

func (x *RPC) GetRequestSchema() *v1.Type {
	if x != nil {
		return x.RequestSchema
	}
	return nil
}

func (x *RPC) GetResponseSchema() *v1.Type {
	if x != nil {
		return x.ResponseSchema
	}
	return nil
}

func (x *RPC) GetProto() RPC_Protocol {
	if x != nil {
		return x.Proto
	}
	return RPC_REGULAR
}

func (x *RPC) GetLoc() *v1.Loc {
	if x != nil {
		return x.Loc
	}
	return nil
}

func (x *RPC) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *RPC) GetHttpMethods() []string {
	if x != nil {
		return x.HttpMethods
	}
	return nil
}

type AuthHandler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Doc      string   `protobuf:"bytes,2,opt,name=doc,proto3" json:"doc,omitempty"`
	PkgPath  string   `protobuf:"bytes,3,opt,name=pkg_path,json=pkgPath,proto3" json:"pkg_path,omitempty"` // package (service) import path
	PkgName  string   `protobuf:"bytes,4,opt,name=pkg_name,json=pkgName,proto3" json:"pkg_name,omitempty"` // package (service) name
	Loc      *v1.Loc  `protobuf:"bytes,5,opt,name=loc,proto3" json:"loc,omitempty"`
	AuthData *v1.Type `protobuf:"bytes,6,opt,name=auth_data,json=authData,proto3,oneof" json:"auth_data,omitempty"` // custom auth data, or nil
}

func (x *AuthHandler) Reset() {
	*x = AuthHandler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthHandler) ProtoMessage() {}

func (x *AuthHandler) ProtoReflect() protoreflect.Message {
	mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthHandler.ProtoReflect.Descriptor instead.
func (*AuthHandler) Descriptor() ([]byte, []int) {
	return file_encore_parser_meta_v1_meta_proto_rawDescGZIP(), []int{6}
}

func (x *AuthHandler) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuthHandler) GetDoc() string {
	if x != nil {
		return x.Doc
	}
	return ""
}

func (x *AuthHandler) GetPkgPath() string {
	if x != nil {
		return x.PkgPath
	}
	return ""
}

func (x *AuthHandler) GetPkgName() string {
	if x != nil {
		return x.PkgName
	}
	return ""
}

func (x *AuthHandler) GetLoc() *v1.Loc {
	if x != nil {
		return x.Loc
	}
	return nil
}

func (x *AuthHandler) GetAuthData() *v1.Type {
	if x != nil {
		return x.AuthData
	}
	return nil
}

type TraceNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filepath     string `protobuf:"bytes,2,opt,name=filepath,proto3" json:"filepath,omitempty"` // slash-separated, relative to app root
	StartPos     int32  `protobuf:"varint,4,opt,name=start_pos,json=startPos,proto3" json:"start_pos,omitempty"`
	EndPos       int32  `protobuf:"varint,5,opt,name=end_pos,json=endPos,proto3" json:"end_pos,omitempty"`
	SrcLineStart int32  `protobuf:"varint,6,opt,name=src_line_start,json=srcLineStart,proto3" json:"src_line_start,omitempty"`
	SrcLineEnd   int32  `protobuf:"varint,7,opt,name=src_line_end,json=srcLineEnd,proto3" json:"src_line_end,omitempty"`
	SrcColStart  int32  `protobuf:"varint,8,opt,name=src_col_start,json=srcColStart,proto3" json:"src_col_start,omitempty"`
	SrcColEnd    int32  `protobuf:"varint,9,opt,name=src_col_end,json=srcColEnd,proto3" json:"src_col_end,omitempty"`
	// Types that are assignable to Context:
	//	*TraceNode_RpcDef
	//	*TraceNode_RpcCall
	//	*TraceNode_StaticCall
	//	*TraceNode_AuthHandlerDef
	Context isTraceNode_Context `protobuf_oneof:"context"`
}

func (x *TraceNode) Reset() {
	*x = TraceNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceNode) ProtoMessage() {}

func (x *TraceNode) ProtoReflect() protoreflect.Message {
	mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceNode.ProtoReflect.Descriptor instead.
func (*TraceNode) Descriptor() ([]byte, []int) {
	return file_encore_parser_meta_v1_meta_proto_rawDescGZIP(), []int{7}
}

func (x *TraceNode) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TraceNode) GetFilepath() string {
	if x != nil {
		return x.Filepath
	}
	return ""
}

func (x *TraceNode) GetStartPos() int32 {
	if x != nil {
		return x.StartPos
	}
	return 0
}

func (x *TraceNode) GetEndPos() int32 {
	if x != nil {
		return x.EndPos
	}
	return 0
}

func (x *TraceNode) GetSrcLineStart() int32 {
	if x != nil {
		return x.SrcLineStart
	}
	return 0
}

func (x *TraceNode) GetSrcLineEnd() int32 {
	if x != nil {
		return x.SrcLineEnd
	}
	return 0
}

func (x *TraceNode) GetSrcColStart() int32 {
	if x != nil {
		return x.SrcColStart
	}
	return 0
}

func (x *TraceNode) GetSrcColEnd() int32 {
	if x != nil {
		return x.SrcColEnd
	}
	return 0
}

func (m *TraceNode) GetContext() isTraceNode_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (x *TraceNode) GetRpcDef() *RPCDefNode {
	if x, ok := x.GetContext().(*TraceNode_RpcDef); ok {
		return x.RpcDef
	}
	return nil
}

func (x *TraceNode) GetRpcCall() *RPCCallNode {
	if x, ok := x.GetContext().(*TraceNode_RpcCall); ok {
		return x.RpcCall
	}
	return nil
}

func (x *TraceNode) GetStaticCall() *StaticCallNode {
	if x, ok := x.GetContext().(*TraceNode_StaticCall); ok {
		return x.StaticCall
	}
	return nil
}

func (x *TraceNode) GetAuthHandlerDef() *AuthHandlerDefNode {
	if x, ok := x.GetContext().(*TraceNode_AuthHandlerDef); ok {
		return x.AuthHandlerDef
	}
	return nil
}

type isTraceNode_Context interface {
	isTraceNode_Context()
}

type TraceNode_RpcDef struct {
	RpcDef *RPCDefNode `protobuf:"bytes,10,opt,name=rpc_def,json=rpcDef,proto3,oneof"`
}

type TraceNode_RpcCall struct {
	RpcCall *RPCCallNode `protobuf:"bytes,11,opt,name=rpc_call,json=rpcCall,proto3,oneof"`
}

type TraceNode_StaticCall struct {
	StaticCall *StaticCallNode `protobuf:"bytes,12,opt,name=static_call,json=staticCall,proto3,oneof"`
}

type TraceNode_AuthHandlerDef struct {
	AuthHandlerDef *AuthHandlerDefNode `protobuf:"bytes,13,opt,name=auth_handler_def,json=authHandlerDef,proto3,oneof"`
}

func (*TraceNode_RpcDef) isTraceNode_Context() {}

func (*TraceNode_RpcCall) isTraceNode_Context() {}

func (*TraceNode_StaticCall) isTraceNode_Context() {}

func (*TraceNode_AuthHandlerDef) isTraceNode_Context() {}

type RPCDefNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	RpcName     string `protobuf:"bytes,2,opt,name=rpc_name,json=rpcName,proto3" json:"rpc_name,omitempty"`
	Context     string `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *RPCDefNode) Reset() {
	*x = RPCDefNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPCDefNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCDefNode) ProtoMessage() {}

func (x *RPCDefNode) ProtoReflect() protoreflect.Message {
	mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCDefNode.ProtoReflect.Descriptor instead.
func (*RPCDefNode) Descriptor() ([]byte, []int) {
	return file_encore_parser_meta_v1_meta_proto_rawDescGZIP(), []int{8}
}

func (x *RPCDefNode) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RPCDefNode) GetRpcName() string {
	if x != nil {
		return x.RpcName
	}
	return ""
}

func (x *RPCDefNode) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type RPCCallNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	RpcName     string `protobuf:"bytes,2,opt,name=rpc_name,json=rpcName,proto3" json:"rpc_name,omitempty"`
	Context     string `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *RPCCallNode) Reset() {
	*x = RPCCallNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPCCallNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCCallNode) ProtoMessage() {}

func (x *RPCCallNode) ProtoReflect() protoreflect.Message {
	mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCCallNode.ProtoReflect.Descriptor instead.
func (*RPCCallNode) Descriptor() ([]byte, []int) {
	return file_encore_parser_meta_v1_meta_proto_rawDescGZIP(), []int{9}
}

func (x *RPCCallNode) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RPCCallNode) GetRpcName() string {
	if x != nil {
		return x.RpcName
	}
	return ""
}

func (x *RPCCallNode) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type StaticCallNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Package StaticCallNode_Package `protobuf:"varint,1,opt,name=package,proto3,enum=encore.parser.meta.v1.StaticCallNode_Package" json:"package,omitempty"`
	Func    string                 `protobuf:"bytes,2,opt,name=func,proto3" json:"func,omitempty"`
	Context string                 `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *StaticCallNode) Reset() {
	*x = StaticCallNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticCallNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticCallNode) ProtoMessage() {}

func (x *StaticCallNode) ProtoReflect() protoreflect.Message {
	mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticCallNode.ProtoReflect.Descriptor instead.
func (*StaticCallNode) Descriptor() ([]byte, []int) {
	return file_encore_parser_meta_v1_meta_proto_rawDescGZIP(), []int{10}
}

func (x *StaticCallNode) GetPackage() StaticCallNode_Package {
	if x != nil {
		return x.Package
	}
	return StaticCallNode_UNKNOWN
}

func (x *StaticCallNode) GetFunc() string {
	if x != nil {
		return x.Func
	}
	return ""
}

func (x *StaticCallNode) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type AuthHandlerDefNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Context     string `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *AuthHandlerDefNode) Reset() {
	*x = AuthHandlerDefNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthHandlerDefNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthHandlerDefNode) ProtoMessage() {}

func (x *AuthHandlerDefNode) ProtoReflect() protoreflect.Message {
	mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthHandlerDefNode.ProtoReflect.Descriptor instead.
func (*AuthHandlerDefNode) Descriptor() ([]byte, []int) {
	return file_encore_parser_meta_v1_meta_proto_rawDescGZIP(), []int{11}
}

func (x *AuthHandlerDefNode) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *AuthHandlerDefNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuthHandlerDefNode) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segments []*PathSegment `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *Path) Reset() {
	*x = Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_encore_parser_meta_v1_meta_proto_rawDescGZIP(), []int{12}
}

func (x *Path) GetSegments() []*PathSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

type PathSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      PathSegment_SegmentType `protobuf:"varint,1,opt,name=type,proto3,enum=encore.parser.meta.v1.PathSegment_SegmentType" json:"type,omitempty"`
	Value     string                  `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ValueType PathSegment_ParamType   `protobuf:"varint,3,opt,name=value_type,json=valueType,proto3,enum=encore.parser.meta.v1.PathSegment_ParamType" json:"value_type,omitempty"`
}

func (x *PathSegment) Reset() {
	*x = PathSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathSegment) ProtoMessage() {}

func (x *PathSegment) ProtoReflect() protoreflect.Message {
	mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathSegment.ProtoReflect.Descriptor instead.
func (*PathSegment) Descriptor() ([]byte, []int) {
	return file_encore_parser_meta_v1_meta_proto_rawDescGZIP(), []int{13}
}

func (x *PathSegment) GetType() PathSegment_SegmentType {
	if x != nil {
		return x.Type
	}
	return PathSegment_LITERAL
}

func (x *PathSegment) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PathSegment) GetValueType() PathSegment_ParamType {
	if x != nil {
		return x.ValueType
	}
	return PathSegment_STRING
}

type CronJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Doc      string         `protobuf:"bytes,3,opt,name=doc,proto3" json:"doc,omitempty"`
	Schedule string         `protobuf:"bytes,4,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Endpoint *QualifiedName `protobuf:"bytes,5,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *CronJob) Reset() {
	*x = CronJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronJob) ProtoMessage() {}

func (x *CronJob) ProtoReflect() protoreflect.Message {
	mi := &file_encore_parser_meta_v1_meta_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronJob.ProtoReflect.Descriptor instead.
func (*CronJob) Descriptor() ([]byte, []int) {
	return file_encore_parser_meta_v1_meta_proto_rawDescGZIP(), []int{14}
}

func (x *CronJob) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CronJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CronJob) GetDoc() string {
	if x != nil {
		return x.Doc
	}
	return ""
}

func (x *CronJob) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *CronJob) GetEndpoint() *QualifiedName {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

var File_encore_parser_meta_v1_meta_proto protoreflect.FileDescriptor

var file_encore_parser_meta_v1_meta_proto_rawDesc = []byte{
	0x0a, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x15, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x24, 0x65, 0x6e, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xff, 0x02, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x64, 0x65,
	0x63, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x52, 0x05, 0x64, 0x65, 0x63, 0x6c, 0x73, 0x12,
	0x32, 0x0a, 0x04, 0x70, 0x6b, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x6b, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x76, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x04, 0x73, 0x76, 0x63, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x6a, 0x6f, 0x62, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x08, 0x63, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x73,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x22, 0x35, 0x0a, 0x0d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6b, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x70, 0x6b, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x64, 0x6f, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x12, 0x41, 0x0a, 0x09, 0x72, 0x70, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x72, 0x70, 0x63,
	0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x04, 0x72, 0x70, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x50, 0x43, 0x52, 0x04, 0x72,
	0x70, 0x63, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x42, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x63, 0x0a, 0x0b, 0x44, 0x42, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe7, 0x04, 0x0a,
	0x03, 0x52, 0x50, 0x43, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x50, 0x43, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x4b, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x50, 0x43, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2e, 0x0a, 0x03, 0x6c, 0x6f, 0x63, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x63, 0x52, 0x03, 0x6c, 0x6f, 0x63, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x22, 0x2f, 0x0a, 0x0a,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x48, 0x10, 0x02, 0x22, 0x20, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x47,
	0x55, 0x4c, 0x41, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x41, 0x57, 0x10, 0x01, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xe8, 0x01, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x6b, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x6b, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6b, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6c, 0x6f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x03, 0x6c,
	0x6f, 0x63, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xa4, 0x04, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x50, 0x6f,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x4c, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x72, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x72, 0x63,
	0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1e, 0x0a,
	0x0b, 0x73, 0x72, 0x63, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6c, 0x45, 0x6e, 0x64, 0x12, 0x3c, 0x0a,
	0x07, 0x72, 0x70, 0x63, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x50, 0x43, 0x44, 0x65, 0x66, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x70, 0x63, 0x44, 0x65, 0x66, 0x12, 0x3f, 0x0a, 0x08, 0x72,
	0x70, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x61, 0x6c, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x72, 0x70, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x48, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x43, 0x61, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x55, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x61,
	0x75, 0x74, 0x68, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x66, 0x42, 0x09, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x64, 0x0a, 0x0a, 0x52, 0x50, 0x43, 0x44,
	0x65, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x70, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x70, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x65,
	0x0a, 0x0b, 0x52, 0x50, 0x43, 0x43, 0x61, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x70, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x70, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x43, 0x61, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x65, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x75, 0x6e, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x2b, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x51, 0x4c, 0x44, 0x42,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x4c, 0x4f, 0x47, 0x10, 0x02, 0x22, 0x65, 0x0a, 0x12,
	0x41, 0x75, 0x74, 0x68, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x66, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x46, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x08, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x84, 0x03, 0x0a, 0x0b,
	0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x65, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x65, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x33, 0x0a, 0x0b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x49, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x49, 0x4c,
	0x44, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x22, 0x98, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49,
	0x4e, 0x54, 0x38, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x49,
	0x4e, 0x54, 0x36, 0x34, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x06, 0x12,
	0x09, 0x0a, 0x05, 0x55, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49,
	0x4e, 0x54, 0x31, 0x36, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x33, 0x32,
	0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x0a, 0x12, 0x08,
	0x0a, 0x04, 0x55, 0x49, 0x4e, 0x54, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x10, 0x0c, 0x22, 0x9d, 0x01, 0x0a, 0x07, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x64, 0x6f, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x40, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x42, 0x26, 0x5a, 0x24, 0x65, 0x6e, 0x63, 0x72, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_encore_parser_meta_v1_meta_proto_rawDescOnce sync.Once
	file_encore_parser_meta_v1_meta_proto_rawDescData = file_encore_parser_meta_v1_meta_proto_rawDesc
)

func file_encore_parser_meta_v1_meta_proto_rawDescGZIP() []byte {
	file_encore_parser_meta_v1_meta_proto_rawDescOnce.Do(func() {
		file_encore_parser_meta_v1_meta_proto_rawDescData = protoimpl.X.CompressGZIP(file_encore_parser_meta_v1_meta_proto_rawDescData)
	})
	return file_encore_parser_meta_v1_meta_proto_rawDescData
}

var file_encore_parser_meta_v1_meta_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_encore_parser_meta_v1_meta_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_encore_parser_meta_v1_meta_proto_goTypes = []interface{}{
	(RPC_AccessType)(0),          // 0: encore.parser.meta.v1.RPC.AccessType
	(RPC_Protocol)(0),            // 1: encore.parser.meta.v1.RPC.Protocol
	(StaticCallNode_Package)(0),  // 2: encore.parser.meta.v1.StaticCallNode.Package
	(PathSegment_SegmentType)(0), // 3: encore.parser.meta.v1.PathSegment.SegmentType
	(PathSegment_ParamType)(0),   // 4: encore.parser.meta.v1.PathSegment.ParamType
	(*Data)(nil),                 // 5: encore.parser.meta.v1.Data
	(*QualifiedName)(nil),        // 6: encore.parser.meta.v1.QualifiedName
	(*Package)(nil),              // 7: encore.parser.meta.v1.Package
	(*Service)(nil),              // 8: encore.parser.meta.v1.Service
	(*DBMigration)(nil),          // 9: encore.parser.meta.v1.DBMigration
	(*RPC)(nil),                  // 10: encore.parser.meta.v1.RPC
	(*AuthHandler)(nil),          // 11: encore.parser.meta.v1.AuthHandler
	(*TraceNode)(nil),            // 12: encore.parser.meta.v1.TraceNode
	(*RPCDefNode)(nil),           // 13: encore.parser.meta.v1.RPCDefNode
	(*RPCCallNode)(nil),          // 14: encore.parser.meta.v1.RPCCallNode
	(*StaticCallNode)(nil),       // 15: encore.parser.meta.v1.StaticCallNode
	(*AuthHandlerDefNode)(nil),   // 16: encore.parser.meta.v1.AuthHandlerDefNode
	(*Path)(nil),                 // 17: encore.parser.meta.v1.Path
	(*PathSegment)(nil),          // 18: encore.parser.meta.v1.PathSegment
	(*CronJob)(nil),              // 19: encore.parser.meta.v1.CronJob
	(*v1.Decl)(nil),              // 20: encore.parser.schema.v1.Decl
	(*v1.Type)(nil),              // 21: encore.parser.schema.v1.Type
	(*v1.Loc)(nil),               // 22: encore.parser.schema.v1.Loc
}
var file_encore_parser_meta_v1_meta_proto_depIdxs = []int32{
	20, // 0: encore.parser.meta.v1.Data.decls:type_name -> encore.parser.schema.v1.Decl
	7,  // 1: encore.parser.meta.v1.Data.pkgs:type_name -> encore.parser.meta.v1.Package
	8,  // 2: encore.parser.meta.v1.Data.svcs:type_name -> encore.parser.meta.v1.Service
	11, // 3: encore.parser.meta.v1.Data.auth_handler:type_name -> encore.parser.meta.v1.AuthHandler
	19, // 4: encore.parser.meta.v1.Data.cron_jobs:type_name -> encore.parser.meta.v1.CronJob
	6,  // 5: encore.parser.meta.v1.Package.rpc_calls:type_name -> encore.parser.meta.v1.QualifiedName
	12, // 6: encore.parser.meta.v1.Package.trace_nodes:type_name -> encore.parser.meta.v1.TraceNode
	10, // 7: encore.parser.meta.v1.Service.rpcs:type_name -> encore.parser.meta.v1.RPC
	9,  // 8: encore.parser.meta.v1.Service.migrations:type_name -> encore.parser.meta.v1.DBMigration
	0,  // 9: encore.parser.meta.v1.RPC.access_type:type_name -> encore.parser.meta.v1.RPC.AccessType
	21, // 10: encore.parser.meta.v1.RPC.request_schema:type_name -> encore.parser.schema.v1.Type
	21, // 11: encore.parser.meta.v1.RPC.response_schema:type_name -> encore.parser.schema.v1.Type
	1,  // 12: encore.parser.meta.v1.RPC.proto:type_name -> encore.parser.meta.v1.RPC.Protocol
	22, // 13: encore.parser.meta.v1.RPC.loc:type_name -> encore.parser.schema.v1.Loc
	17, // 14: encore.parser.meta.v1.RPC.path:type_name -> encore.parser.meta.v1.Path
	22, // 15: encore.parser.meta.v1.AuthHandler.loc:type_name -> encore.parser.schema.v1.Loc
	21, // 16: encore.parser.meta.v1.AuthHandler.auth_data:type_name -> encore.parser.schema.v1.Type
	13, // 17: encore.parser.meta.v1.TraceNode.rpc_def:type_name -> encore.parser.meta.v1.RPCDefNode
	14, // 18: encore.parser.meta.v1.TraceNode.rpc_call:type_name -> encore.parser.meta.v1.RPCCallNode
	15, // 19: encore.parser.meta.v1.TraceNode.static_call:type_name -> encore.parser.meta.v1.StaticCallNode
	16, // 20: encore.parser.meta.v1.TraceNode.auth_handler_def:type_name -> encore.parser.meta.v1.AuthHandlerDefNode
	2,  // 21: encore.parser.meta.v1.StaticCallNode.package:type_name -> encore.parser.meta.v1.StaticCallNode.Package
	18, // 22: encore.parser.meta.v1.Path.segments:type_name -> encore.parser.meta.v1.PathSegment
	3,  // 23: encore.parser.meta.v1.PathSegment.type:type_name -> encore.parser.meta.v1.PathSegment.SegmentType
	4,  // 24: encore.parser.meta.v1.PathSegment.value_type:type_name -> encore.parser.meta.v1.PathSegment.ParamType
	6,  // 25: encore.parser.meta.v1.CronJob.endpoint:type_name -> encore.parser.meta.v1.QualifiedName
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_encore_parser_meta_v1_meta_proto_init() }
func file_encore_parser_meta_v1_meta_proto_init() {
	if File_encore_parser_meta_v1_meta_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_encore_parser_meta_v1_meta_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_parser_meta_v1_meta_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualifiedName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_parser_meta_v1_meta_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_parser_meta_v1_meta_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_parser_meta_v1_meta_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBMigration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_parser_meta_v1_meta_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_parser_meta_v1_meta_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthHandler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_parser_meta_v1_meta_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_parser_meta_v1_meta_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPCDefNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_parser_meta_v1_meta_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPCCallNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_parser_meta_v1_meta_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticCallNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_parser_meta_v1_meta_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthHandlerDefNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_parser_meta_v1_meta_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_parser_meta_v1_meta_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_parser_meta_v1_meta_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_encore_parser_meta_v1_meta_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_encore_parser_meta_v1_meta_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_encore_parser_meta_v1_meta_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_encore_parser_meta_v1_meta_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*TraceNode_RpcDef)(nil),
		(*TraceNode_RpcCall)(nil),
		(*TraceNode_StaticCall)(nil),
		(*TraceNode_AuthHandlerDef)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_encore_parser_meta_v1_meta_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_encore_parser_meta_v1_meta_proto_goTypes,
		DependencyIndexes: file_encore_parser_meta_v1_meta_proto_depIdxs,
		EnumInfos:         file_encore_parser_meta_v1_meta_proto_enumTypes,
		MessageInfos:      file_encore_parser_meta_v1_meta_proto_msgTypes,
	}.Build()
	File_encore_parser_meta_v1_meta_proto = out.File
	file_encore_parser_meta_v1_meta_proto_rawDesc = nil
	file_encore_parser_meta_v1_meta_proto_goTypes = nil
	file_encore_parser_meta_v1_meta_proto_depIdxs = nil
}
