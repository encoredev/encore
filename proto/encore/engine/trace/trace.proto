syntax = "proto3";

option go_package = "encr.dev/proto/encore/engine/trace";

import "google/protobuf/timestamp.proto";

package encore.engine.trace;

message TraceID {
  uint64 high = 1;
  uint64 low = 2;
}

message Request {
  TraceID trace_id = 1;
  uint64 span_id = 2;
  uint64 parent_span_id = 3;
  uint32 goid = 4;
  uint64 start_time = 5;
  uint64 end_time = 6;
  int32 call_loc = 7;
  int32 def_loc = 8;
  repeated bytes inputs = 9;
  repeated bytes outputs = 10;
  bytes err = 11;
  repeated Event events = 12;
  string uid = 13;
  Type type = 14;
  StackTrace err_stack = 15;

  // abs_start_time is the absolute unix timestamp
  // (in nanosecond resolution) of when the request started.
  uint64 abs_start_time = 16;

  string service_name = 17;
  string endpoint_name = 18;

  enum Type {
    RPC = 0;
    AUTH = 1;
  }
}

message Event {
  oneof data {
    RPCCall rpc = 1;
    DBTransaction tx = 2;
    DBQuery query = 3;
    Goroutine goroutine = 4;
    HTTPCall http = 5;
    LogMessage log = 6;
  }
}

message RPCCall {
  uint64 span_id = 1;
  uint32 goid = 2;
  int32 call_loc = 3;
  int32 def_loc = 4;
  uint64 start_time = 5;
  uint64 end_time = 6;
  bytes err = 7;
  StackTrace stack = 8; // where it was called
}

message Goroutine {
  uint32 goid = 1;
  int32 call_loc = 2; // not yet set
  uint64 start_time = 3;
  uint64 end_time = 4;
}

message DBTransaction {
  enum CompletionType {
    ROLLBACK = 0;
    COMMIT = 1; 
  }

  uint32 goid = 1;
  int32 start_loc = 2;
  int32 end_loc = 3;
  uint64 start_time = 4;
  uint64 end_time = 5;
  bytes err = 6;
  CompletionType completion = 7;
  repeated DBQuery queries = 8;
  StackTrace begin_stack = 9;
  StackTrace end_stack = 10;
}

message DBQuery {
  uint32 goid = 1;
  int32 call_loc = 2;
  uint64 start_time = 3;
  uint64 end_time = 4;
  bytes query = 5;
  bytes err = 6;
  StackTrace stack = 7;
}

message HTTPCall {
  uint64 span_id = 1;
  uint32 goid = 2;
  uint64 start_time = 3;
  uint64 end_time = 4;
  string method = 5;
  string url = 6;
  uint32 status_code = 7;
  bytes err = 8;
  uint64 body_closed_time = 9;
  repeated HTTPTraceEvent events = 10;
}

enum HTTPTraceEventCode {
  UNKNOWN = 0;
  GET_CONN = 1;
  GOT_CONN = 2;
  GOT_FIRST_RESPONSE_BYTE = 3;
  GOT_1XX_RESPONSE = 4;
  DNS_START = 5;
  DNS_DONE = 6;
  CONNECT_START = 7;
  CONNECT_DONE = 8;
  TLS_HANDSHAKE_START = 9;
  TLS_HANDSHAKE_DONE = 10;
  WROTE_HEADERS = 11;
  WROTE_REQUEST = 12;
  WAIT_100_CONTINUE = 13;
}

message HTTPTraceEvent {
  HTTPTraceEventCode code = 1;
  uint64 time = 2;
  oneof data {
    HTTPGetConnData get_conn = 3;
    HTTPGotConnData got_conn = 4;
    HTTPGot1xxResponseData got_1xx_response = 5;
    HTTPDNSStartData dns_start = 6;
    HTTPDNSDoneData dns_done = 7;
    HTTPConnectStartData connect_start = 8;
    HTTPConnectDoneData connect_done = 9;
    HTTPTLSHandshakeDoneData tls_handshake_done = 10;
    HTTPWroteRequestData wrote_request = 11;
  }
}

message HTTPGetConnData {
  string host_port = 1;
}

message HTTPGotConnData {
  bool reused = 1;
  bool was_idle = 2;
  int64 idle_duration_ns = 3;
}

message HTTPGot1xxResponseData {
  int32 code = 1;
}

message HTTPDNSStartData {
  string host = 1;
}

message HTTPDNSDoneData {
  bytes err = 1;
  repeated DNSAddr addrs = 2;
}

message DNSAddr {
  bytes ip = 1;
}

message HTTPConnectStartData {
  string network = 1;
  string addr = 2;
}

message HTTPConnectDoneData {
  string network = 1;
  string addr = 2;
  bytes err = 3;
}

message HTTPTLSHandshakeDoneData {
  bytes err = 1;
  uint32 tls_version = 2;
  uint32 cipher_suite = 3;
  string server_name = 4;
  string negotiated_protocol = 5;
}

message HTTPWroteRequestData {
  bytes err = 1;
}

message LogMessage {
  enum Level {
    DEBUG = 0;
    INFO = 1;
    ERROR = 2;
  }

  uint64 span_id = 1;
  uint32 goid = 2;
  uint64 time = 3;
  Level level = 4;
  string msg = 5;
  repeated LogField fields = 6;
  StackTrace stack = 7;
}

message LogField {
  string key = 1;

  oneof value {
    ErrWithStack error = 2;
    string str = 3;
    bool bool = 4;
    google.protobuf.Timestamp time = 5;
    int64 dur = 6;
    bytes uuid = 7;
    bytes json = 8;
    int64 int = 9;
    uint64 uint = 10;
    float float32 = 11;
    double float64 = 12;
  }
}

message ErrWithStack {
  string error = 1;
  StackTrace stack = 2;
}

message StackTrace {
  repeated StackFrame frames = 1;
}

message StackFrame {
  string filename = 1;
  string func = 2;
  int32 line = 3;
}
