// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: encore/engine/trace/trace.proto

package trace

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HTTPTraceEventCode int32

const (
	HTTPTraceEventCode_UNKNOWN                 HTTPTraceEventCode = 0
	HTTPTraceEventCode_GET_CONN                HTTPTraceEventCode = 1
	HTTPTraceEventCode_GOT_CONN                HTTPTraceEventCode = 2
	HTTPTraceEventCode_GOT_FIRST_RESPONSE_BYTE HTTPTraceEventCode = 3
	HTTPTraceEventCode_GOT_1XX_RESPONSE        HTTPTraceEventCode = 4
	HTTPTraceEventCode_DNS_START               HTTPTraceEventCode = 5
	HTTPTraceEventCode_DNS_DONE                HTTPTraceEventCode = 6
	HTTPTraceEventCode_CONNECT_START           HTTPTraceEventCode = 7
	HTTPTraceEventCode_CONNECT_DONE            HTTPTraceEventCode = 8
	HTTPTraceEventCode_TLS_HANDSHAKE_START     HTTPTraceEventCode = 9
	HTTPTraceEventCode_TLS_HANDSHAKE_DONE      HTTPTraceEventCode = 10
	HTTPTraceEventCode_WROTE_HEADERS           HTTPTraceEventCode = 11
	HTTPTraceEventCode_WROTE_REQUEST           HTTPTraceEventCode = 12
	HTTPTraceEventCode_WAIT_100_CONTINUE       HTTPTraceEventCode = 13
)

// Enum value maps for HTTPTraceEventCode.
var (
	HTTPTraceEventCode_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "GET_CONN",
		2:  "GOT_CONN",
		3:  "GOT_FIRST_RESPONSE_BYTE",
		4:  "GOT_1XX_RESPONSE",
		5:  "DNS_START",
		6:  "DNS_DONE",
		7:  "CONNECT_START",
		8:  "CONNECT_DONE",
		9:  "TLS_HANDSHAKE_START",
		10: "TLS_HANDSHAKE_DONE",
		11: "WROTE_HEADERS",
		12: "WROTE_REQUEST",
		13: "WAIT_100_CONTINUE",
	}
	HTTPTraceEventCode_value = map[string]int32{
		"UNKNOWN":                 0,
		"GET_CONN":                1,
		"GOT_CONN":                2,
		"GOT_FIRST_RESPONSE_BYTE": 3,
		"GOT_1XX_RESPONSE":        4,
		"DNS_START":               5,
		"DNS_DONE":                6,
		"CONNECT_START":           7,
		"CONNECT_DONE":            8,
		"TLS_HANDSHAKE_START":     9,
		"TLS_HANDSHAKE_DONE":      10,
		"WROTE_HEADERS":           11,
		"WROTE_REQUEST":           12,
		"WAIT_100_CONTINUE":       13,
	}
)

func (x HTTPTraceEventCode) Enum() *HTTPTraceEventCode {
	p := new(HTTPTraceEventCode)
	*p = x
	return p
}

func (x HTTPTraceEventCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTPTraceEventCode) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_engine_trace_trace_proto_enumTypes[0].Descriptor()
}

func (HTTPTraceEventCode) Type() protoreflect.EnumType {
	return &file_encore_engine_trace_trace_proto_enumTypes[0]
}

func (x HTTPTraceEventCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTPTraceEventCode.Descriptor instead.
func (HTTPTraceEventCode) EnumDescriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{0}
}

type Request_Type int32

const (
	Request_RPC        Request_Type = 0
	Request_AUTH       Request_Type = 1
	Request_PUBSUB_MSG Request_Type = 2
)

// Enum value maps for Request_Type.
var (
	Request_Type_name = map[int32]string{
		0: "RPC",
		1: "AUTH",
		2: "PUBSUB_MSG",
	}
	Request_Type_value = map[string]int32{
		"RPC":        0,
		"AUTH":       1,
		"PUBSUB_MSG": 2,
	}
)

func (x Request_Type) Enum() *Request_Type {
	p := new(Request_Type)
	*p = x
	return p
}

func (x Request_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Request_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_engine_trace_trace_proto_enumTypes[1].Descriptor()
}

func (Request_Type) Type() protoreflect.EnumType {
	return &file_encore_engine_trace_trace_proto_enumTypes[1]
}

func (x Request_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Request_Type.Descriptor instead.
func (Request_Type) EnumDescriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{1, 0}
}

type DBTransaction_CompletionType int32

const (
	DBTransaction_ROLLBACK DBTransaction_CompletionType = 0
	DBTransaction_COMMIT   DBTransaction_CompletionType = 1
)

// Enum value maps for DBTransaction_CompletionType.
var (
	DBTransaction_CompletionType_name = map[int32]string{
		0: "ROLLBACK",
		1: "COMMIT",
	}
	DBTransaction_CompletionType_value = map[string]int32{
		"ROLLBACK": 0,
		"COMMIT":   1,
	}
)

func (x DBTransaction_CompletionType) Enum() *DBTransaction_CompletionType {
	p := new(DBTransaction_CompletionType)
	*p = x
	return p
}

func (x DBTransaction_CompletionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBTransaction_CompletionType) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_engine_trace_trace_proto_enumTypes[2].Descriptor()
}

func (DBTransaction_CompletionType) Type() protoreflect.EnumType {
	return &file_encore_engine_trace_trace_proto_enumTypes[2]
}

func (x DBTransaction_CompletionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBTransaction_CompletionType.Descriptor instead.
func (DBTransaction_CompletionType) EnumDescriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{5, 0}
}

type CacheOp_Result int32

const (
	CacheOp_UNKNOWN     CacheOp_Result = 0
	CacheOp_OK          CacheOp_Result = 1
	CacheOp_NO_SUCH_KEY CacheOp_Result = 2
	CacheOp_CONFLICT    CacheOp_Result = 3
	CacheOp_ERR         CacheOp_Result = 4
)

// Enum value maps for CacheOp_Result.
var (
	CacheOp_Result_name = map[int32]string{
		0: "UNKNOWN",
		1: "OK",
		2: "NO_SUCH_KEY",
		3: "CONFLICT",
		4: "ERR",
	}
	CacheOp_Result_value = map[string]int32{
		"UNKNOWN":     0,
		"OK":          1,
		"NO_SUCH_KEY": 2,
		"CONFLICT":    3,
		"ERR":         4,
	}
)

func (x CacheOp_Result) Enum() *CacheOp_Result {
	p := new(CacheOp_Result)
	*p = x
	return p
}

func (x CacheOp_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CacheOp_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_engine_trace_trace_proto_enumTypes[3].Descriptor()
}

func (CacheOp_Result) Type() protoreflect.EnumType {
	return &file_encore_engine_trace_trace_proto_enumTypes[3]
}

func (x CacheOp_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CacheOp_Result.Descriptor instead.
func (CacheOp_Result) EnumDescriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{9, 0}
}

// Note: These values don't match the values used by the binary trace protocol,
// as these values are stored in persisted traces and therefore must maintain
// backwards compatibility. The binary trace protocol is versioned and doesn't
// have the same limitations.
type LogMessage_Level int32

const (
	LogMessage_DEBUG LogMessage_Level = 0
	LogMessage_INFO  LogMessage_Level = 1
	LogMessage_ERROR LogMessage_Level = 2
	LogMessage_WARN  LogMessage_Level = 3
	LogMessage_TRACE LogMessage_Level = 4
)

// Enum value maps for LogMessage_Level.
var (
	LogMessage_Level_name = map[int32]string{
		0: "DEBUG",
		1: "INFO",
		2: "ERROR",
		3: "WARN",
		4: "TRACE",
	}
	LogMessage_Level_value = map[string]int32{
		"DEBUG": 0,
		"INFO":  1,
		"ERROR": 2,
		"WARN":  3,
		"TRACE": 4,
	}
)

func (x LogMessage_Level) Enum() *LogMessage_Level {
	p := new(LogMessage_Level)
	*p = x
	return p
}

func (x LogMessage_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogMessage_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_engine_trace_trace_proto_enumTypes[4].Descriptor()
}

func (LogMessage_Level) Type() protoreflect.EnumType {
	return &file_encore_engine_trace_trace_proto_enumTypes[4]
}

func (x LogMessage_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogMessage_Level.Descriptor instead.
func (LogMessage_Level) EnumDescriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{23, 0}
}

type TraceID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	High uint64 `protobuf:"varint,1,opt,name=high,proto3" json:"high,omitempty"`
	Low  uint64 `protobuf:"varint,2,opt,name=low,proto3" json:"low,omitempty"`
}

func (x *TraceID) Reset() {
	*x = TraceID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceID) ProtoMessage() {}

func (x *TraceID) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceID.ProtoReflect.Descriptor instead.
func (*TraceID) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{0}
}

func (x *TraceID) GetHigh() uint64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *TraceID) GetLow() uint64 {
	if x != nil {
		return x.Low
	}
	return 0
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceId      *TraceID     `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId       uint64       `protobuf:"varint,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	ParentSpanId uint64       `protobuf:"varint,3,opt,name=parent_span_id,json=parentSpanId,proto3" json:"parent_span_id,omitempty"`
	Goid         uint32       `protobuf:"varint,4,opt,name=goid,proto3" json:"goid,omitempty"`
	StartTime    uint64       `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      uint64       `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	DefLoc       int32        `protobuf:"varint,8,opt,name=def_loc,json=defLoc,proto3" json:"def_loc,omitempty"`
	Err          []byte       `protobuf:"bytes,11,opt,name=err,proto3" json:"err,omitempty"`
	Events       []*Event     `protobuf:"bytes,12,rep,name=events,proto3" json:"events,omitempty"`
	Type         Request_Type `protobuf:"varint,14,opt,name=type,proto3,enum=encore.engine.trace.Request_Type" json:"type,omitempty"`
	ErrStack     *StackTrace  `protobuf:"bytes,15,opt,name=err_stack,json=errStack,proto3" json:"err_stack,omitempty"` // null if unavailable
	// abs_start_time is the absolute unix timestamp
	// (in nanosecond resolution) of when the request started.
	AbsStartTime uint64 `protobuf:"varint,16,opt,name=abs_start_time,json=absStartTime,proto3" json:"abs_start_time,omitempty"`
	ServiceName  string `protobuf:"bytes,17,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	EndpointName string `protobuf:"bytes,18,opt,name=endpoint_name,json=endpointName,proto3" json:"endpoint_name,omitempty"`
	// Fields set if Type == PUBSUB_MSG
	TopicName        string `protobuf:"bytes,19,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	SubscriptionName string `protobuf:"bytes,20,opt,name=subscription_name,json=subscriptionName,proto3" json:"subscription_name,omitempty"`
	MessageId        string `protobuf:"bytes,21,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Attempt          uint32 `protobuf:"varint,22,opt,name=attempt,proto3" json:"attempt,omitempty"`
	PublishTime      uint64 `protobuf:"varint,23,opt,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
	// Fields set if Type == RPC or AUTH
	Inputs             [][]byte          `protobuf:"bytes,9,rep,name=inputs,proto3" json:"inputs,omitempty"`    // Deprecated: use request_payload and path_params
	Outputs            [][]byte          `protobuf:"bytes,10,rep,name=outputs,proto3" json:"outputs,omitempty"` // Deprecated: use response_payload and uid
	Uid                string            `protobuf:"bytes,13,opt,name=uid,proto3" json:"uid,omitempty"`
	HttpMethod         string            `protobuf:"bytes,24,opt,name=http_method,json=httpMethod,proto3" json:"http_method,omitempty"`
	Path               string            `protobuf:"bytes,25,opt,name=path,proto3" json:"path,omitempty"`
	PathParams         []string          `protobuf:"bytes,26,rep,name=path_params,json=pathParams,proto3" json:"path_params,omitempty"`
	RequestPayload     []byte            `protobuf:"bytes,27,opt,name=request_payload,json=requestPayload,proto3" json:"request_payload,omitempty"`
	ResponsePayload    []byte            `protobuf:"bytes,28,opt,name=response_payload,json=responsePayload,proto3" json:"response_payload,omitempty"`
	RawRequestHeaders  map[string]string `protobuf:"bytes,29,rep,name=raw_request_headers,json=rawRequestHeaders,proto3" json:"raw_request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RawResponseHeaders map[string]string `protobuf:"bytes,30,rep,name=raw_response_headers,json=rawResponseHeaders,proto3" json:"raw_response_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{1}
}

func (x *Request) GetTraceId() *TraceID {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *Request) GetSpanId() uint64 {
	if x != nil {
		return x.SpanId
	}
	return 0
}

func (x *Request) GetParentSpanId() uint64 {
	if x != nil {
		return x.ParentSpanId
	}
	return 0
}

func (x *Request) GetGoid() uint32 {
	if x != nil {
		return x.Goid
	}
	return 0
}

func (x *Request) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Request) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Request) GetDefLoc() int32 {
	if x != nil {
		return x.DefLoc
	}
	return 0
}

func (x *Request) GetErr() []byte {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *Request) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Request) GetType() Request_Type {
	if x != nil {
		return x.Type
	}
	return Request_RPC
}

func (x *Request) GetErrStack() *StackTrace {
	if x != nil {
		return x.ErrStack
	}
	return nil
}

func (x *Request) GetAbsStartTime() uint64 {
	if x != nil {
		return x.AbsStartTime
	}
	return 0
}

func (x *Request) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Request) GetEndpointName() string {
	if x != nil {
		return x.EndpointName
	}
	return ""
}

func (x *Request) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *Request) GetSubscriptionName() string {
	if x != nil {
		return x.SubscriptionName
	}
	return ""
}

func (x *Request) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *Request) GetAttempt() uint32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

func (x *Request) GetPublishTime() uint64 {
	if x != nil {
		return x.PublishTime
	}
	return 0
}

func (x *Request) GetInputs() [][]byte {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Request) GetOutputs() [][]byte {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *Request) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Request) GetHttpMethod() string {
	if x != nil {
		return x.HttpMethod
	}
	return ""
}

func (x *Request) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Request) GetPathParams() []string {
	if x != nil {
		return x.PathParams
	}
	return nil
}

func (x *Request) GetRequestPayload() []byte {
	if x != nil {
		return x.RequestPayload
	}
	return nil
}

func (x *Request) GetResponsePayload() []byte {
	if x != nil {
		return x.ResponsePayload
	}
	return nil
}

func (x *Request) GetRawRequestHeaders() map[string]string {
	if x != nil {
		return x.RawRequestHeaders
	}
	return nil
}

func (x *Request) GetRawResponseHeaders() map[string]string {
	if x != nil {
		return x.RawResponseHeaders
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*Event_Rpc
	//	*Event_Tx
	//	*Event_Query
	//	*Event_Goroutine
	//	*Event_Http
	//	*Event_Log
	//	*Event_PublishedMsg
	//	*Event_ServiceInit
	//	*Event_Cache
	//	*Event_BodyStream
	Data isEvent_Data `protobuf_oneof:"data"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{2}
}

func (m *Event) GetData() isEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Event) GetRpc() *RPCCall {
	if x, ok := x.GetData().(*Event_Rpc); ok {
		return x.Rpc
	}
	return nil
}

func (x *Event) GetTx() *DBTransaction {
	if x, ok := x.GetData().(*Event_Tx); ok {
		return x.Tx
	}
	return nil
}

func (x *Event) GetQuery() *DBQuery {
	if x, ok := x.GetData().(*Event_Query); ok {
		return x.Query
	}
	return nil
}

func (x *Event) GetGoroutine() *Goroutine {
	if x, ok := x.GetData().(*Event_Goroutine); ok {
		return x.Goroutine
	}
	return nil
}

func (x *Event) GetHttp() *HTTPCall {
	if x, ok := x.GetData().(*Event_Http); ok {
		return x.Http
	}
	return nil
}

func (x *Event) GetLog() *LogMessage {
	if x, ok := x.GetData().(*Event_Log); ok {
		return x.Log
	}
	return nil
}

func (x *Event) GetPublishedMsg() *PubsubMsgPublished {
	if x, ok := x.GetData().(*Event_PublishedMsg); ok {
		return x.PublishedMsg
	}
	return nil
}

func (x *Event) GetServiceInit() *ServiceInit {
	if x, ok := x.GetData().(*Event_ServiceInit); ok {
		return x.ServiceInit
	}
	return nil
}

func (x *Event) GetCache() *CacheOp {
	if x, ok := x.GetData().(*Event_Cache); ok {
		return x.Cache
	}
	return nil
}

func (x *Event) GetBodyStream() *BodyStream {
	if x, ok := x.GetData().(*Event_BodyStream); ok {
		return x.BodyStream
	}
	return nil
}

type isEvent_Data interface {
	isEvent_Data()
}

type Event_Rpc struct {
	Rpc *RPCCall `protobuf:"bytes,1,opt,name=rpc,proto3,oneof"`
}

type Event_Tx struct {
	Tx *DBTransaction `protobuf:"bytes,2,opt,name=tx,proto3,oneof"`
}

type Event_Query struct {
	Query *DBQuery `protobuf:"bytes,3,opt,name=query,proto3,oneof"`
}

type Event_Goroutine struct {
	Goroutine *Goroutine `protobuf:"bytes,4,opt,name=goroutine,proto3,oneof"`
}

type Event_Http struct {
	Http *HTTPCall `protobuf:"bytes,5,opt,name=http,proto3,oneof"`
}

type Event_Log struct {
	Log *LogMessage `protobuf:"bytes,6,opt,name=log,proto3,oneof"`
}

type Event_PublishedMsg struct {
	PublishedMsg *PubsubMsgPublished `protobuf:"bytes,7,opt,name=publishedMsg,proto3,oneof"`
}

type Event_ServiceInit struct {
	ServiceInit *ServiceInit `protobuf:"bytes,8,opt,name=service_init,json=serviceInit,proto3,oneof"`
}

type Event_Cache struct {
	Cache *CacheOp `protobuf:"bytes,9,opt,name=cache,proto3,oneof"`
}

type Event_BodyStream struct {
	BodyStream *BodyStream `protobuf:"bytes,10,opt,name=body_stream,json=bodyStream,proto3,oneof"`
}

func (*Event_Rpc) isEvent_Data() {}

func (*Event_Tx) isEvent_Data() {}

func (*Event_Query) isEvent_Data() {}

func (*Event_Goroutine) isEvent_Data() {}

func (*Event_Http) isEvent_Data() {}

func (*Event_Log) isEvent_Data() {}

func (*Event_PublishedMsg) isEvent_Data() {}

func (*Event_ServiceInit) isEvent_Data() {}

func (*Event_Cache) isEvent_Data() {}

func (*Event_BodyStream) isEvent_Data() {}

type RPCCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpanId    uint64      `protobuf:"varint,1,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	Goid      uint32      `protobuf:"varint,2,opt,name=goid,proto3" json:"goid,omitempty"`
	DefLoc    int32       `protobuf:"varint,4,opt,name=def_loc,json=defLoc,proto3" json:"def_loc,omitempty"`
	StartTime uint64      `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   uint64      `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Err       []byte      `protobuf:"bytes,7,opt,name=err,proto3" json:"err,omitempty"`
	Stack     *StackTrace `protobuf:"bytes,8,opt,name=stack,proto3" json:"stack,omitempty"` // where it was called (null if unavailable)
}

func (x *RPCCall) Reset() {
	*x = RPCCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPCCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCCall) ProtoMessage() {}

func (x *RPCCall) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCCall.ProtoReflect.Descriptor instead.
func (*RPCCall) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{3}
}

func (x *RPCCall) GetSpanId() uint64 {
	if x != nil {
		return x.SpanId
	}
	return 0
}

func (x *RPCCall) GetGoid() uint32 {
	if x != nil {
		return x.Goid
	}
	return 0
}

func (x *RPCCall) GetDefLoc() int32 {
	if x != nil {
		return x.DefLoc
	}
	return 0
}

func (x *RPCCall) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RPCCall) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RPCCall) GetErr() []byte {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *RPCCall) GetStack() *StackTrace {
	if x != nil {
		return x.Stack
	}
	return nil
}

type Goroutine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Goid      uint32 `protobuf:"varint,1,opt,name=goid,proto3" json:"goid,omitempty"`
	StartTime uint64 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   uint64 `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *Goroutine) Reset() {
	*x = Goroutine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Goroutine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Goroutine) ProtoMessage() {}

func (x *Goroutine) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Goroutine.ProtoReflect.Descriptor instead.
func (*Goroutine) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{4}
}

func (x *Goroutine) GetGoid() uint32 {
	if x != nil {
		return x.Goid
	}
	return 0
}

func (x *Goroutine) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Goroutine) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type DBTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Goid       uint32                       `protobuf:"varint,1,opt,name=goid,proto3" json:"goid,omitempty"`
	StartTime  uint64                       `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime    uint64                       `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Err        []byte                       `protobuf:"bytes,6,opt,name=err,proto3" json:"err,omitempty"`
	Completion DBTransaction_CompletionType `protobuf:"varint,7,opt,name=completion,proto3,enum=encore.engine.trace.DBTransaction_CompletionType" json:"completion,omitempty"`
	Queries    []*DBQuery                   `protobuf:"bytes,8,rep,name=queries,proto3" json:"queries,omitempty"`
	BeginStack *StackTrace                  `protobuf:"bytes,9,opt,name=begin_stack,json=beginStack,proto3" json:"begin_stack,omitempty"` // null if unavailable
	EndStack   *StackTrace                  `protobuf:"bytes,10,opt,name=end_stack,json=endStack,proto3" json:"end_stack,omitempty"`      // null if unavailable
}

func (x *DBTransaction) Reset() {
	*x = DBTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBTransaction) ProtoMessage() {}

func (x *DBTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBTransaction.ProtoReflect.Descriptor instead.
func (*DBTransaction) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{5}
}

func (x *DBTransaction) GetGoid() uint32 {
	if x != nil {
		return x.Goid
	}
	return 0
}

func (x *DBTransaction) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DBTransaction) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *DBTransaction) GetErr() []byte {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *DBTransaction) GetCompletion() DBTransaction_CompletionType {
	if x != nil {
		return x.Completion
	}
	return DBTransaction_ROLLBACK
}

func (x *DBTransaction) GetQueries() []*DBQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *DBTransaction) GetBeginStack() *StackTrace {
	if x != nil {
		return x.BeginStack
	}
	return nil
}

func (x *DBTransaction) GetEndStack() *StackTrace {
	if x != nil {
		return x.EndStack
	}
	return nil
}

type DBQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Goid      uint32      `protobuf:"varint,1,opt,name=goid,proto3" json:"goid,omitempty"`
	StartTime uint64      `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   uint64      `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Query     []byte      `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	Err       []byte      `protobuf:"bytes,6,opt,name=err,proto3" json:"err,omitempty"`
	Stack     *StackTrace `protobuf:"bytes,7,opt,name=stack,proto3" json:"stack,omitempty"` // null if unavailable
}

func (x *DBQuery) Reset() {
	*x = DBQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBQuery) ProtoMessage() {}

func (x *DBQuery) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBQuery.ProtoReflect.Descriptor instead.
func (*DBQuery) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{6}
}

func (x *DBQuery) GetGoid() uint32 {
	if x != nil {
		return x.Goid
	}
	return 0
}

func (x *DBQuery) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *DBQuery) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *DBQuery) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *DBQuery) GetErr() []byte {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *DBQuery) GetStack() *StackTrace {
	if x != nil {
		return x.Stack
	}
	return nil
}

type PubsubMsgPublished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Goid      uint64      `protobuf:"varint,1,opt,name=goid,proto3" json:"goid,omitempty"`
	StartTime uint64      `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   uint64      `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Topic     string      `protobuf:"bytes,5,opt,name=topic,proto3" json:"topic,omitempty"`
	Message   []byte      `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	MessageId string      `protobuf:"bytes,7,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Err       []byte      `protobuf:"bytes,8,opt,name=err,proto3" json:"err,omitempty"`
	Stack     *StackTrace `protobuf:"bytes,9,opt,name=stack,proto3" json:"stack,omitempty"`
}

func (x *PubsubMsgPublished) Reset() {
	*x = PubsubMsgPublished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubsubMsgPublished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubsubMsgPublished) ProtoMessage() {}

func (x *PubsubMsgPublished) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubsubMsgPublished.ProtoReflect.Descriptor instead.
func (*PubsubMsgPublished) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{7}
}

func (x *PubsubMsgPublished) GetGoid() uint64 {
	if x != nil {
		return x.Goid
	}
	return 0
}

func (x *PubsubMsgPublished) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PubsubMsgPublished) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PubsubMsgPublished) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PubsubMsgPublished) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *PubsubMsgPublished) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *PubsubMsgPublished) GetErr() []byte {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *PubsubMsgPublished) GetStack() *StackTrace {
	if x != nil {
		return x.Stack
	}
	return nil
}

type ServiceInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Goid      uint64      `protobuf:"varint,1,opt,name=goid,proto3" json:"goid,omitempty"`
	DefLoc    int32       `protobuf:"varint,2,opt,name=def_loc,json=defLoc,proto3" json:"def_loc,omitempty"`
	StartTime uint64      `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   uint64      `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Service   string      `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	Err       []byte      `protobuf:"bytes,6,opt,name=err,proto3" json:"err,omitempty"`
	ErrStack  *StackTrace `protobuf:"bytes,7,opt,name=err_stack,json=errStack,proto3" json:"err_stack,omitempty"` // null if not an error
}

func (x *ServiceInit) Reset() {
	*x = ServiceInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInit) ProtoMessage() {}

func (x *ServiceInit) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInit.ProtoReflect.Descriptor instead.
func (*ServiceInit) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{8}
}

func (x *ServiceInit) GetGoid() uint64 {
	if x != nil {
		return x.Goid
	}
	return 0
}

func (x *ServiceInit) GetDefLoc() int32 {
	if x != nil {
		return x.DefLoc
	}
	return 0
}

func (x *ServiceInit) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ServiceInit) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ServiceInit) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ServiceInit) GetErr() []byte {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *ServiceInit) GetErrStack() *StackTrace {
	if x != nil {
		return x.ErrStack
	}
	return nil
}

type CacheOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Goid      uint32         `protobuf:"varint,1,opt,name=goid,proto3" json:"goid,omitempty"`
	DefLoc    int32          `protobuf:"varint,2,opt,name=def_loc,json=defLoc,proto3" json:"def_loc,omitempty"`
	StartTime uint64         `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   uint64         `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Operation string         `protobuf:"bytes,5,opt,name=operation,proto3" json:"operation,omitempty"`
	Keys      []string       `protobuf:"bytes,6,rep,name=keys,proto3" json:"keys,omitempty"`
	Inputs    [][]byte       `protobuf:"bytes,7,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs   [][]byte       `protobuf:"bytes,8,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Stack     *StackTrace    `protobuf:"bytes,9,opt,name=stack,proto3" json:"stack,omitempty"` // null if unavailable
	Err       []byte         `protobuf:"bytes,10,opt,name=err,proto3" json:"err,omitempty"`    // set iff result == ERR
	Write     bool           `protobuf:"varint,11,opt,name=write,proto3" json:"write,omitempty"`
	Result    CacheOp_Result `protobuf:"varint,12,opt,name=result,proto3,enum=encore.engine.trace.CacheOp_Result" json:"result,omitempty"`
}

func (x *CacheOp) Reset() {
	*x = CacheOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheOp) ProtoMessage() {}

func (x *CacheOp) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheOp.ProtoReflect.Descriptor instead.
func (*CacheOp) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{9}
}

func (x *CacheOp) GetGoid() uint32 {
	if x != nil {
		return x.Goid
	}
	return 0
}

func (x *CacheOp) GetDefLoc() int32 {
	if x != nil {
		return x.DefLoc
	}
	return 0
}

func (x *CacheOp) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *CacheOp) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *CacheOp) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *CacheOp) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *CacheOp) GetInputs() [][]byte {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *CacheOp) GetOutputs() [][]byte {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *CacheOp) GetStack() *StackTrace {
	if x != nil {
		return x.Stack
	}
	return nil
}

func (x *CacheOp) GetErr() []byte {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *CacheOp) GetWrite() bool {
	if x != nil {
		return x.Write
	}
	return false
}

func (x *CacheOp) GetResult() CacheOp_Result {
	if x != nil {
		return x.Result
	}
	return CacheOp_UNKNOWN
}

type BodyStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsResponse bool   `protobuf:"varint,1,opt,name=is_response,json=isResponse,proto3" json:"is_response,omitempty"`
	Overflowed bool   `protobuf:"varint,2,opt,name=overflowed,proto3" json:"overflowed,omitempty"`
	Data       []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BodyStream) Reset() {
	*x = BodyStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyStream) ProtoMessage() {}

func (x *BodyStream) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyStream.ProtoReflect.Descriptor instead.
func (*BodyStream) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{10}
}

func (x *BodyStream) GetIsResponse() bool {
	if x != nil {
		return x.IsResponse
	}
	return false
}

func (x *BodyStream) GetOverflowed() bool {
	if x != nil {
		return x.Overflowed
	}
	return false
}

func (x *BodyStream) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type HTTPCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpanId         uint64            `protobuf:"varint,1,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	Goid           uint32            `protobuf:"varint,2,opt,name=goid,proto3" json:"goid,omitempty"`
	StartTime      uint64            `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        uint64            `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Method         string            `protobuf:"bytes,5,opt,name=method,proto3" json:"method,omitempty"`
	Url            string            `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	StatusCode     uint32            `protobuf:"varint,7,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Err            []byte            `protobuf:"bytes,8,opt,name=err,proto3" json:"err,omitempty"`
	BodyClosedTime uint64            `protobuf:"varint,9,opt,name=body_closed_time,json=bodyClosedTime,proto3" json:"body_closed_time,omitempty"`
	Events         []*HTTPTraceEvent `protobuf:"bytes,10,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *HTTPCall) Reset() {
	*x = HTTPCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPCall) ProtoMessage() {}

func (x *HTTPCall) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPCall.ProtoReflect.Descriptor instead.
func (*HTTPCall) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{11}
}

func (x *HTTPCall) GetSpanId() uint64 {
	if x != nil {
		return x.SpanId
	}
	return 0
}

func (x *HTTPCall) GetGoid() uint32 {
	if x != nil {
		return x.Goid
	}
	return 0
}

func (x *HTTPCall) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *HTTPCall) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *HTTPCall) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HTTPCall) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HTTPCall) GetStatusCode() uint32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *HTTPCall) GetErr() []byte {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *HTTPCall) GetBodyClosedTime() uint64 {
	if x != nil {
		return x.BodyClosedTime
	}
	return 0
}

func (x *HTTPCall) GetEvents() []*HTTPTraceEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type HTTPTraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code HTTPTraceEventCode `protobuf:"varint,1,opt,name=code,proto3,enum=encore.engine.trace.HTTPTraceEventCode" json:"code,omitempty"`
	Time uint64             `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	// Types that are assignable to Data:
	//	*HTTPTraceEvent_GetConn
	//	*HTTPTraceEvent_GotConn
	//	*HTTPTraceEvent_Got_1XxResponse
	//	*HTTPTraceEvent_DnsStart
	//	*HTTPTraceEvent_DnsDone
	//	*HTTPTraceEvent_ConnectStart
	//	*HTTPTraceEvent_ConnectDone
	//	*HTTPTraceEvent_TlsHandshakeDone
	//	*HTTPTraceEvent_WroteRequest
	Data isHTTPTraceEvent_Data `protobuf_oneof:"data"`
}

func (x *HTTPTraceEvent) Reset() {
	*x = HTTPTraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPTraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPTraceEvent) ProtoMessage() {}

func (x *HTTPTraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPTraceEvent.ProtoReflect.Descriptor instead.
func (*HTTPTraceEvent) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{12}
}

func (x *HTTPTraceEvent) GetCode() HTTPTraceEventCode {
	if x != nil {
		return x.Code
	}
	return HTTPTraceEventCode_UNKNOWN
}

func (x *HTTPTraceEvent) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (m *HTTPTraceEvent) GetData() isHTTPTraceEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *HTTPTraceEvent) GetGetConn() *HTTPGetConnData {
	if x, ok := x.GetData().(*HTTPTraceEvent_GetConn); ok {
		return x.GetConn
	}
	return nil
}

func (x *HTTPTraceEvent) GetGotConn() *HTTPGotConnData {
	if x, ok := x.GetData().(*HTTPTraceEvent_GotConn); ok {
		return x.GotConn
	}
	return nil
}

func (x *HTTPTraceEvent) GetGot_1XxResponse() *HTTPGot1XxResponseData {
	if x, ok := x.GetData().(*HTTPTraceEvent_Got_1XxResponse); ok {
		return x.Got_1XxResponse
	}
	return nil
}

func (x *HTTPTraceEvent) GetDnsStart() *HTTPDNSStartData {
	if x, ok := x.GetData().(*HTTPTraceEvent_DnsStart); ok {
		return x.DnsStart
	}
	return nil
}

func (x *HTTPTraceEvent) GetDnsDone() *HTTPDNSDoneData {
	if x, ok := x.GetData().(*HTTPTraceEvent_DnsDone); ok {
		return x.DnsDone
	}
	return nil
}

func (x *HTTPTraceEvent) GetConnectStart() *HTTPConnectStartData {
	if x, ok := x.GetData().(*HTTPTraceEvent_ConnectStart); ok {
		return x.ConnectStart
	}
	return nil
}

func (x *HTTPTraceEvent) GetConnectDone() *HTTPConnectDoneData {
	if x, ok := x.GetData().(*HTTPTraceEvent_ConnectDone); ok {
		return x.ConnectDone
	}
	return nil
}

func (x *HTTPTraceEvent) GetTlsHandshakeDone() *HTTPTLSHandshakeDoneData {
	if x, ok := x.GetData().(*HTTPTraceEvent_TlsHandshakeDone); ok {
		return x.TlsHandshakeDone
	}
	return nil
}

func (x *HTTPTraceEvent) GetWroteRequest() *HTTPWroteRequestData {
	if x, ok := x.GetData().(*HTTPTraceEvent_WroteRequest); ok {
		return x.WroteRequest
	}
	return nil
}

type isHTTPTraceEvent_Data interface {
	isHTTPTraceEvent_Data()
}

type HTTPTraceEvent_GetConn struct {
	GetConn *HTTPGetConnData `protobuf:"bytes,3,opt,name=get_conn,json=getConn,proto3,oneof"`
}

type HTTPTraceEvent_GotConn struct {
	GotConn *HTTPGotConnData `protobuf:"bytes,4,opt,name=got_conn,json=gotConn,proto3,oneof"`
}

type HTTPTraceEvent_Got_1XxResponse struct {
	Got_1XxResponse *HTTPGot1XxResponseData `protobuf:"bytes,5,opt,name=got_1xx_response,json=got1xxResponse,proto3,oneof"`
}

type HTTPTraceEvent_DnsStart struct {
	DnsStart *HTTPDNSStartData `protobuf:"bytes,6,opt,name=dns_start,json=dnsStart,proto3,oneof"`
}

type HTTPTraceEvent_DnsDone struct {
	DnsDone *HTTPDNSDoneData `protobuf:"bytes,7,opt,name=dns_done,json=dnsDone,proto3,oneof"`
}

type HTTPTraceEvent_ConnectStart struct {
	ConnectStart *HTTPConnectStartData `protobuf:"bytes,8,opt,name=connect_start,json=connectStart,proto3,oneof"`
}

type HTTPTraceEvent_ConnectDone struct {
	ConnectDone *HTTPConnectDoneData `protobuf:"bytes,9,opt,name=connect_done,json=connectDone,proto3,oneof"`
}

type HTTPTraceEvent_TlsHandshakeDone struct {
	TlsHandshakeDone *HTTPTLSHandshakeDoneData `protobuf:"bytes,10,opt,name=tls_handshake_done,json=tlsHandshakeDone,proto3,oneof"`
}

type HTTPTraceEvent_WroteRequest struct {
	WroteRequest *HTTPWroteRequestData `protobuf:"bytes,11,opt,name=wrote_request,json=wroteRequest,proto3,oneof"`
}

func (*HTTPTraceEvent_GetConn) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_GotConn) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_Got_1XxResponse) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_DnsStart) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_DnsDone) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_ConnectStart) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_ConnectDone) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_TlsHandshakeDone) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_WroteRequest) isHTTPTraceEvent_Data() {}

type HTTPGetConnData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostPort string `protobuf:"bytes,1,opt,name=host_port,json=hostPort,proto3" json:"host_port,omitempty"`
}

func (x *HTTPGetConnData) Reset() {
	*x = HTTPGetConnData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPGetConnData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPGetConnData) ProtoMessage() {}

func (x *HTTPGetConnData) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPGetConnData.ProtoReflect.Descriptor instead.
func (*HTTPGetConnData) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{13}
}

func (x *HTTPGetConnData) GetHostPort() string {
	if x != nil {
		return x.HostPort
	}
	return ""
}

type HTTPGotConnData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reused         bool  `protobuf:"varint,1,opt,name=reused,proto3" json:"reused,omitempty"`
	WasIdle        bool  `protobuf:"varint,2,opt,name=was_idle,json=wasIdle,proto3" json:"was_idle,omitempty"`
	IdleDurationNs int64 `protobuf:"varint,3,opt,name=idle_duration_ns,json=idleDurationNs,proto3" json:"idle_duration_ns,omitempty"`
}

func (x *HTTPGotConnData) Reset() {
	*x = HTTPGotConnData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPGotConnData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPGotConnData) ProtoMessage() {}

func (x *HTTPGotConnData) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPGotConnData.ProtoReflect.Descriptor instead.
func (*HTTPGotConnData) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{14}
}

func (x *HTTPGotConnData) GetReused() bool {
	if x != nil {
		return x.Reused
	}
	return false
}

func (x *HTTPGotConnData) GetWasIdle() bool {
	if x != nil {
		return x.WasIdle
	}
	return false
}

func (x *HTTPGotConnData) GetIdleDurationNs() int64 {
	if x != nil {
		return x.IdleDurationNs
	}
	return 0
}

type HTTPGot1XxResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *HTTPGot1XxResponseData) Reset() {
	*x = HTTPGot1XxResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPGot1XxResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPGot1XxResponseData) ProtoMessage() {}

func (x *HTTPGot1XxResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPGot1XxResponseData.ProtoReflect.Descriptor instead.
func (*HTTPGot1XxResponseData) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{15}
}

func (x *HTTPGot1XxResponseData) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type HTTPDNSStartData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *HTTPDNSStartData) Reset() {
	*x = HTTPDNSStartData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPDNSStartData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPDNSStartData) ProtoMessage() {}

func (x *HTTPDNSStartData) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPDNSStartData.ProtoReflect.Descriptor instead.
func (*HTTPDNSStartData) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{16}
}

func (x *HTTPDNSStartData) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type HTTPDNSDoneData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err   []byte     `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Addrs []*DNSAddr `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (x *HTTPDNSDoneData) Reset() {
	*x = HTTPDNSDoneData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPDNSDoneData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPDNSDoneData) ProtoMessage() {}

func (x *HTTPDNSDoneData) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPDNSDoneData.ProtoReflect.Descriptor instead.
func (*HTTPDNSDoneData) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{17}
}

func (x *HTTPDNSDoneData) GetErr() []byte {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *HTTPDNSDoneData) GetAddrs() []*DNSAddr {
	if x != nil {
		return x.Addrs
	}
	return nil
}

type DNSAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip []byte `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *DNSAddr) Reset() {
	*x = DNSAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSAddr) ProtoMessage() {}

func (x *DNSAddr) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSAddr.ProtoReflect.Descriptor instead.
func (*DNSAddr) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{18}
}

func (x *DNSAddr) GetIp() []byte {
	if x != nil {
		return x.Ip
	}
	return nil
}

type HTTPConnectStartData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr    string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *HTTPConnectStartData) Reset() {
	*x = HTTPConnectStartData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPConnectStartData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPConnectStartData) ProtoMessage() {}

func (x *HTTPConnectStartData) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPConnectStartData.ProtoReflect.Descriptor instead.
func (*HTTPConnectStartData) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{19}
}

func (x *HTTPConnectStartData) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *HTTPConnectStartData) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type HTTPConnectDoneData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr    string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Err     []byte `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *HTTPConnectDoneData) Reset() {
	*x = HTTPConnectDoneData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPConnectDoneData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPConnectDoneData) ProtoMessage() {}

func (x *HTTPConnectDoneData) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPConnectDoneData.ProtoReflect.Descriptor instead.
func (*HTTPConnectDoneData) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{20}
}

func (x *HTTPConnectDoneData) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *HTTPConnectDoneData) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *HTTPConnectDoneData) GetErr() []byte {
	if x != nil {
		return x.Err
	}
	return nil
}

type HTTPTLSHandshakeDoneData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err                []byte `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	TlsVersion         uint32 `protobuf:"varint,2,opt,name=tls_version,json=tlsVersion,proto3" json:"tls_version,omitempty"`
	CipherSuite        uint32 `protobuf:"varint,3,opt,name=cipher_suite,json=cipherSuite,proto3" json:"cipher_suite,omitempty"`
	ServerName         string `protobuf:"bytes,4,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	NegotiatedProtocol string `protobuf:"bytes,5,opt,name=negotiated_protocol,json=negotiatedProtocol,proto3" json:"negotiated_protocol,omitempty"`
}

func (x *HTTPTLSHandshakeDoneData) Reset() {
	*x = HTTPTLSHandshakeDoneData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPTLSHandshakeDoneData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPTLSHandshakeDoneData) ProtoMessage() {}

func (x *HTTPTLSHandshakeDoneData) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPTLSHandshakeDoneData.ProtoReflect.Descriptor instead.
func (*HTTPTLSHandshakeDoneData) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{21}
}

func (x *HTTPTLSHandshakeDoneData) GetErr() []byte {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *HTTPTLSHandshakeDoneData) GetTlsVersion() uint32 {
	if x != nil {
		return x.TlsVersion
	}
	return 0
}

func (x *HTTPTLSHandshakeDoneData) GetCipherSuite() uint32 {
	if x != nil {
		return x.CipherSuite
	}
	return 0
}

func (x *HTTPTLSHandshakeDoneData) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *HTTPTLSHandshakeDoneData) GetNegotiatedProtocol() string {
	if x != nil {
		return x.NegotiatedProtocol
	}
	return ""
}

type HTTPWroteRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err []byte `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *HTTPWroteRequestData) Reset() {
	*x = HTTPWroteRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPWroteRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPWroteRequestData) ProtoMessage() {}

func (x *HTTPWroteRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPWroteRequestData.ProtoReflect.Descriptor instead.
func (*HTTPWroteRequestData) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{22}
}

func (x *HTTPWroteRequestData) GetErr() []byte {
	if x != nil {
		return x.Err
	}
	return nil
}

type LogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpanId uint64           `protobuf:"varint,1,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	Goid   uint32           `protobuf:"varint,2,opt,name=goid,proto3" json:"goid,omitempty"`
	Time   uint64           `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Level  LogMessage_Level `protobuf:"varint,4,opt,name=level,proto3,enum=encore.engine.trace.LogMessage_Level" json:"level,omitempty"`
	Msg    string           `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	Fields []*LogField      `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
	Stack  *StackTrace      `protobuf:"bytes,7,opt,name=stack,proto3" json:"stack,omitempty"` // null if unavailable
}

func (x *LogMessage) Reset() {
	*x = LogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessage) ProtoMessage() {}

func (x *LogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessage.ProtoReflect.Descriptor instead.
func (*LogMessage) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{23}
}

func (x *LogMessage) GetSpanId() uint64 {
	if x != nil {
		return x.SpanId
	}
	return 0
}

func (x *LogMessage) GetGoid() uint32 {
	if x != nil {
		return x.Goid
	}
	return 0
}

func (x *LogMessage) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *LogMessage) GetLevel() LogMessage_Level {
	if x != nil {
		return x.Level
	}
	return LogMessage_DEBUG
}

func (x *LogMessage) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *LogMessage) GetFields() []*LogField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *LogMessage) GetStack() *StackTrace {
	if x != nil {
		return x.Stack
	}
	return nil
}

type LogField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are assignable to Value:
	//	*LogField_ErrorWithoutStack
	//	*LogField_ErrorWithStack
	//	*LogField_Str
	//	*LogField_Bool
	//	*LogField_Time
	//	*LogField_Dur
	//	*LogField_Uuid
	//	*LogField_Json
	//	*LogField_Int
	//	*LogField_Uint
	//	*LogField_Float32
	//	*LogField_Float64
	Value isLogField_Value `protobuf_oneof:"value"`
}

func (x *LogField) Reset() {
	*x = LogField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogField) ProtoMessage() {}

func (x *LogField) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogField.ProtoReflect.Descriptor instead.
func (*LogField) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{24}
}

func (x *LogField) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (m *LogField) GetValue() isLogField_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *LogField) GetErrorWithoutStack() string {
	if x, ok := x.GetValue().(*LogField_ErrorWithoutStack); ok {
		return x.ErrorWithoutStack
	}
	return ""
}

func (x *LogField) GetErrorWithStack() *ErrWithStack {
	if x, ok := x.GetValue().(*LogField_ErrorWithStack); ok {
		return x.ErrorWithStack
	}
	return nil
}

func (x *LogField) GetStr() string {
	if x, ok := x.GetValue().(*LogField_Str); ok {
		return x.Str
	}
	return ""
}

func (x *LogField) GetBool() bool {
	if x, ok := x.GetValue().(*LogField_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *LogField) GetTime() *timestamppb.Timestamp {
	if x, ok := x.GetValue().(*LogField_Time); ok {
		return x.Time
	}
	return nil
}

func (x *LogField) GetDur() int64 {
	if x, ok := x.GetValue().(*LogField_Dur); ok {
		return x.Dur
	}
	return 0
}

func (x *LogField) GetUuid() []byte {
	if x, ok := x.GetValue().(*LogField_Uuid); ok {
		return x.Uuid
	}
	return nil
}

func (x *LogField) GetJson() []byte {
	if x, ok := x.GetValue().(*LogField_Json); ok {
		return x.Json
	}
	return nil
}

func (x *LogField) GetInt() int64 {
	if x, ok := x.GetValue().(*LogField_Int); ok {
		return x.Int
	}
	return 0
}

func (x *LogField) GetUint() uint64 {
	if x, ok := x.GetValue().(*LogField_Uint); ok {
		return x.Uint
	}
	return 0
}

func (x *LogField) GetFloat32() float32 {
	if x, ok := x.GetValue().(*LogField_Float32); ok {
		return x.Float32
	}
	return 0
}

func (x *LogField) GetFloat64() float64 {
	if x, ok := x.GetValue().(*LogField_Float64); ok {
		return x.Float64
	}
	return 0
}

type isLogField_Value interface {
	isLogField_Value()
}

type LogField_ErrorWithoutStack struct {
	ErrorWithoutStack string `protobuf:"bytes,2,opt,name=error_without_stack,json=errorWithoutStack,proto3,oneof"` // deprecated: use error_with_stack
}

type LogField_ErrorWithStack struct {
	ErrorWithStack *ErrWithStack `protobuf:"bytes,13,opt,name=error_with_stack,json=errorWithStack,proto3,oneof"`
}

type LogField_Str struct {
	Str string `protobuf:"bytes,3,opt,name=str,proto3,oneof"`
}

type LogField_Bool struct {
	Bool bool `protobuf:"varint,4,opt,name=bool,proto3,oneof"`
}

type LogField_Time struct {
	Time *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=time,proto3,oneof"`
}

type LogField_Dur struct {
	Dur int64 `protobuf:"varint,6,opt,name=dur,proto3,oneof"`
}

type LogField_Uuid struct {
	Uuid []byte `protobuf:"bytes,7,opt,name=uuid,proto3,oneof"`
}

type LogField_Json struct {
	Json []byte `protobuf:"bytes,8,opt,name=json,proto3,oneof"`
}

type LogField_Int struct {
	Int int64 `protobuf:"varint,9,opt,name=int,proto3,oneof"`
}

type LogField_Uint struct {
	Uint uint64 `protobuf:"varint,10,opt,name=uint,proto3,oneof"`
}

type LogField_Float32 struct {
	Float32 float32 `protobuf:"fixed32,11,opt,name=float32,proto3,oneof"`
}

type LogField_Float64 struct {
	Float64 float64 `protobuf:"fixed64,12,opt,name=float64,proto3,oneof"`
}

func (*LogField_ErrorWithoutStack) isLogField_Value() {}

func (*LogField_ErrorWithStack) isLogField_Value() {}

func (*LogField_Str) isLogField_Value() {}

func (*LogField_Bool) isLogField_Value() {}

func (*LogField_Time) isLogField_Value() {}

func (*LogField_Dur) isLogField_Value() {}

func (*LogField_Uuid) isLogField_Value() {}

func (*LogField_Json) isLogField_Value() {}

func (*LogField_Int) isLogField_Value() {}

func (*LogField_Uint) isLogField_Value() {}

func (*LogField_Float32) isLogField_Value() {}

func (*LogField_Float64) isLogField_Value() {}

type ErrWithStack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string      `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Stack *StackTrace `protobuf:"bytes,2,opt,name=stack,proto3" json:"stack,omitempty"`
}

func (x *ErrWithStack) Reset() {
	*x = ErrWithStack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrWithStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrWithStack) ProtoMessage() {}

func (x *ErrWithStack) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrWithStack.ProtoReflect.Descriptor instead.
func (*ErrWithStack) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{25}
}

func (x *ErrWithStack) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ErrWithStack) GetStack() *StackTrace {
	if x != nil {
		return x.Stack
	}
	return nil
}

type StackTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pcs    []int64       `protobuf:"varint,1,rep,packed,name=pcs,proto3" json:"pcs,omitempty"`
	Frames []*StackFrame `protobuf:"bytes,2,rep,name=frames,proto3" json:"frames,omitempty"`
}

func (x *StackTrace) Reset() {
	*x = StackTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackTrace) ProtoMessage() {}

func (x *StackTrace) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackTrace.ProtoReflect.Descriptor instead.
func (*StackTrace) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{26}
}

func (x *StackTrace) GetPcs() []int64 {
	if x != nil {
		return x.Pcs
	}
	return nil
}

func (x *StackTrace) GetFrames() []*StackFrame {
	if x != nil {
		return x.Frames
	}
	return nil
}

type StackFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Func     string `protobuf:"bytes,2,opt,name=func,proto3" json:"func,omitempty"`
	Line     int32  `protobuf:"varint,3,opt,name=line,proto3" json:"line,omitempty"`
}

func (x *StackFrame) Reset() {
	*x = StackFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace_trace_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackFrame) ProtoMessage() {}

func (x *StackFrame) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace_trace_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackFrame.ProtoReflect.Descriptor instead.
func (*StackFrame) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace_trace_proto_rawDescGZIP(), []int{27}
}

func (x *StackFrame) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StackFrame) GetFunc() string {
	if x != nil {
		return x.Func
	}
	return ""
}

func (x *StackFrame) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

var File_encore_engine_trace_trace_proto protoreflect.FileDescriptor

var file_encore_engine_trace_trace_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x22, 0xb2, 0x0a, 0x0a, 0x07, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x44, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x67, 0x6f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6f, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65,
	0x66, 0x5f, 0x6c, 0x6f, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x66,
	0x4c, 0x6f, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x52, 0x08, 0x65, 0x72, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x24,
	0x0a, 0x0e, 0x61, 0x62, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x62, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68,
	0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x63, 0x0a, 0x13, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x61,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x66, 0x0a, 0x14, 0x72, 0x61, 0x77, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x72, 0x61, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a,
	0x44, 0x0a, 0x16, 0x52, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x29, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x50, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x41, 0x55, 0x54, 0x48, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x55, 0x42, 0x53, 0x55,
	0x42, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xe7, 0x04,
	0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x72, 0x70, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x03, 0x72, 0x70, 0x63, 0x12, 0x34, 0x0a, 0x02, 0x74, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x42, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x02, 0x74, 0x78, 0x12,
	0x34, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x42, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x09, 0x67, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x47,
	0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x09, 0x67, 0x6f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x33, 0x0a, 0x03, 0x6c, 0x6f,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6f,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12,
	0x4d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x4d, 0x73, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x45,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x4f, 0x70, 0x48, 0x00, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42,
	0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd8, 0x01, 0x0a, 0x07, 0x52, 0x50, 0x43, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x67, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6f, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x5f, 0x6c, 0x6f, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x64, 0x65, 0x66, 0x4c, 0x6f, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x22, 0x5f, 0x0a, 0x09, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x67, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67,
	0x6f, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4a, 0x04, 0x08,
	0x02, 0x10, 0x03, 0x22, 0xb2, 0x03, 0x0a, 0x0d, 0x44, 0x42, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6f, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x51, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x65, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x44, 0x42, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x44, 0x42, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x0b, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x22, 0x2a, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xbc, 0x01, 0x0a, 0x07, 0x44, 0x42, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x67, 0x6f, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xfa, 0x01, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x4d, 0x73, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x6f,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x72, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x35, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x22, 0xde, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x67, 0x6f, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x5f,
	0x6c, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x66, 0x4c, 0x6f,
	0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x08, 0x65, 0x72, 0x72,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0xb7, 0x03, 0x0a, 0x07, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4f,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x67, 0x6f, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x5f, 0x6c, 0x6f, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x66, 0x4c, 0x6f, 0x63, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4f, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x45, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x53, 0x55,
	0x43, 0x48, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x46,
	0x4c, 0x49, 0x43, 0x54, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x52, 0x52, 0x10, 0x04, 0x22,
	0x61, 0x0a, 0x0a, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xb5, 0x02, 0x0a, 0x08, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6f, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x65, 0x72, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62,
	0x6f, 0x64, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa3, 0x06, 0x0a, 0x0e, 0x48,
	0x54, 0x54, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x65, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x41,
	0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x12, 0x41, 0x0a, 0x08, 0x67, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x47, 0x6f,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x67, 0x6f, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x57, 0x0a, 0x10, 0x67, 0x6f, 0x74, 0x5f, 0x31, 0x78, 0x78, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x47, 0x6f, 0x74, 0x31, 0x78, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x67,
	0x6f, 0x74, 0x31, 0x78, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x09, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x44, 0x4e, 0x53, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6e, 0x73, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x64,
	0x6e, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4d, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x44, 0x6f, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x74, 0x6c, 0x73, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x54, 0x4c,
	0x53, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x74, 0x6c, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61,
	0x6b, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x77, 0x72, 0x6f, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x57, 0x72, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x72, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x2e, 0x0a, 0x0f, 0x48, 0x54, 0x54, 0x50, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x22, 0x6e, 0x0a, 0x0f, 0x48, 0x54, 0x54, 0x50, 0x47, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x75, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x75, 0x73, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x77,
	0x61, 0x73, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77,
	0x61, 0x73, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x69, 0x64, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x73,
	0x22, 0x2c, 0x0a, 0x16, 0x48, 0x54, 0x54, 0x50, 0x47, 0x6f, 0x74, 0x31, 0x78, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x26,
	0x0a, 0x10, 0x48, 0x54, 0x54, 0x50, 0x44, 0x4e, 0x53, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x0f, 0x48, 0x54, 0x54, 0x50, 0x44, 0x4e,
	0x53, 0x44, 0x6f, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x61,
	0x64, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x2e, 0x44, 0x4e, 0x53, 0x41, 0x64, 0x64, 0x72, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x22,
	0x19, 0x0a, 0x07, 0x44, 0x4e, 0x53, 0x41, 0x64, 0x64, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x70, 0x22, 0x44, 0x0a, 0x14, 0x48, 0x54,
	0x54, 0x50, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72,
	0x22, 0x55, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44,
	0x6f, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xc2, 0x01, 0x0a, 0x18, 0x48, 0x54, 0x54, 0x50,
	0x54, 0x4c, 0x53, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6c, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x6e,
	0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x28, 0x0a, 0x14,
	0x48, 0x54, 0x54, 0x50, 0x57, 0x72, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xc8, 0x02, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6f,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x22, 0x3c, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x09, 0x0a, 0x05,
	0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x57, 0x41, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10,
	0x04, 0x22, 0xa4, 0x03, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x30, 0x0a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x12, 0x4d, 0x0a, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x48,
	0x00, 0x52, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x12, 0x12, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x03, 0x64, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x64, 0x75,
	0x72, 0x12, 0x14, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x03, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x69, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x04, 0x75, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x04, 0x75, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x33, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x33, 0x32, 0x12, 0x1a, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x35,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x57, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x03, 0x70, 0x63, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x50,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65,
	0x2a, 0xa0, 0x02, 0x0a, 0x12, 0x48, 0x54, 0x54, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x10, 0x02,
	0x12, 0x1b, 0x0a, 0x17, 0x47, 0x4f, 0x54, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x47, 0x4f, 0x54, 0x5f, 0x31, 0x58, 0x58, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x4e, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4e, 0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x06,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x44,
	0x4f, 0x4e, 0x45, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x4c, 0x53, 0x5f, 0x48, 0x41, 0x4e,
	0x44, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x09, 0x12, 0x16,
	0x0a, 0x12, 0x54, 0x4c, 0x53, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x5f,
	0x44, 0x4f, 0x4e, 0x45, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x52, 0x4f, 0x54, 0x45, 0x5f,
	0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x53, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x52, 0x4f,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55,
	0x45, 0x10, 0x0d, 0x42, 0x24, 0x5a, 0x22, 0x65, 0x6e, 0x63, 0x72, 0x2e, 0x64, 0x65, 0x76, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_encore_engine_trace_trace_proto_rawDescOnce sync.Once
	file_encore_engine_trace_trace_proto_rawDescData = file_encore_engine_trace_trace_proto_rawDesc
)

func file_encore_engine_trace_trace_proto_rawDescGZIP() []byte {
	file_encore_engine_trace_trace_proto_rawDescOnce.Do(func() {
		file_encore_engine_trace_trace_proto_rawDescData = protoimpl.X.CompressGZIP(file_encore_engine_trace_trace_proto_rawDescData)
	})
	return file_encore_engine_trace_trace_proto_rawDescData
}

var file_encore_engine_trace_trace_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_encore_engine_trace_trace_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_encore_engine_trace_trace_proto_goTypes = []interface{}{
	(HTTPTraceEventCode)(0),           // 0: encore.engine.trace.HTTPTraceEventCode
	(Request_Type)(0),                 // 1: encore.engine.trace.Request.Type
	(DBTransaction_CompletionType)(0), // 2: encore.engine.trace.DBTransaction.CompletionType
	(CacheOp_Result)(0),               // 3: encore.engine.trace.CacheOp.Result
	(LogMessage_Level)(0),             // 4: encore.engine.trace.LogMessage.Level
	(*TraceID)(nil),                   // 5: encore.engine.trace.TraceID
	(*Request)(nil),                   // 6: encore.engine.trace.Request
	(*Event)(nil),                     // 7: encore.engine.trace.Event
	(*RPCCall)(nil),                   // 8: encore.engine.trace.RPCCall
	(*Goroutine)(nil),                 // 9: encore.engine.trace.Goroutine
	(*DBTransaction)(nil),             // 10: encore.engine.trace.DBTransaction
	(*DBQuery)(nil),                   // 11: encore.engine.trace.DBQuery
	(*PubsubMsgPublished)(nil),        // 12: encore.engine.trace.PubsubMsgPublished
	(*ServiceInit)(nil),               // 13: encore.engine.trace.ServiceInit
	(*CacheOp)(nil),                   // 14: encore.engine.trace.CacheOp
	(*BodyStream)(nil),                // 15: encore.engine.trace.BodyStream
	(*HTTPCall)(nil),                  // 16: encore.engine.trace.HTTPCall
	(*HTTPTraceEvent)(nil),            // 17: encore.engine.trace.HTTPTraceEvent
	(*HTTPGetConnData)(nil),           // 18: encore.engine.trace.HTTPGetConnData
	(*HTTPGotConnData)(nil),           // 19: encore.engine.trace.HTTPGotConnData
	(*HTTPGot1XxResponseData)(nil),    // 20: encore.engine.trace.HTTPGot1xxResponseData
	(*HTTPDNSStartData)(nil),          // 21: encore.engine.trace.HTTPDNSStartData
	(*HTTPDNSDoneData)(nil),           // 22: encore.engine.trace.HTTPDNSDoneData
	(*DNSAddr)(nil),                   // 23: encore.engine.trace.DNSAddr
	(*HTTPConnectStartData)(nil),      // 24: encore.engine.trace.HTTPConnectStartData
	(*HTTPConnectDoneData)(nil),       // 25: encore.engine.trace.HTTPConnectDoneData
	(*HTTPTLSHandshakeDoneData)(nil),  // 26: encore.engine.trace.HTTPTLSHandshakeDoneData
	(*HTTPWroteRequestData)(nil),      // 27: encore.engine.trace.HTTPWroteRequestData
	(*LogMessage)(nil),                // 28: encore.engine.trace.LogMessage
	(*LogField)(nil),                  // 29: encore.engine.trace.LogField
	(*ErrWithStack)(nil),              // 30: encore.engine.trace.ErrWithStack
	(*StackTrace)(nil),                // 31: encore.engine.trace.StackTrace
	(*StackFrame)(nil),                // 32: encore.engine.trace.StackFrame
	nil,                               // 33: encore.engine.trace.Request.RawRequestHeadersEntry
	nil,                               // 34: encore.engine.trace.Request.RawResponseHeadersEntry
	(*timestamppb.Timestamp)(nil),     // 35: google.protobuf.Timestamp
}
var file_encore_engine_trace_trace_proto_depIdxs = []int32{
	5,  // 0: encore.engine.trace.Request.trace_id:type_name -> encore.engine.trace.TraceID
	7,  // 1: encore.engine.trace.Request.events:type_name -> encore.engine.trace.Event
	1,  // 2: encore.engine.trace.Request.type:type_name -> encore.engine.trace.Request.Type
	31, // 3: encore.engine.trace.Request.err_stack:type_name -> encore.engine.trace.StackTrace
	33, // 4: encore.engine.trace.Request.raw_request_headers:type_name -> encore.engine.trace.Request.RawRequestHeadersEntry
	34, // 5: encore.engine.trace.Request.raw_response_headers:type_name -> encore.engine.trace.Request.RawResponseHeadersEntry
	8,  // 6: encore.engine.trace.Event.rpc:type_name -> encore.engine.trace.RPCCall
	10, // 7: encore.engine.trace.Event.tx:type_name -> encore.engine.trace.DBTransaction
	11, // 8: encore.engine.trace.Event.query:type_name -> encore.engine.trace.DBQuery
	9,  // 9: encore.engine.trace.Event.goroutine:type_name -> encore.engine.trace.Goroutine
	16, // 10: encore.engine.trace.Event.http:type_name -> encore.engine.trace.HTTPCall
	28, // 11: encore.engine.trace.Event.log:type_name -> encore.engine.trace.LogMessage
	12, // 12: encore.engine.trace.Event.publishedMsg:type_name -> encore.engine.trace.PubsubMsgPublished
	13, // 13: encore.engine.trace.Event.service_init:type_name -> encore.engine.trace.ServiceInit
	14, // 14: encore.engine.trace.Event.cache:type_name -> encore.engine.trace.CacheOp
	15, // 15: encore.engine.trace.Event.body_stream:type_name -> encore.engine.trace.BodyStream
	31, // 16: encore.engine.trace.RPCCall.stack:type_name -> encore.engine.trace.StackTrace
	2,  // 17: encore.engine.trace.DBTransaction.completion:type_name -> encore.engine.trace.DBTransaction.CompletionType
	11, // 18: encore.engine.trace.DBTransaction.queries:type_name -> encore.engine.trace.DBQuery
	31, // 19: encore.engine.trace.DBTransaction.begin_stack:type_name -> encore.engine.trace.StackTrace
	31, // 20: encore.engine.trace.DBTransaction.end_stack:type_name -> encore.engine.trace.StackTrace
	31, // 21: encore.engine.trace.DBQuery.stack:type_name -> encore.engine.trace.StackTrace
	31, // 22: encore.engine.trace.PubsubMsgPublished.stack:type_name -> encore.engine.trace.StackTrace
	31, // 23: encore.engine.trace.ServiceInit.err_stack:type_name -> encore.engine.trace.StackTrace
	31, // 24: encore.engine.trace.CacheOp.stack:type_name -> encore.engine.trace.StackTrace
	3,  // 25: encore.engine.trace.CacheOp.result:type_name -> encore.engine.trace.CacheOp.Result
	17, // 26: encore.engine.trace.HTTPCall.events:type_name -> encore.engine.trace.HTTPTraceEvent
	0,  // 27: encore.engine.trace.HTTPTraceEvent.code:type_name -> encore.engine.trace.HTTPTraceEventCode
	18, // 28: encore.engine.trace.HTTPTraceEvent.get_conn:type_name -> encore.engine.trace.HTTPGetConnData
	19, // 29: encore.engine.trace.HTTPTraceEvent.got_conn:type_name -> encore.engine.trace.HTTPGotConnData
	20, // 30: encore.engine.trace.HTTPTraceEvent.got_1xx_response:type_name -> encore.engine.trace.HTTPGot1xxResponseData
	21, // 31: encore.engine.trace.HTTPTraceEvent.dns_start:type_name -> encore.engine.trace.HTTPDNSStartData
	22, // 32: encore.engine.trace.HTTPTraceEvent.dns_done:type_name -> encore.engine.trace.HTTPDNSDoneData
	24, // 33: encore.engine.trace.HTTPTraceEvent.connect_start:type_name -> encore.engine.trace.HTTPConnectStartData
	25, // 34: encore.engine.trace.HTTPTraceEvent.connect_done:type_name -> encore.engine.trace.HTTPConnectDoneData
	26, // 35: encore.engine.trace.HTTPTraceEvent.tls_handshake_done:type_name -> encore.engine.trace.HTTPTLSHandshakeDoneData
	27, // 36: encore.engine.trace.HTTPTraceEvent.wrote_request:type_name -> encore.engine.trace.HTTPWroteRequestData
	23, // 37: encore.engine.trace.HTTPDNSDoneData.addrs:type_name -> encore.engine.trace.DNSAddr
	4,  // 38: encore.engine.trace.LogMessage.level:type_name -> encore.engine.trace.LogMessage.Level
	29, // 39: encore.engine.trace.LogMessage.fields:type_name -> encore.engine.trace.LogField
	31, // 40: encore.engine.trace.LogMessage.stack:type_name -> encore.engine.trace.StackTrace
	30, // 41: encore.engine.trace.LogField.error_with_stack:type_name -> encore.engine.trace.ErrWithStack
	35, // 42: encore.engine.trace.LogField.time:type_name -> google.protobuf.Timestamp
	31, // 43: encore.engine.trace.ErrWithStack.stack:type_name -> encore.engine.trace.StackTrace
	32, // 44: encore.engine.trace.StackTrace.frames:type_name -> encore.engine.trace.StackFrame
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_encore_engine_trace_trace_proto_init() }
func file_encore_engine_trace_trace_proto_init() {
	if File_encore_engine_trace_trace_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_encore_engine_trace_trace_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPCCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Goroutine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubsubMsgPublished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPTraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPGetConnData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPGotConnData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPGot1XxResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPDNSStartData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPDNSDoneData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPConnectStartData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPConnectDoneData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPTLSHandshakeDoneData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPWroteRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrWithStack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace_trace_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_encore_engine_trace_trace_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Event_Rpc)(nil),
		(*Event_Tx)(nil),
		(*Event_Query)(nil),
		(*Event_Goroutine)(nil),
		(*Event_Http)(nil),
		(*Event_Log)(nil),
		(*Event_PublishedMsg)(nil),
		(*Event_ServiceInit)(nil),
		(*Event_Cache)(nil),
		(*Event_BodyStream)(nil),
	}
	file_encore_engine_trace_trace_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*HTTPTraceEvent_GetConn)(nil),
		(*HTTPTraceEvent_GotConn)(nil),
		(*HTTPTraceEvent_Got_1XxResponse)(nil),
		(*HTTPTraceEvent_DnsStart)(nil),
		(*HTTPTraceEvent_DnsDone)(nil),
		(*HTTPTraceEvent_ConnectStart)(nil),
		(*HTTPTraceEvent_ConnectDone)(nil),
		(*HTTPTraceEvent_TlsHandshakeDone)(nil),
		(*HTTPTraceEvent_WroteRequest)(nil),
	}
	file_encore_engine_trace_trace_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*LogField_ErrorWithoutStack)(nil),
		(*LogField_ErrorWithStack)(nil),
		(*LogField_Str)(nil),
		(*LogField_Bool)(nil),
		(*LogField_Time)(nil),
		(*LogField_Dur)(nil),
		(*LogField_Uuid)(nil),
		(*LogField_Json)(nil),
		(*LogField_Int)(nil),
		(*LogField_Uint)(nil),
		(*LogField_Float32)(nil),
		(*LogField_Float64)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_encore_engine_trace_trace_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_encore_engine_trace_trace_proto_goTypes,
		DependencyIndexes: file_encore_engine_trace_trace_proto_depIdxs,
		EnumInfos:         file_encore_engine_trace_trace_proto_enumTypes,
		MessageInfos:      file_encore_engine_trace_trace_proto_msgTypes,
	}.Build()
	File_encore_engine_trace_trace_proto = out.File
	file_encore_engine_trace_trace_proto_rawDesc = nil
	file_encore_engine_trace_trace_proto_goTypes = nil
	file_encore_engine_trace_trace_proto_depIdxs = nil
}
