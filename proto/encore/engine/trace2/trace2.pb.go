// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.2
// source: encore/engine/trace2/trace2.proto

package trace2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HTTPTraceEventCode int32

const (
	HTTPTraceEventCode_UNKNOWN                 HTTPTraceEventCode = 0
	HTTPTraceEventCode_GET_CONN                HTTPTraceEventCode = 1
	HTTPTraceEventCode_GOT_CONN                HTTPTraceEventCode = 2
	HTTPTraceEventCode_GOT_FIRST_RESPONSE_BYTE HTTPTraceEventCode = 3
	HTTPTraceEventCode_GOT_1XX_RESPONSE        HTTPTraceEventCode = 4
	HTTPTraceEventCode_DNS_START               HTTPTraceEventCode = 5
	HTTPTraceEventCode_DNS_DONE                HTTPTraceEventCode = 6
	HTTPTraceEventCode_CONNECT_START           HTTPTraceEventCode = 7
	HTTPTraceEventCode_CONNECT_DONE            HTTPTraceEventCode = 8
	HTTPTraceEventCode_TLS_HANDSHAKE_START     HTTPTraceEventCode = 9
	HTTPTraceEventCode_TLS_HANDSHAKE_DONE      HTTPTraceEventCode = 10
	HTTPTraceEventCode_WROTE_HEADERS           HTTPTraceEventCode = 11
	HTTPTraceEventCode_WROTE_REQUEST           HTTPTraceEventCode = 12
	HTTPTraceEventCode_WAIT_100_CONTINUE       HTTPTraceEventCode = 13
	HTTPTraceEventCode_CLOSED_BODY             HTTPTraceEventCode = 14
)

// Enum value maps for HTTPTraceEventCode.
var (
	HTTPTraceEventCode_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "GET_CONN",
		2:  "GOT_CONN",
		3:  "GOT_FIRST_RESPONSE_BYTE",
		4:  "GOT_1XX_RESPONSE",
		5:  "DNS_START",
		6:  "DNS_DONE",
		7:  "CONNECT_START",
		8:  "CONNECT_DONE",
		9:  "TLS_HANDSHAKE_START",
		10: "TLS_HANDSHAKE_DONE",
		11: "WROTE_HEADERS",
		12: "WROTE_REQUEST",
		13: "WAIT_100_CONTINUE",
		14: "CLOSED_BODY",
	}
	HTTPTraceEventCode_value = map[string]int32{
		"UNKNOWN":                 0,
		"GET_CONN":                1,
		"GOT_CONN":                2,
		"GOT_FIRST_RESPONSE_BYTE": 3,
		"GOT_1XX_RESPONSE":        4,
		"DNS_START":               5,
		"DNS_DONE":                6,
		"CONNECT_START":           7,
		"CONNECT_DONE":            8,
		"TLS_HANDSHAKE_START":     9,
		"TLS_HANDSHAKE_DONE":      10,
		"WROTE_HEADERS":           11,
		"WROTE_REQUEST":           12,
		"WAIT_100_CONTINUE":       13,
		"CLOSED_BODY":             14,
	}
)

func (x HTTPTraceEventCode) Enum() *HTTPTraceEventCode {
	p := new(HTTPTraceEventCode)
	*p = x
	return p
}

func (x HTTPTraceEventCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTPTraceEventCode) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_engine_trace2_trace2_proto_enumTypes[0].Descriptor()
}

func (HTTPTraceEventCode) Type() protoreflect.EnumType {
	return &file_encore_engine_trace2_trace2_proto_enumTypes[0]
}

func (x HTTPTraceEventCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTPTraceEventCode.Descriptor instead.
func (HTTPTraceEventCode) EnumDescriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{0}
}

type SpanSummary_SpanType int32

const (
	SpanSummary_UNKNOWN        SpanSummary_SpanType = 0
	SpanSummary_REQUEST        SpanSummary_SpanType = 1
	SpanSummary_AUTH           SpanSummary_SpanType = 2
	SpanSummary_PUBSUB_MESSAGE SpanSummary_SpanType = 3
)

// Enum value maps for SpanSummary_SpanType.
var (
	SpanSummary_SpanType_name = map[int32]string{
		0: "UNKNOWN",
		1: "REQUEST",
		2: "AUTH",
		3: "PUBSUB_MESSAGE",
	}
	SpanSummary_SpanType_value = map[string]int32{
		"UNKNOWN":        0,
		"REQUEST":        1,
		"AUTH":           2,
		"PUBSUB_MESSAGE": 3,
	}
)

func (x SpanSummary_SpanType) Enum() *SpanSummary_SpanType {
	p := new(SpanSummary_SpanType)
	*p = x
	return p
}

func (x SpanSummary_SpanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanSummary_SpanType) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_engine_trace2_trace2_proto_enumTypes[1].Descriptor()
}

func (SpanSummary_SpanType) Type() protoreflect.EnumType {
	return &file_encore_engine_trace2_trace2_proto_enumTypes[1]
}

func (x SpanSummary_SpanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanSummary_SpanType.Descriptor instead.
func (SpanSummary_SpanType) EnumDescriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{0, 0}
}

type DBTransactionEnd_CompletionType int32

const (
	DBTransactionEnd_ROLLBACK DBTransactionEnd_CompletionType = 0
	DBTransactionEnd_COMMIT   DBTransactionEnd_CompletionType = 1
)

// Enum value maps for DBTransactionEnd_CompletionType.
var (
	DBTransactionEnd_CompletionType_name = map[int32]string{
		0: "ROLLBACK",
		1: "COMMIT",
	}
	DBTransactionEnd_CompletionType_value = map[string]int32{
		"ROLLBACK": 0,
		"COMMIT":   1,
	}
)

func (x DBTransactionEnd_CompletionType) Enum() *DBTransactionEnd_CompletionType {
	p := new(DBTransactionEnd_CompletionType)
	*p = x
	return p
}

func (x DBTransactionEnd_CompletionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBTransactionEnd_CompletionType) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_engine_trace2_trace2_proto_enumTypes[2].Descriptor()
}

func (DBTransactionEnd_CompletionType) Type() protoreflect.EnumType {
	return &file_encore_engine_trace2_trace2_proto_enumTypes[2]
}

func (x DBTransactionEnd_CompletionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBTransactionEnd_CompletionType.Descriptor instead.
func (DBTransactionEnd_CompletionType) EnumDescriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{18, 0}
}

type CacheCallEnd_Result int32

const (
	CacheCallEnd_UNKNOWN     CacheCallEnd_Result = 0
	CacheCallEnd_OK          CacheCallEnd_Result = 1
	CacheCallEnd_NO_SUCH_KEY CacheCallEnd_Result = 2
	CacheCallEnd_CONFLICT    CacheCallEnd_Result = 3
	CacheCallEnd_ERR         CacheCallEnd_Result = 4
)

// Enum value maps for CacheCallEnd_Result.
var (
	CacheCallEnd_Result_name = map[int32]string{
		0: "UNKNOWN",
		1: "OK",
		2: "NO_SUCH_KEY",
		3: "CONFLICT",
		4: "ERR",
	}
	CacheCallEnd_Result_value = map[string]int32{
		"UNKNOWN":     0,
		"OK":          1,
		"NO_SUCH_KEY": 2,
		"CONFLICT":    3,
		"ERR":         4,
	}
)

func (x CacheCallEnd_Result) Enum() *CacheCallEnd_Result {
	p := new(CacheCallEnd_Result)
	*p = x
	return p
}

func (x CacheCallEnd_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CacheCallEnd_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_engine_trace2_trace2_proto_enumTypes[3].Descriptor()
}

func (CacheCallEnd_Result) Type() protoreflect.EnumType {
	return &file_encore_engine_trace2_trace2_proto_enumTypes[3]
}

func (x CacheCallEnd_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CacheCallEnd_Result.Descriptor instead.
func (CacheCallEnd_Result) EnumDescriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{26, 0}
}

// Note: These values don't match the values used by the binary trace protocol,
// as these values are stored in persisted traces and therefore must maintain
// backwards compatibility. The binary trace protocol is versioned and doesn't
// have the same limitations.
type LogMessage_Level int32

const (
	LogMessage_DEBUG LogMessage_Level = 0
	LogMessage_INFO  LogMessage_Level = 1
	LogMessage_ERROR LogMessage_Level = 2
	LogMessage_WARN  LogMessage_Level = 3
	LogMessage_TRACE LogMessage_Level = 4
)

// Enum value maps for LogMessage_Level.
var (
	LogMessage_Level_name = map[int32]string{
		0: "DEBUG",
		1: "INFO",
		2: "ERROR",
		3: "WARN",
		4: "TRACE",
	}
	LogMessage_Level_value = map[string]int32{
		"DEBUG": 0,
		"INFO":  1,
		"ERROR": 2,
		"WARN":  3,
		"TRACE": 4,
	}
)

func (x LogMessage_Level) Enum() *LogMessage_Level {
	p := new(LogMessage_Level)
	*p = x
	return p
}

func (x LogMessage_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogMessage_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_engine_trace2_trace2_proto_enumTypes[4].Descriptor()
}

func (LogMessage_Level) Type() protoreflect.EnumType {
	return &file_encore_engine_trace2_trace2_proto_enumTypes[4]
}

func (x LogMessage_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogMessage_Level.Descriptor instead.
func (LogMessage_Level) EnumDescriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{46, 0}
}

// SpanSummary summarizes a span for display purposes.
type SpanSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceId          string                 `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId           string                 `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	Type             SpanSummary_SpanType   `protobuf:"varint,3,opt,name=type,proto3,enum=encore.engine.trace2.SpanSummary_SpanType" json:"type,omitempty"`
	IsRoot           bool                   `protobuf:"varint,4,opt,name=is_root,json=isRoot,proto3" json:"is_root,omitempty"`                        // whether it's a root request
	IsError          bool                   `protobuf:"varint,5,opt,name=is_error,json=isError,proto3" json:"is_error,omitempty"`                     // whether the request failed
	DeployedCommit   string                 `protobuf:"bytes,6,opt,name=deployed_commit,json=deployedCommit,proto3" json:"deployed_commit,omitempty"` // the commit hash of the running service
	StartedAt        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	DurationNanos    uint64                 `protobuf:"varint,8,opt,name=duration_nanos,json=durationNanos,proto3" json:"duration_nanos,omitempty"`
	ServiceName      string                 `protobuf:"bytes,9,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	EndpointName     *string                `protobuf:"bytes,10,opt,name=endpoint_name,json=endpointName,proto3,oneof" json:"endpoint_name,omitempty"`
	TopicName        *string                `protobuf:"bytes,11,opt,name=topic_name,json=topicName,proto3,oneof" json:"topic_name,omitempty"`
	SubscriptionName *string                `protobuf:"bytes,12,opt,name=subscription_name,json=subscriptionName,proto3,oneof" json:"subscription_name,omitempty"`
	MessageId        *string                `protobuf:"bytes,13,opt,name=message_id,json=messageId,proto3,oneof" json:"message_id,omitempty"`
}

func (x *SpanSummary) Reset() {
	*x = SpanSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanSummary) ProtoMessage() {}

func (x *SpanSummary) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanSummary.ProtoReflect.Descriptor instead.
func (*SpanSummary) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{0}
}

func (x *SpanSummary) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *SpanSummary) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

func (x *SpanSummary) GetType() SpanSummary_SpanType {
	if x != nil {
		return x.Type
	}
	return SpanSummary_UNKNOWN
}

func (x *SpanSummary) GetIsRoot() bool {
	if x != nil {
		return x.IsRoot
	}
	return false
}

func (x *SpanSummary) GetIsError() bool {
	if x != nil {
		return x.IsError
	}
	return false
}

func (x *SpanSummary) GetDeployedCommit() string {
	if x != nil {
		return x.DeployedCommit
	}
	return ""
}

func (x *SpanSummary) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *SpanSummary) GetDurationNanos() uint64 {
	if x != nil {
		return x.DurationNanos
	}
	return 0
}

func (x *SpanSummary) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *SpanSummary) GetEndpointName() string {
	if x != nil && x.EndpointName != nil {
		return *x.EndpointName
	}
	return ""
}

func (x *SpanSummary) GetTopicName() string {
	if x != nil && x.TopicName != nil {
		return *x.TopicName
	}
	return ""
}

func (x *SpanSummary) GetSubscriptionName() string {
	if x != nil && x.SubscriptionName != nil {
		return *x.SubscriptionName
	}
	return ""
}

func (x *SpanSummary) GetMessageId() string {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return ""
}

type TraceID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	High uint64 `protobuf:"varint,1,opt,name=high,proto3" json:"high,omitempty"`
	Low  uint64 `protobuf:"varint,2,opt,name=low,proto3" json:"low,omitempty"`
}

func (x *TraceID) Reset() {
	*x = TraceID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceID) ProtoMessage() {}

func (x *TraceID) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceID.ProtoReflect.Descriptor instead.
func (*TraceID) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{1}
}

func (x *TraceID) GetHigh() uint64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *TraceID) GetLow() uint64 {
	if x != nil {
		return x.Low
	}
	return 0
}

type EventList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*TraceEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *EventList) Reset() {
	*x = EventList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventList) ProtoMessage() {}

func (x *EventList) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventList.ProtoReflect.Descriptor instead.
func (*EventList) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{2}
}

func (x *EventList) GetEvents() []*TraceEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type TraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceId   *TraceID               `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId    uint64                 `protobuf:"varint,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	EventId   uint64                 `protobuf:"varint,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	// Types that are assignable to Event:
	//
	//	*TraceEvent_SpanStart
	//	*TraceEvent_SpanEnd
	//	*TraceEvent_SpanEvent
	Event isTraceEvent_Event `protobuf_oneof:"event"`
}

func (x *TraceEvent) Reset() {
	*x = TraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceEvent) ProtoMessage() {}

func (x *TraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceEvent.ProtoReflect.Descriptor instead.
func (*TraceEvent) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{3}
}

func (x *TraceEvent) GetTraceId() *TraceID {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *TraceEvent) GetSpanId() uint64 {
	if x != nil {
		return x.SpanId
	}
	return 0
}

func (x *TraceEvent) GetEventId() uint64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *TraceEvent) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (m *TraceEvent) GetEvent() isTraceEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *TraceEvent) GetSpanStart() *SpanStart {
	if x, ok := x.GetEvent().(*TraceEvent_SpanStart); ok {
		return x.SpanStart
	}
	return nil
}

func (x *TraceEvent) GetSpanEnd() *SpanEnd {
	if x, ok := x.GetEvent().(*TraceEvent_SpanEnd); ok {
		return x.SpanEnd
	}
	return nil
}

func (x *TraceEvent) GetSpanEvent() *SpanEvent {
	if x, ok := x.GetEvent().(*TraceEvent_SpanEvent); ok {
		return x.SpanEvent
	}
	return nil
}

type isTraceEvent_Event interface {
	isTraceEvent_Event()
}

type TraceEvent_SpanStart struct {
	SpanStart *SpanStart `protobuf:"bytes,10,opt,name=span_start,json=spanStart,proto3,oneof"`
}

type TraceEvent_SpanEnd struct {
	SpanEnd *SpanEnd `protobuf:"bytes,11,opt,name=span_end,json=spanEnd,proto3,oneof"`
}

type TraceEvent_SpanEvent struct {
	SpanEvent *SpanEvent `protobuf:"bytes,12,opt,name=span_event,json=spanEvent,proto3,oneof"`
}

func (*TraceEvent_SpanStart) isTraceEvent_Event() {}

func (*TraceEvent_SpanEnd) isTraceEvent_Event() {}

func (*TraceEvent_SpanEvent) isTraceEvent_Event() {}

type SpanStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Goid                  uint32   `protobuf:"varint,1,opt,name=goid,proto3" json:"goid,omitempty"`
	ParentTraceId         *TraceID `protobuf:"bytes,2,opt,name=parent_trace_id,json=parentTraceId,proto3,oneof" json:"parent_trace_id,omitempty"`
	ParentSpanId          *uint64  `protobuf:"varint,3,opt,name=parent_span_id,json=parentSpanId,proto3,oneof" json:"parent_span_id,omitempty"`
	CallerEventId         *uint64  `protobuf:"varint,4,opt,name=caller_event_id,json=callerEventId,proto3,oneof" json:"caller_event_id,omitempty"`
	ExternalCorrelationId *string  `protobuf:"bytes,5,opt,name=external_correlation_id,json=externalCorrelationId,proto3,oneof" json:"external_correlation_id,omitempty"`
	DefLoc                *uint32  `protobuf:"varint,6,opt,name=def_loc,json=defLoc,proto3,oneof" json:"def_loc,omitempty"`
	// Types that are assignable to Data:
	//
	//	*SpanStart_Request
	//	*SpanStart_Auth
	//	*SpanStart_PubsubMessage
	Data isSpanStart_Data `protobuf_oneof:"data"`
}

func (x *SpanStart) Reset() {
	*x = SpanStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanStart) ProtoMessage() {}

func (x *SpanStart) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanStart.ProtoReflect.Descriptor instead.
func (*SpanStart) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{4}
}

func (x *SpanStart) GetGoid() uint32 {
	if x != nil {
		return x.Goid
	}
	return 0
}

func (x *SpanStart) GetParentTraceId() *TraceID {
	if x != nil {
		return x.ParentTraceId
	}
	return nil
}

func (x *SpanStart) GetParentSpanId() uint64 {
	if x != nil && x.ParentSpanId != nil {
		return *x.ParentSpanId
	}
	return 0
}

func (x *SpanStart) GetCallerEventId() uint64 {
	if x != nil && x.CallerEventId != nil {
		return *x.CallerEventId
	}
	return 0
}

func (x *SpanStart) GetExternalCorrelationId() string {
	if x != nil && x.ExternalCorrelationId != nil {
		return *x.ExternalCorrelationId
	}
	return ""
}

func (x *SpanStart) GetDefLoc() uint32 {
	if x != nil && x.DefLoc != nil {
		return *x.DefLoc
	}
	return 0
}

func (m *SpanStart) GetData() isSpanStart_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *SpanStart) GetRequest() *RequestSpanStart {
	if x, ok := x.GetData().(*SpanStart_Request); ok {
		return x.Request
	}
	return nil
}

func (x *SpanStart) GetAuth() *AuthSpanStart {
	if x, ok := x.GetData().(*SpanStart_Auth); ok {
		return x.Auth
	}
	return nil
}

func (x *SpanStart) GetPubsubMessage() *PubsubMessageSpanStart {
	if x, ok := x.GetData().(*SpanStart_PubsubMessage); ok {
		return x.PubsubMessage
	}
	return nil
}

type isSpanStart_Data interface {
	isSpanStart_Data()
}

type SpanStart_Request struct {
	Request *RequestSpanStart `protobuf:"bytes,10,opt,name=request,proto3,oneof"`
}

type SpanStart_Auth struct {
	Auth *AuthSpanStart `protobuf:"bytes,11,opt,name=auth,proto3,oneof"`
}

type SpanStart_PubsubMessage struct {
	PubsubMessage *PubsubMessageSpanStart `protobuf:"bytes,12,opt,name=pubsub_message,json=pubsubMessage,proto3,oneof"`
}

func (*SpanStart_Request) isSpanStart_Data() {}

func (*SpanStart_Auth) isSpanStart_Data() {}

func (*SpanStart_PubsubMessage) isSpanStart_Data() {}

type SpanEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DurationNanos uint64 `protobuf:"varint,1,opt,name=duration_nanos,json=durationNanos,proto3" json:"duration_nanos,omitempty"`
	Error         *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof" json:"error,omitempty"`
	// panic_stack is the stack trace if the span ended due to a panic
	PanicStack    *StackTrace `protobuf:"bytes,3,opt,name=panic_stack,json=panicStack,proto3,oneof" json:"panic_stack,omitempty"`
	ParentTraceId *TraceID    `protobuf:"bytes,4,opt,name=parent_trace_id,json=parentTraceId,proto3,oneof" json:"parent_trace_id,omitempty"`
	ParentSpanId  *uint64     `protobuf:"varint,5,opt,name=parent_span_id,json=parentSpanId,proto3,oneof" json:"parent_span_id,omitempty"`
	// Types that are assignable to Data:
	//
	//	*SpanEnd_Request
	//	*SpanEnd_Auth
	//	*SpanEnd_PubsubMessage
	Data isSpanEnd_Data `protobuf_oneof:"data"`
}

func (x *SpanEnd) Reset() {
	*x = SpanEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanEnd) ProtoMessage() {}

func (x *SpanEnd) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanEnd.ProtoReflect.Descriptor instead.
func (*SpanEnd) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{5}
}

func (x *SpanEnd) GetDurationNanos() uint64 {
	if x != nil {
		return x.DurationNanos
	}
	return 0
}

func (x *SpanEnd) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SpanEnd) GetPanicStack() *StackTrace {
	if x != nil {
		return x.PanicStack
	}
	return nil
}

func (x *SpanEnd) GetParentTraceId() *TraceID {
	if x != nil {
		return x.ParentTraceId
	}
	return nil
}

func (x *SpanEnd) GetParentSpanId() uint64 {
	if x != nil && x.ParentSpanId != nil {
		return *x.ParentSpanId
	}
	return 0
}

func (m *SpanEnd) GetData() isSpanEnd_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *SpanEnd) GetRequest() *RequestSpanEnd {
	if x, ok := x.GetData().(*SpanEnd_Request); ok {
		return x.Request
	}
	return nil
}

func (x *SpanEnd) GetAuth() *AuthSpanEnd {
	if x, ok := x.GetData().(*SpanEnd_Auth); ok {
		return x.Auth
	}
	return nil
}

func (x *SpanEnd) GetPubsubMessage() *PubsubMessageSpanEnd {
	if x, ok := x.GetData().(*SpanEnd_PubsubMessage); ok {
		return x.PubsubMessage
	}
	return nil
}

type isSpanEnd_Data interface {
	isSpanEnd_Data()
}

type SpanEnd_Request struct {
	Request *RequestSpanEnd `protobuf:"bytes,10,opt,name=request,proto3,oneof"`
}

type SpanEnd_Auth struct {
	Auth *AuthSpanEnd `protobuf:"bytes,11,opt,name=auth,proto3,oneof"`
}

type SpanEnd_PubsubMessage struct {
	PubsubMessage *PubsubMessageSpanEnd `protobuf:"bytes,12,opt,name=pubsub_message,json=pubsubMessage,proto3,oneof"`
}

func (*SpanEnd_Request) isSpanEnd_Data() {}

func (*SpanEnd_Auth) isSpanEnd_Data() {}

func (*SpanEnd_PubsubMessage) isSpanEnd_Data() {}

type RequestSpanStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName      string            `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	EndpointName     string            `protobuf:"bytes,2,opt,name=endpoint_name,json=endpointName,proto3" json:"endpoint_name,omitempty"`
	HttpMethod       string            `protobuf:"bytes,3,opt,name=http_method,json=httpMethod,proto3" json:"http_method,omitempty"`
	Path             string            `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	PathParams       []string          `protobuf:"bytes,5,rep,name=path_params,json=pathParams,proto3" json:"path_params,omitempty"`
	RequestHeaders   map[string]string `protobuf:"bytes,6,rep,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RequestPayload   []byte            `protobuf:"bytes,7,opt,name=request_payload,json=requestPayload,proto3,oneof" json:"request_payload,omitempty"`
	ExtCorrelationId *string           `protobuf:"bytes,8,opt,name=ext_correlation_id,json=extCorrelationId,proto3,oneof" json:"ext_correlation_id,omitempty"`
	Uid              *string           `protobuf:"bytes,9,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
}

func (x *RequestSpanStart) Reset() {
	*x = RequestSpanStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSpanStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSpanStart) ProtoMessage() {}

func (x *RequestSpanStart) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSpanStart.ProtoReflect.Descriptor instead.
func (*RequestSpanStart) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{6}
}

func (x *RequestSpanStart) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RequestSpanStart) GetEndpointName() string {
	if x != nil {
		return x.EndpointName
	}
	return ""
}

func (x *RequestSpanStart) GetHttpMethod() string {
	if x != nil {
		return x.HttpMethod
	}
	return ""
}

func (x *RequestSpanStart) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RequestSpanStart) GetPathParams() []string {
	if x != nil {
		return x.PathParams
	}
	return nil
}

func (x *RequestSpanStart) GetRequestHeaders() map[string]string {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *RequestSpanStart) GetRequestPayload() []byte {
	if x != nil {
		return x.RequestPayload
	}
	return nil
}

func (x *RequestSpanStart) GetExtCorrelationId() string {
	if x != nil && x.ExtCorrelationId != nil {
		return *x.ExtCorrelationId
	}
	return ""
}

func (x *RequestSpanStart) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

type RequestSpanEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Repeat service/endpoint name here to make it possible
	// to consume end events without having to look up the start.
	ServiceName     string            `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	EndpointName    string            `protobuf:"bytes,2,opt,name=endpoint_name,json=endpointName,proto3" json:"endpoint_name,omitempty"`
	HttpStatusCode  uint32            `protobuf:"varint,3,opt,name=http_status_code,json=httpStatusCode,proto3" json:"http_status_code,omitempty"`
	ResponseHeaders map[string]string `protobuf:"bytes,4,rep,name=response_headers,json=responseHeaders,proto3" json:"response_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResponsePayload []byte            `protobuf:"bytes,5,opt,name=response_payload,json=responsePayload,proto3,oneof" json:"response_payload,omitempty"`
}

func (x *RequestSpanEnd) Reset() {
	*x = RequestSpanEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSpanEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSpanEnd) ProtoMessage() {}

func (x *RequestSpanEnd) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSpanEnd.ProtoReflect.Descriptor instead.
func (*RequestSpanEnd) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{7}
}

func (x *RequestSpanEnd) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RequestSpanEnd) GetEndpointName() string {
	if x != nil {
		return x.EndpointName
	}
	return ""
}

func (x *RequestSpanEnd) GetHttpStatusCode() uint32 {
	if x != nil {
		return x.HttpStatusCode
	}
	return 0
}

func (x *RequestSpanEnd) GetResponseHeaders() map[string]string {
	if x != nil {
		return x.ResponseHeaders
	}
	return nil
}

func (x *RequestSpanEnd) GetResponsePayload() []byte {
	if x != nil {
		return x.ResponsePayload
	}
	return nil
}

type AuthSpanStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName  string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	EndpointName string `protobuf:"bytes,2,opt,name=endpoint_name,json=endpointName,proto3" json:"endpoint_name,omitempty"`
	AuthPayload  []byte `protobuf:"bytes,3,opt,name=auth_payload,json=authPayload,proto3,oneof" json:"auth_payload,omitempty"`
}

func (x *AuthSpanStart) Reset() {
	*x = AuthSpanStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthSpanStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthSpanStart) ProtoMessage() {}

func (x *AuthSpanStart) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthSpanStart.ProtoReflect.Descriptor instead.
func (*AuthSpanStart) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{8}
}

func (x *AuthSpanStart) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *AuthSpanStart) GetEndpointName() string {
	if x != nil {
		return x.EndpointName
	}
	return ""
}

func (x *AuthSpanStart) GetAuthPayload() []byte {
	if x != nil {
		return x.AuthPayload
	}
	return nil
}

type AuthSpanEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Repeat service/endpoint name here to make it possible
	// to consume end events without having to look up the start.
	ServiceName  string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	EndpointName string `protobuf:"bytes,2,opt,name=endpoint_name,json=endpointName,proto3" json:"endpoint_name,omitempty"`
	Uid          string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	UserData     []byte `protobuf:"bytes,4,opt,name=user_data,json=userData,proto3,oneof" json:"user_data,omitempty"`
}

func (x *AuthSpanEnd) Reset() {
	*x = AuthSpanEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthSpanEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthSpanEnd) ProtoMessage() {}

func (x *AuthSpanEnd) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthSpanEnd.ProtoReflect.Descriptor instead.
func (*AuthSpanEnd) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{9}
}

func (x *AuthSpanEnd) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *AuthSpanEnd) GetEndpointName() string {
	if x != nil {
		return x.EndpointName
	}
	return ""
}

func (x *AuthSpanEnd) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AuthSpanEnd) GetUserData() []byte {
	if x != nil {
		return x.UserData
	}
	return nil
}

type PubsubMessageSpanStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName      string                 `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	TopicName        string                 `protobuf:"bytes,2,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	SubscriptionName string                 `protobuf:"bytes,3,opt,name=subscription_name,json=subscriptionName,proto3" json:"subscription_name,omitempty"`
	MessageId        string                 `protobuf:"bytes,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Attempt          uint32                 `protobuf:"varint,5,opt,name=attempt,proto3" json:"attempt,omitempty"`
	PublishTime      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
	MessagePayload   []byte                 `protobuf:"bytes,7,opt,name=message_payload,json=messagePayload,proto3,oneof" json:"message_payload,omitempty"`
}

func (x *PubsubMessageSpanStart) Reset() {
	*x = PubsubMessageSpanStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubsubMessageSpanStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubsubMessageSpanStart) ProtoMessage() {}

func (x *PubsubMessageSpanStart) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubsubMessageSpanStart.ProtoReflect.Descriptor instead.
func (*PubsubMessageSpanStart) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{10}
}

func (x *PubsubMessageSpanStart) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *PubsubMessageSpanStart) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *PubsubMessageSpanStart) GetSubscriptionName() string {
	if x != nil {
		return x.SubscriptionName
	}
	return ""
}

func (x *PubsubMessageSpanStart) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *PubsubMessageSpanStart) GetAttempt() uint32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

func (x *PubsubMessageSpanStart) GetPublishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishTime
	}
	return nil
}

func (x *PubsubMessageSpanStart) GetMessagePayload() []byte {
	if x != nil {
		return x.MessagePayload
	}
	return nil
}

type PubsubMessageSpanEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Repeat service/topic/subscription name here to make it possible
	// to consume end events without having to look up the start.
	ServiceName      string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	TopicName        string `protobuf:"bytes,2,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	SubscriptionName string `protobuf:"bytes,3,opt,name=subscription_name,json=subscriptionName,proto3" json:"subscription_name,omitempty"`
}

func (x *PubsubMessageSpanEnd) Reset() {
	*x = PubsubMessageSpanEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubsubMessageSpanEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubsubMessageSpanEnd) ProtoMessage() {}

func (x *PubsubMessageSpanEnd) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubsubMessageSpanEnd.ProtoReflect.Descriptor instead.
func (*PubsubMessageSpanEnd) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{11}
}

func (x *PubsubMessageSpanEnd) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *PubsubMessageSpanEnd) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *PubsubMessageSpanEnd) GetSubscriptionName() string {
	if x != nil {
		return x.SubscriptionName
	}
	return ""
}

type SpanEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Goid   uint32  `protobuf:"varint,1,opt,name=goid,proto3" json:"goid,omitempty"`
	DefLoc *uint32 `protobuf:"varint,2,opt,name=def_loc,json=defLoc,proto3,oneof" json:"def_loc,omitempty"`
	// correlation_event_id is the other event
	// this event is correlated with.
	CorrelationEventId *uint64 `protobuf:"varint,3,opt,name=correlation_event_id,json=correlationEventId,proto3,oneof" json:"correlation_event_id,omitempty"`
	// Types that are assignable to Data:
	//
	//	*SpanEvent_LogMessage
	//	*SpanEvent_BodyStream
	//	*SpanEvent_RpcCallStart
	//	*SpanEvent_RpcCallEnd
	//	*SpanEvent_DbTransactionStart
	//	*SpanEvent_DbTransactionEnd
	//	*SpanEvent_DbQueryStart
	//	*SpanEvent_DbQueryEnd
	//	*SpanEvent_HttpCallStart
	//	*SpanEvent_HttpCallEnd
	//	*SpanEvent_PubsubPublishStart
	//	*SpanEvent_PubsubPublishEnd
	//	*SpanEvent_CacheCallStart
	//	*SpanEvent_CacheCallEnd
	//	*SpanEvent_ServiceInitStart
	//	*SpanEvent_ServiceInitEnd
	Data isSpanEvent_Data `protobuf_oneof:"data"`
}

func (x *SpanEvent) Reset() {
	*x = SpanEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanEvent) ProtoMessage() {}

func (x *SpanEvent) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanEvent.ProtoReflect.Descriptor instead.
func (*SpanEvent) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{12}
}

func (x *SpanEvent) GetGoid() uint32 {
	if x != nil {
		return x.Goid
	}
	return 0
}

func (x *SpanEvent) GetDefLoc() uint32 {
	if x != nil && x.DefLoc != nil {
		return *x.DefLoc
	}
	return 0
}

func (x *SpanEvent) GetCorrelationEventId() uint64 {
	if x != nil && x.CorrelationEventId != nil {
		return *x.CorrelationEventId
	}
	return 0
}

func (m *SpanEvent) GetData() isSpanEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *SpanEvent) GetLogMessage() *LogMessage {
	if x, ok := x.GetData().(*SpanEvent_LogMessage); ok {
		return x.LogMessage
	}
	return nil
}

func (x *SpanEvent) GetBodyStream() *BodyStream {
	if x, ok := x.GetData().(*SpanEvent_BodyStream); ok {
		return x.BodyStream
	}
	return nil
}

func (x *SpanEvent) GetRpcCallStart() *RPCCallStart {
	if x, ok := x.GetData().(*SpanEvent_RpcCallStart); ok {
		return x.RpcCallStart
	}
	return nil
}

func (x *SpanEvent) GetRpcCallEnd() *RPCCallEnd {
	if x, ok := x.GetData().(*SpanEvent_RpcCallEnd); ok {
		return x.RpcCallEnd
	}
	return nil
}

func (x *SpanEvent) GetDbTransactionStart() *DBTransactionStart {
	if x, ok := x.GetData().(*SpanEvent_DbTransactionStart); ok {
		return x.DbTransactionStart
	}
	return nil
}

func (x *SpanEvent) GetDbTransactionEnd() *DBTransactionEnd {
	if x, ok := x.GetData().(*SpanEvent_DbTransactionEnd); ok {
		return x.DbTransactionEnd
	}
	return nil
}

func (x *SpanEvent) GetDbQueryStart() *DBQueryStart {
	if x, ok := x.GetData().(*SpanEvent_DbQueryStart); ok {
		return x.DbQueryStart
	}
	return nil
}

func (x *SpanEvent) GetDbQueryEnd() *DBQueryEnd {
	if x, ok := x.GetData().(*SpanEvent_DbQueryEnd); ok {
		return x.DbQueryEnd
	}
	return nil
}

func (x *SpanEvent) GetHttpCallStart() *HTTPCallStart {
	if x, ok := x.GetData().(*SpanEvent_HttpCallStart); ok {
		return x.HttpCallStart
	}
	return nil
}

func (x *SpanEvent) GetHttpCallEnd() *HTTPCallEnd {
	if x, ok := x.GetData().(*SpanEvent_HttpCallEnd); ok {
		return x.HttpCallEnd
	}
	return nil
}

func (x *SpanEvent) GetPubsubPublishStart() *PubsubPublishStart {
	if x, ok := x.GetData().(*SpanEvent_PubsubPublishStart); ok {
		return x.PubsubPublishStart
	}
	return nil
}

func (x *SpanEvent) GetPubsubPublishEnd() *PubsubPublishEnd {
	if x, ok := x.GetData().(*SpanEvent_PubsubPublishEnd); ok {
		return x.PubsubPublishEnd
	}
	return nil
}

func (x *SpanEvent) GetCacheCallStart() *CacheCallStart {
	if x, ok := x.GetData().(*SpanEvent_CacheCallStart); ok {
		return x.CacheCallStart
	}
	return nil
}

func (x *SpanEvent) GetCacheCallEnd() *CacheCallEnd {
	if x, ok := x.GetData().(*SpanEvent_CacheCallEnd); ok {
		return x.CacheCallEnd
	}
	return nil
}

func (x *SpanEvent) GetServiceInitStart() *ServiceInitStart {
	if x, ok := x.GetData().(*SpanEvent_ServiceInitStart); ok {
		return x.ServiceInitStart
	}
	return nil
}

func (x *SpanEvent) GetServiceInitEnd() *ServiceInitEnd {
	if x, ok := x.GetData().(*SpanEvent_ServiceInitEnd); ok {
		return x.ServiceInitEnd
	}
	return nil
}

type isSpanEvent_Data interface {
	isSpanEvent_Data()
}

type SpanEvent_LogMessage struct {
	LogMessage *LogMessage `protobuf:"bytes,10,opt,name=log_message,json=logMessage,proto3,oneof"`
}

type SpanEvent_BodyStream struct {
	BodyStream *BodyStream `protobuf:"bytes,11,opt,name=body_stream,json=bodyStream,proto3,oneof"`
}

type SpanEvent_RpcCallStart struct {
	RpcCallStart *RPCCallStart `protobuf:"bytes,12,opt,name=rpc_call_start,json=rpcCallStart,proto3,oneof"`
}

type SpanEvent_RpcCallEnd struct {
	RpcCallEnd *RPCCallEnd `protobuf:"bytes,13,opt,name=rpc_call_end,json=rpcCallEnd,proto3,oneof"`
}

type SpanEvent_DbTransactionStart struct {
	DbTransactionStart *DBTransactionStart `protobuf:"bytes,14,opt,name=db_transaction_start,json=dbTransactionStart,proto3,oneof"`
}

type SpanEvent_DbTransactionEnd struct {
	DbTransactionEnd *DBTransactionEnd `protobuf:"bytes,15,opt,name=db_transaction_end,json=dbTransactionEnd,proto3,oneof"`
}

type SpanEvent_DbQueryStart struct {
	DbQueryStart *DBQueryStart `protobuf:"bytes,16,opt,name=db_query_start,json=dbQueryStart,proto3,oneof"`
}

type SpanEvent_DbQueryEnd struct {
	DbQueryEnd *DBQueryEnd `protobuf:"bytes,17,opt,name=db_query_end,json=dbQueryEnd,proto3,oneof"`
}

type SpanEvent_HttpCallStart struct {
	HttpCallStart *HTTPCallStart `protobuf:"bytes,18,opt,name=http_call_start,json=httpCallStart,proto3,oneof"`
}

type SpanEvent_HttpCallEnd struct {
	HttpCallEnd *HTTPCallEnd `protobuf:"bytes,19,opt,name=http_call_end,json=httpCallEnd,proto3,oneof"`
}

type SpanEvent_PubsubPublishStart struct {
	PubsubPublishStart *PubsubPublishStart `protobuf:"bytes,20,opt,name=pubsub_publish_start,json=pubsubPublishStart,proto3,oneof"`
}

type SpanEvent_PubsubPublishEnd struct {
	PubsubPublishEnd *PubsubPublishEnd `protobuf:"bytes,21,opt,name=pubsub_publish_end,json=pubsubPublishEnd,proto3,oneof"`
}

type SpanEvent_CacheCallStart struct {
	CacheCallStart *CacheCallStart `protobuf:"bytes,22,opt,name=cache_call_start,json=cacheCallStart,proto3,oneof"`
}

type SpanEvent_CacheCallEnd struct {
	CacheCallEnd *CacheCallEnd `protobuf:"bytes,23,opt,name=cache_call_end,json=cacheCallEnd,proto3,oneof"`
}

type SpanEvent_ServiceInitStart struct {
	ServiceInitStart *ServiceInitStart `protobuf:"bytes,24,opt,name=service_init_start,json=serviceInitStart,proto3,oneof"`
}

type SpanEvent_ServiceInitEnd struct {
	ServiceInitEnd *ServiceInitEnd `protobuf:"bytes,25,opt,name=service_init_end,json=serviceInitEnd,proto3,oneof"`
}

func (*SpanEvent_LogMessage) isSpanEvent_Data() {}

func (*SpanEvent_BodyStream) isSpanEvent_Data() {}

func (*SpanEvent_RpcCallStart) isSpanEvent_Data() {}

func (*SpanEvent_RpcCallEnd) isSpanEvent_Data() {}

func (*SpanEvent_DbTransactionStart) isSpanEvent_Data() {}

func (*SpanEvent_DbTransactionEnd) isSpanEvent_Data() {}

func (*SpanEvent_DbQueryStart) isSpanEvent_Data() {}

func (*SpanEvent_DbQueryEnd) isSpanEvent_Data() {}

func (*SpanEvent_HttpCallStart) isSpanEvent_Data() {}

func (*SpanEvent_HttpCallEnd) isSpanEvent_Data() {}

func (*SpanEvent_PubsubPublishStart) isSpanEvent_Data() {}

func (*SpanEvent_PubsubPublishEnd) isSpanEvent_Data() {}

func (*SpanEvent_CacheCallStart) isSpanEvent_Data() {}

func (*SpanEvent_CacheCallEnd) isSpanEvent_Data() {}

func (*SpanEvent_ServiceInitStart) isSpanEvent_Data() {}

func (*SpanEvent_ServiceInitEnd) isSpanEvent_Data() {}

type RPCCallStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetServiceName  string      `protobuf:"bytes,1,opt,name=target_service_name,json=targetServiceName,proto3" json:"target_service_name,omitempty"`
	TargetEndpointName string      `protobuf:"bytes,2,opt,name=target_endpoint_name,json=targetEndpointName,proto3" json:"target_endpoint_name,omitempty"`
	Stack              *StackTrace `protobuf:"bytes,3,opt,name=stack,proto3" json:"stack,omitempty"`
}

func (x *RPCCallStart) Reset() {
	*x = RPCCallStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPCCallStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCCallStart) ProtoMessage() {}

func (x *RPCCallStart) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCCallStart.ProtoReflect.Descriptor instead.
func (*RPCCallStart) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{13}
}

func (x *RPCCallStart) GetTargetServiceName() string {
	if x != nil {
		return x.TargetServiceName
	}
	return ""
}

func (x *RPCCallStart) GetTargetEndpointName() string {
	if x != nil {
		return x.TargetEndpointName
	}
	return ""
}

func (x *RPCCallStart) GetStack() *StackTrace {
	if x != nil {
		return x.Stack
	}
	return nil
}

type RPCCallEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err *Error `protobuf:"bytes,1,opt,name=err,proto3,oneof" json:"err,omitempty"`
}

func (x *RPCCallEnd) Reset() {
	*x = RPCCallEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPCCallEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCCallEnd) ProtoMessage() {}

func (x *RPCCallEnd) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCCallEnd.ProtoReflect.Descriptor instead.
func (*RPCCallEnd) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{14}
}

func (x *RPCCallEnd) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

type GoroutineStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoroutineStart) Reset() {
	*x = GoroutineStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoroutineStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoroutineStart) ProtoMessage() {}

func (x *GoroutineStart) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoroutineStart.ProtoReflect.Descriptor instead.
func (*GoroutineStart) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{15}
}

type GoroutineEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoroutineEnd) Reset() {
	*x = GoroutineEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoroutineEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoroutineEnd) ProtoMessage() {}

func (x *GoroutineEnd) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoroutineEnd.ProtoReflect.Descriptor instead.
func (*GoroutineEnd) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{16}
}

type DBTransactionStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stack *StackTrace `protobuf:"bytes,1,opt,name=stack,proto3" json:"stack,omitempty"`
}

func (x *DBTransactionStart) Reset() {
	*x = DBTransactionStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBTransactionStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBTransactionStart) ProtoMessage() {}

func (x *DBTransactionStart) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBTransactionStart.ProtoReflect.Descriptor instead.
func (*DBTransactionStart) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{17}
}

func (x *DBTransactionStart) GetStack() *StackTrace {
	if x != nil {
		return x.Stack
	}
	return nil
}

type DBTransactionEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Completion DBTransactionEnd_CompletionType `protobuf:"varint,1,opt,name=completion,proto3,enum=encore.engine.trace2.DBTransactionEnd_CompletionType" json:"completion,omitempty"`
	Stack      *StackTrace                     `protobuf:"bytes,2,opt,name=stack,proto3" json:"stack,omitempty"`
	Err        *Error                          `protobuf:"bytes,3,opt,name=err,proto3,oneof" json:"err,omitempty"`
}

func (x *DBTransactionEnd) Reset() {
	*x = DBTransactionEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBTransactionEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBTransactionEnd) ProtoMessage() {}

func (x *DBTransactionEnd) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBTransactionEnd.ProtoReflect.Descriptor instead.
func (*DBTransactionEnd) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{18}
}

func (x *DBTransactionEnd) GetCompletion() DBTransactionEnd_CompletionType {
	if x != nil {
		return x.Completion
	}
	return DBTransactionEnd_ROLLBACK
}

func (x *DBTransactionEnd) GetStack() *StackTrace {
	if x != nil {
		return x.Stack
	}
	return nil
}

func (x *DBTransactionEnd) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

type DBQueryStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string      `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Stack *StackTrace `protobuf:"bytes,2,opt,name=stack,proto3" json:"stack,omitempty"`
}

func (x *DBQueryStart) Reset() {
	*x = DBQueryStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBQueryStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBQueryStart) ProtoMessage() {}

func (x *DBQueryStart) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBQueryStart.ProtoReflect.Descriptor instead.
func (*DBQueryStart) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{19}
}

func (x *DBQueryStart) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *DBQueryStart) GetStack() *StackTrace {
	if x != nil {
		return x.Stack
	}
	return nil
}

type DBQueryEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err *Error `protobuf:"bytes,1,opt,name=err,proto3,oneof" json:"err,omitempty"`
}

func (x *DBQueryEnd) Reset() {
	*x = DBQueryEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBQueryEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBQueryEnd) ProtoMessage() {}

func (x *DBQueryEnd) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBQueryEnd.ProtoReflect.Descriptor instead.
func (*DBQueryEnd) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{20}
}

func (x *DBQueryEnd) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

type PubsubPublishStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic   string      `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Message []byte      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Stack   *StackTrace `protobuf:"bytes,3,opt,name=stack,proto3" json:"stack,omitempty"`
}

func (x *PubsubPublishStart) Reset() {
	*x = PubsubPublishStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubsubPublishStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubsubPublishStart) ProtoMessage() {}

func (x *PubsubPublishStart) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubsubPublishStart.ProtoReflect.Descriptor instead.
func (*PubsubPublishStart) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{21}
}

func (x *PubsubPublishStart) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PubsubPublishStart) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *PubsubPublishStart) GetStack() *StackTrace {
	if x != nil {
		return x.Stack
	}
	return nil
}

type PubsubPublishEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId *string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3,oneof" json:"message_id,omitempty"`
	Err       *Error  `protobuf:"bytes,2,opt,name=err,proto3,oneof" json:"err,omitempty"`
}

func (x *PubsubPublishEnd) Reset() {
	*x = PubsubPublishEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubsubPublishEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubsubPublishEnd) ProtoMessage() {}

func (x *PubsubPublishEnd) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubsubPublishEnd.ProtoReflect.Descriptor instead.
func (*PubsubPublishEnd) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{22}
}

func (x *PubsubPublishEnd) GetMessageId() string {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return ""
}

func (x *PubsubPublishEnd) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

type ServiceInitStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *ServiceInitStart) Reset() {
	*x = ServiceInitStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceInitStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInitStart) ProtoMessage() {}

func (x *ServiceInitStart) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInitStart.ProtoReflect.Descriptor instead.
func (*ServiceInitStart) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{23}
}

func (x *ServiceInitStart) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type ServiceInitEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err *Error `protobuf:"bytes,1,opt,name=err,proto3,oneof" json:"err,omitempty"`
}

func (x *ServiceInitEnd) Reset() {
	*x = ServiceInitEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceInitEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInitEnd) ProtoMessage() {}

func (x *ServiceInitEnd) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInitEnd.ProtoReflect.Descriptor instead.
func (*ServiceInitEnd) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{24}
}

func (x *ServiceInitEnd) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

type CacheCallStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation string      `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	Keys      []string    `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	Write     bool        `protobuf:"varint,3,opt,name=write,proto3" json:"write,omitempty"`
	Stack     *StackTrace `protobuf:"bytes,4,opt,name=stack,proto3" json:"stack,omitempty"` // TODO include more info (like inputs)
}

func (x *CacheCallStart) Reset() {
	*x = CacheCallStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheCallStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheCallStart) ProtoMessage() {}

func (x *CacheCallStart) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheCallStart.ProtoReflect.Descriptor instead.
func (*CacheCallStart) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{25}
}

func (x *CacheCallStart) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *CacheCallStart) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *CacheCallStart) GetWrite() bool {
	if x != nil {
		return x.Write
	}
	return false
}

func (x *CacheCallStart) GetStack() *StackTrace {
	if x != nil {
		return x.Stack
	}
	return nil
}

type CacheCallEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result CacheCallEnd_Result `protobuf:"varint,1,opt,name=result,proto3,enum=encore.engine.trace2.CacheCallEnd_Result" json:"result,omitempty"`
	Err    *Error              `protobuf:"bytes,2,opt,name=err,proto3,oneof" json:"err,omitempty"` // TODO include more info (like outputs)
}

func (x *CacheCallEnd) Reset() {
	*x = CacheCallEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheCallEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheCallEnd) ProtoMessage() {}

func (x *CacheCallEnd) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheCallEnd.ProtoReflect.Descriptor instead.
func (*CacheCallEnd) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{26}
}

func (x *CacheCallEnd) GetResult() CacheCallEnd_Result {
	if x != nil {
		return x.Result
	}
	return CacheCallEnd_UNKNOWN
}

func (x *CacheCallEnd) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

type BodyStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsResponse bool   `protobuf:"varint,1,opt,name=is_response,json=isResponse,proto3" json:"is_response,omitempty"`
	Overflowed bool   `protobuf:"varint,2,opt,name=overflowed,proto3" json:"overflowed,omitempty"`
	Data       []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BodyStream) Reset() {
	*x = BodyStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyStream) ProtoMessage() {}

func (x *BodyStream) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyStream.ProtoReflect.Descriptor instead.
func (*BodyStream) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{27}
}

func (x *BodyStream) GetIsResponse() bool {
	if x != nil {
		return x.IsResponse
	}
	return false
}

func (x *BodyStream) GetOverflowed() bool {
	if x != nil {
		return x.Overflowed
	}
	return false
}

func (x *BodyStream) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type HTTPCallStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrelationParentSpanId uint64      `protobuf:"varint,1,opt,name=correlation_parent_span_id,json=correlationParentSpanId,proto3" json:"correlation_parent_span_id,omitempty"`
	Method                  string      `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Url                     string      `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Stack                   *StackTrace `protobuf:"bytes,4,opt,name=stack,proto3" json:"stack,omitempty"`
	// start_nanotime is used to compute timings based on the
	// nanotime in the HTTP trace events.
	StartNanotime int64 `protobuf:"varint,5,opt,name=start_nanotime,json=startNanotime,proto3" json:"start_nanotime,omitempty"`
}

func (x *HTTPCallStart) Reset() {
	*x = HTTPCallStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPCallStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPCallStart) ProtoMessage() {}

func (x *HTTPCallStart) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPCallStart.ProtoReflect.Descriptor instead.
func (*HTTPCallStart) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{28}
}

func (x *HTTPCallStart) GetCorrelationParentSpanId() uint64 {
	if x != nil {
		return x.CorrelationParentSpanId
	}
	return 0
}

func (x *HTTPCallStart) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HTTPCallStart) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HTTPCallStart) GetStack() *StackTrace {
	if x != nil {
		return x.Stack
	}
	return nil
}

func (x *HTTPCallStart) GetStartNanotime() int64 {
	if x != nil {
		return x.StartNanotime
	}
	return 0
}

type HTTPCallEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status_code is set if we got a HTTP response.
	StatusCode *uint32 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3,oneof" json:"status_code,omitempty"`
	// err is set otherwise.
	Err *Error `protobuf:"bytes,2,opt,name=err,proto3,oneof" json:"err,omitempty"`
	// TODO these should be moved to be asynchronous via a separate event.
	TraceEvents []*HTTPTraceEvent `protobuf:"bytes,3,rep,name=trace_events,json=traceEvents,proto3" json:"trace_events,omitempty"`
}

func (x *HTTPCallEnd) Reset() {
	*x = HTTPCallEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPCallEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPCallEnd) ProtoMessage() {}

func (x *HTTPCallEnd) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPCallEnd.ProtoReflect.Descriptor instead.
func (*HTTPCallEnd) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{29}
}

func (x *HTTPCallEnd) GetStatusCode() uint32 {
	if x != nil && x.StatusCode != nil {
		return *x.StatusCode
	}
	return 0
}

func (x *HTTPCallEnd) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *HTTPCallEnd) GetTraceEvents() []*HTTPTraceEvent {
	if x != nil {
		return x.TraceEvents
	}
	return nil
}

type HTTPTraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nanotime int64 `protobuf:"varint,1,opt,name=nanotime,proto3" json:"nanotime,omitempty"`
	// Types that are assignable to Data:
	//
	//	*HTTPTraceEvent_GetConn
	//	*HTTPTraceEvent_GotConn
	//	*HTTPTraceEvent_GotFirstResponseByte
	//	*HTTPTraceEvent_Got_1XxResponse
	//	*HTTPTraceEvent_DnsStart
	//	*HTTPTraceEvent_DnsDone
	//	*HTTPTraceEvent_ConnectStart
	//	*HTTPTraceEvent_ConnectDone
	//	*HTTPTraceEvent_TlsHandshakeStart
	//	*HTTPTraceEvent_TlsHandshakeDone
	//	*HTTPTraceEvent_WroteHeaders
	//	*HTTPTraceEvent_WroteRequest
	//	*HTTPTraceEvent_Wait_100Continue
	//	*HTTPTraceEvent_ClosedBody
	Data isHTTPTraceEvent_Data `protobuf_oneof:"data"`
}

func (x *HTTPTraceEvent) Reset() {
	*x = HTTPTraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPTraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPTraceEvent) ProtoMessage() {}

func (x *HTTPTraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPTraceEvent.ProtoReflect.Descriptor instead.
func (*HTTPTraceEvent) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{30}
}

func (x *HTTPTraceEvent) GetNanotime() int64 {
	if x != nil {
		return x.Nanotime
	}
	return 0
}

func (m *HTTPTraceEvent) GetData() isHTTPTraceEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *HTTPTraceEvent) GetGetConn() *HTTPGetConn {
	if x, ok := x.GetData().(*HTTPTraceEvent_GetConn); ok {
		return x.GetConn
	}
	return nil
}

func (x *HTTPTraceEvent) GetGotConn() *HTTPGotConn {
	if x, ok := x.GetData().(*HTTPTraceEvent_GotConn); ok {
		return x.GotConn
	}
	return nil
}

func (x *HTTPTraceEvent) GetGotFirstResponseByte() *HTTPGotFirstResponseByte {
	if x, ok := x.GetData().(*HTTPTraceEvent_GotFirstResponseByte); ok {
		return x.GotFirstResponseByte
	}
	return nil
}

func (x *HTTPTraceEvent) GetGot_1XxResponse() *HTTPGot1XxResponse {
	if x, ok := x.GetData().(*HTTPTraceEvent_Got_1XxResponse); ok {
		return x.Got_1XxResponse
	}
	return nil
}

func (x *HTTPTraceEvent) GetDnsStart() *HTTPDNSStart {
	if x, ok := x.GetData().(*HTTPTraceEvent_DnsStart); ok {
		return x.DnsStart
	}
	return nil
}

func (x *HTTPTraceEvent) GetDnsDone() *HTTPDNSDone {
	if x, ok := x.GetData().(*HTTPTraceEvent_DnsDone); ok {
		return x.DnsDone
	}
	return nil
}

func (x *HTTPTraceEvent) GetConnectStart() *HTTPConnectStart {
	if x, ok := x.GetData().(*HTTPTraceEvent_ConnectStart); ok {
		return x.ConnectStart
	}
	return nil
}

func (x *HTTPTraceEvent) GetConnectDone() *HTTPConnectDone {
	if x, ok := x.GetData().(*HTTPTraceEvent_ConnectDone); ok {
		return x.ConnectDone
	}
	return nil
}

func (x *HTTPTraceEvent) GetTlsHandshakeStart() *HTTPTLSHandshakeStart {
	if x, ok := x.GetData().(*HTTPTraceEvent_TlsHandshakeStart); ok {
		return x.TlsHandshakeStart
	}
	return nil
}

func (x *HTTPTraceEvent) GetTlsHandshakeDone() *HTTPTLSHandshakeDone {
	if x, ok := x.GetData().(*HTTPTraceEvent_TlsHandshakeDone); ok {
		return x.TlsHandshakeDone
	}
	return nil
}

func (x *HTTPTraceEvent) GetWroteHeaders() *HTTPWroteHeaders {
	if x, ok := x.GetData().(*HTTPTraceEvent_WroteHeaders); ok {
		return x.WroteHeaders
	}
	return nil
}

func (x *HTTPTraceEvent) GetWroteRequest() *HTTPWroteRequest {
	if x, ok := x.GetData().(*HTTPTraceEvent_WroteRequest); ok {
		return x.WroteRequest
	}
	return nil
}

func (x *HTTPTraceEvent) GetWait_100Continue() *HTTPWait100Continue {
	if x, ok := x.GetData().(*HTTPTraceEvent_Wait_100Continue); ok {
		return x.Wait_100Continue
	}
	return nil
}

func (x *HTTPTraceEvent) GetClosedBody() *HTTPClosedBodyData {
	if x, ok := x.GetData().(*HTTPTraceEvent_ClosedBody); ok {
		return x.ClosedBody
	}
	return nil
}

type isHTTPTraceEvent_Data interface {
	isHTTPTraceEvent_Data()
}

type HTTPTraceEvent_GetConn struct {
	GetConn *HTTPGetConn `protobuf:"bytes,2,opt,name=get_conn,json=getConn,proto3,oneof"`
}

type HTTPTraceEvent_GotConn struct {
	GotConn *HTTPGotConn `protobuf:"bytes,3,opt,name=got_conn,json=gotConn,proto3,oneof"`
}

type HTTPTraceEvent_GotFirstResponseByte struct {
	GotFirstResponseByte *HTTPGotFirstResponseByte `protobuf:"bytes,4,opt,name=got_first_response_byte,json=gotFirstResponseByte,proto3,oneof"`
}

type HTTPTraceEvent_Got_1XxResponse struct {
	Got_1XxResponse *HTTPGot1XxResponse `protobuf:"bytes,5,opt,name=got_1xx_response,json=got1xxResponse,proto3,oneof"`
}

type HTTPTraceEvent_DnsStart struct {
	DnsStart *HTTPDNSStart `protobuf:"bytes,6,opt,name=dns_start,json=dnsStart,proto3,oneof"`
}

type HTTPTraceEvent_DnsDone struct {
	DnsDone *HTTPDNSDone `protobuf:"bytes,7,opt,name=dns_done,json=dnsDone,proto3,oneof"`
}

type HTTPTraceEvent_ConnectStart struct {
	ConnectStart *HTTPConnectStart `protobuf:"bytes,8,opt,name=connect_start,json=connectStart,proto3,oneof"`
}

type HTTPTraceEvent_ConnectDone struct {
	ConnectDone *HTTPConnectDone `protobuf:"bytes,9,opt,name=connect_done,json=connectDone,proto3,oneof"`
}

type HTTPTraceEvent_TlsHandshakeStart struct {
	TlsHandshakeStart *HTTPTLSHandshakeStart `protobuf:"bytes,10,opt,name=tls_handshake_start,json=tlsHandshakeStart,proto3,oneof"`
}

type HTTPTraceEvent_TlsHandshakeDone struct {
	TlsHandshakeDone *HTTPTLSHandshakeDone `protobuf:"bytes,11,opt,name=tls_handshake_done,json=tlsHandshakeDone,proto3,oneof"`
}

type HTTPTraceEvent_WroteHeaders struct {
	WroteHeaders *HTTPWroteHeaders `protobuf:"bytes,12,opt,name=wrote_headers,json=wroteHeaders,proto3,oneof"`
}

type HTTPTraceEvent_WroteRequest struct {
	WroteRequest *HTTPWroteRequest `protobuf:"bytes,13,opt,name=wrote_request,json=wroteRequest,proto3,oneof"`
}

type HTTPTraceEvent_Wait_100Continue struct {
	Wait_100Continue *HTTPWait100Continue `protobuf:"bytes,14,opt,name=wait_100_continue,json=wait100Continue,proto3,oneof"`
}

type HTTPTraceEvent_ClosedBody struct {
	ClosedBody *HTTPClosedBodyData `protobuf:"bytes,15,opt,name=closed_body,json=closedBody,proto3,oneof"`
}

func (*HTTPTraceEvent_GetConn) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_GotConn) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_GotFirstResponseByte) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_Got_1XxResponse) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_DnsStart) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_DnsDone) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_ConnectStart) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_ConnectDone) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_TlsHandshakeStart) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_TlsHandshakeDone) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_WroteHeaders) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_WroteRequest) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_Wait_100Continue) isHTTPTraceEvent_Data() {}

func (*HTTPTraceEvent_ClosedBody) isHTTPTraceEvent_Data() {}

type HTTPGetConn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostPort string `protobuf:"bytes,1,opt,name=host_port,json=hostPort,proto3" json:"host_port,omitempty"`
}

func (x *HTTPGetConn) Reset() {
	*x = HTTPGetConn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPGetConn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPGetConn) ProtoMessage() {}

func (x *HTTPGetConn) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPGetConn.ProtoReflect.Descriptor instead.
func (*HTTPGetConn) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{31}
}

func (x *HTTPGetConn) GetHostPort() string {
	if x != nil {
		return x.HostPort
	}
	return ""
}

type HTTPGotConn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reused         bool  `protobuf:"varint,1,opt,name=reused,proto3" json:"reused,omitempty"`
	WasIdle        bool  `protobuf:"varint,2,opt,name=was_idle,json=wasIdle,proto3" json:"was_idle,omitempty"`
	IdleDurationNs int64 `protobuf:"varint,3,opt,name=idle_duration_ns,json=idleDurationNs,proto3" json:"idle_duration_ns,omitempty"`
}

func (x *HTTPGotConn) Reset() {
	*x = HTTPGotConn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPGotConn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPGotConn) ProtoMessage() {}

func (x *HTTPGotConn) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPGotConn.ProtoReflect.Descriptor instead.
func (*HTTPGotConn) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{32}
}

func (x *HTTPGotConn) GetReused() bool {
	if x != nil {
		return x.Reused
	}
	return false
}

func (x *HTTPGotConn) GetWasIdle() bool {
	if x != nil {
		return x.WasIdle
	}
	return false
}

func (x *HTTPGotConn) GetIdleDurationNs() int64 {
	if x != nil {
		return x.IdleDurationNs
	}
	return 0
}

type HTTPGotFirstResponseByte struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HTTPGotFirstResponseByte) Reset() {
	*x = HTTPGotFirstResponseByte{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPGotFirstResponseByte) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPGotFirstResponseByte) ProtoMessage() {}

func (x *HTTPGotFirstResponseByte) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPGotFirstResponseByte.ProtoReflect.Descriptor instead.
func (*HTTPGotFirstResponseByte) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{33}
}

type HTTPGot1XxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *HTTPGot1XxResponse) Reset() {
	*x = HTTPGot1XxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPGot1XxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPGot1XxResponse) ProtoMessage() {}

func (x *HTTPGot1XxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPGot1XxResponse.ProtoReflect.Descriptor instead.
func (*HTTPGot1XxResponse) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{34}
}

func (x *HTTPGot1XxResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type HTTPDNSStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *HTTPDNSStart) Reset() {
	*x = HTTPDNSStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPDNSStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPDNSStart) ProtoMessage() {}

func (x *HTTPDNSStart) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPDNSStart.ProtoReflect.Descriptor instead.
func (*HTTPDNSStart) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{35}
}

func (x *HTTPDNSStart) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type HTTPDNSDone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err   []byte     `protobuf:"bytes,1,opt,name=err,proto3,oneof" json:"err,omitempty"`
	Addrs []*DNSAddr `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (x *HTTPDNSDone) Reset() {
	*x = HTTPDNSDone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPDNSDone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPDNSDone) ProtoMessage() {}

func (x *HTTPDNSDone) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPDNSDone.ProtoReflect.Descriptor instead.
func (*HTTPDNSDone) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{36}
}

func (x *HTTPDNSDone) GetErr() []byte {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *HTTPDNSDone) GetAddrs() []*DNSAddr {
	if x != nil {
		return x.Addrs
	}
	return nil
}

type DNSAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip []byte `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *DNSAddr) Reset() {
	*x = DNSAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSAddr) ProtoMessage() {}

func (x *DNSAddr) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSAddr.ProtoReflect.Descriptor instead.
func (*DNSAddr) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{37}
}

func (x *DNSAddr) GetIp() []byte {
	if x != nil {
		return x.Ip
	}
	return nil
}

type HTTPConnectStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr    string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *HTTPConnectStart) Reset() {
	*x = HTTPConnectStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPConnectStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPConnectStart) ProtoMessage() {}

func (x *HTTPConnectStart) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPConnectStart.ProtoReflect.Descriptor instead.
func (*HTTPConnectStart) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{38}
}

func (x *HTTPConnectStart) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *HTTPConnectStart) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type HTTPConnectDone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Addr    string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Err     []byte `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *HTTPConnectDone) Reset() {
	*x = HTTPConnectDone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPConnectDone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPConnectDone) ProtoMessage() {}

func (x *HTTPConnectDone) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPConnectDone.ProtoReflect.Descriptor instead.
func (*HTTPConnectDone) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{39}
}

func (x *HTTPConnectDone) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *HTTPConnectDone) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *HTTPConnectDone) GetErr() []byte {
	if x != nil {
		return x.Err
	}
	return nil
}

type HTTPTLSHandshakeStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HTTPTLSHandshakeStart) Reset() {
	*x = HTTPTLSHandshakeStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPTLSHandshakeStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPTLSHandshakeStart) ProtoMessage() {}

func (x *HTTPTLSHandshakeStart) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPTLSHandshakeStart.ProtoReflect.Descriptor instead.
func (*HTTPTLSHandshakeStart) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{40}
}

type HTTPTLSHandshakeDone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err                []byte `protobuf:"bytes,1,opt,name=err,proto3,oneof" json:"err,omitempty"`
	TlsVersion         uint32 `protobuf:"varint,2,opt,name=tls_version,json=tlsVersion,proto3" json:"tls_version,omitempty"`
	CipherSuite        uint32 `protobuf:"varint,3,opt,name=cipher_suite,json=cipherSuite,proto3" json:"cipher_suite,omitempty"`
	ServerName         string `protobuf:"bytes,4,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	NegotiatedProtocol string `protobuf:"bytes,5,opt,name=negotiated_protocol,json=negotiatedProtocol,proto3" json:"negotiated_protocol,omitempty"`
}

func (x *HTTPTLSHandshakeDone) Reset() {
	*x = HTTPTLSHandshakeDone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPTLSHandshakeDone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPTLSHandshakeDone) ProtoMessage() {}

func (x *HTTPTLSHandshakeDone) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPTLSHandshakeDone.ProtoReflect.Descriptor instead.
func (*HTTPTLSHandshakeDone) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{41}
}

func (x *HTTPTLSHandshakeDone) GetErr() []byte {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *HTTPTLSHandshakeDone) GetTlsVersion() uint32 {
	if x != nil {
		return x.TlsVersion
	}
	return 0
}

func (x *HTTPTLSHandshakeDone) GetCipherSuite() uint32 {
	if x != nil {
		return x.CipherSuite
	}
	return 0
}

func (x *HTTPTLSHandshakeDone) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *HTTPTLSHandshakeDone) GetNegotiatedProtocol() string {
	if x != nil {
		return x.NegotiatedProtocol
	}
	return ""
}

type HTTPWroteHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HTTPWroteHeaders) Reset() {
	*x = HTTPWroteHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPWroteHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPWroteHeaders) ProtoMessage() {}

func (x *HTTPWroteHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPWroteHeaders.ProtoReflect.Descriptor instead.
func (*HTTPWroteHeaders) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{42}
}

type HTTPWroteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err []byte `protobuf:"bytes,1,opt,name=err,proto3,oneof" json:"err,omitempty"`
}

func (x *HTTPWroteRequest) Reset() {
	*x = HTTPWroteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPWroteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPWroteRequest) ProtoMessage() {}

func (x *HTTPWroteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPWroteRequest.ProtoReflect.Descriptor instead.
func (*HTTPWroteRequest) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{43}
}

func (x *HTTPWroteRequest) GetErr() []byte {
	if x != nil {
		return x.Err
	}
	return nil
}

type HTTPWait100Continue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HTTPWait100Continue) Reset() {
	*x = HTTPWait100Continue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPWait100Continue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPWait100Continue) ProtoMessage() {}

func (x *HTTPWait100Continue) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPWait100Continue.ProtoReflect.Descriptor instead.
func (*HTTPWait100Continue) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{44}
}

type HTTPClosedBodyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err []byte `protobuf:"bytes,1,opt,name=err,proto3,oneof" json:"err,omitempty"`
}

func (x *HTTPClosedBodyData) Reset() {
	*x = HTTPClosedBodyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPClosedBodyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPClosedBodyData) ProtoMessage() {}

func (x *HTTPClosedBodyData) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPClosedBodyData.ProtoReflect.Descriptor instead.
func (*HTTPClosedBodyData) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{45}
}

func (x *HTTPClosedBodyData) GetErr() []byte {
	if x != nil {
		return x.Err
	}
	return nil
}

type LogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level  LogMessage_Level `protobuf:"varint,1,opt,name=level,proto3,enum=encore.engine.trace2.LogMessage_Level" json:"level,omitempty"`
	Msg    string           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Fields []*LogField      `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	Stack  *StackTrace      `protobuf:"bytes,4,opt,name=stack,proto3" json:"stack,omitempty"`
}

func (x *LogMessage) Reset() {
	*x = LogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessage) ProtoMessage() {}

func (x *LogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessage.ProtoReflect.Descriptor instead.
func (*LogMessage) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{46}
}

func (x *LogMessage) GetLevel() LogMessage_Level {
	if x != nil {
		return x.Level
	}
	return LogMessage_DEBUG
}

func (x *LogMessage) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *LogMessage) GetFields() []*LogField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *LogMessage) GetStack() *StackTrace {
	if x != nil {
		return x.Stack
	}
	return nil
}

type LogField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are assignable to Value:
	//
	//	*LogField_Error
	//	*LogField_Str
	//	*LogField_Bool
	//	*LogField_Time
	//	*LogField_Dur
	//	*LogField_Uuid
	//	*LogField_Json
	//	*LogField_Int
	//	*LogField_Uint
	//	*LogField_Float32
	//	*LogField_Float64
	Value isLogField_Value `protobuf_oneof:"value"`
}

func (x *LogField) Reset() {
	*x = LogField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogField) ProtoMessage() {}

func (x *LogField) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogField.ProtoReflect.Descriptor instead.
func (*LogField) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{47}
}

func (x *LogField) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (m *LogField) GetValue() isLogField_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *LogField) GetError() *Error {
	if x, ok := x.GetValue().(*LogField_Error); ok {
		return x.Error
	}
	return nil
}

func (x *LogField) GetStr() string {
	if x, ok := x.GetValue().(*LogField_Str); ok {
		return x.Str
	}
	return ""
}

func (x *LogField) GetBool() bool {
	if x, ok := x.GetValue().(*LogField_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *LogField) GetTime() *timestamppb.Timestamp {
	if x, ok := x.GetValue().(*LogField_Time); ok {
		return x.Time
	}
	return nil
}

func (x *LogField) GetDur() int64 {
	if x, ok := x.GetValue().(*LogField_Dur); ok {
		return x.Dur
	}
	return 0
}

func (x *LogField) GetUuid() []byte {
	if x, ok := x.GetValue().(*LogField_Uuid); ok {
		return x.Uuid
	}
	return nil
}

func (x *LogField) GetJson() []byte {
	if x, ok := x.GetValue().(*LogField_Json); ok {
		return x.Json
	}
	return nil
}

func (x *LogField) GetInt() int64 {
	if x, ok := x.GetValue().(*LogField_Int); ok {
		return x.Int
	}
	return 0
}

func (x *LogField) GetUint() uint64 {
	if x, ok := x.GetValue().(*LogField_Uint); ok {
		return x.Uint
	}
	return 0
}

func (x *LogField) GetFloat32() float32 {
	if x, ok := x.GetValue().(*LogField_Float32); ok {
		return x.Float32
	}
	return 0
}

func (x *LogField) GetFloat64() float64 {
	if x, ok := x.GetValue().(*LogField_Float64); ok {
		return x.Float64
	}
	return 0
}

type isLogField_Value interface {
	isLogField_Value()
}

type LogField_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type LogField_Str struct {
	Str string `protobuf:"bytes,3,opt,name=str,proto3,oneof"`
}

type LogField_Bool struct {
	Bool bool `protobuf:"varint,4,opt,name=bool,proto3,oneof"`
}

type LogField_Time struct {
	Time *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=time,proto3,oneof"`
}

type LogField_Dur struct {
	Dur int64 `protobuf:"varint,6,opt,name=dur,proto3,oneof"`
}

type LogField_Uuid struct {
	Uuid []byte `protobuf:"bytes,7,opt,name=uuid,proto3,oneof"`
}

type LogField_Json struct {
	Json []byte `protobuf:"bytes,8,opt,name=json,proto3,oneof"`
}

type LogField_Int struct {
	Int int64 `protobuf:"varint,9,opt,name=int,proto3,oneof"`
}

type LogField_Uint struct {
	Uint uint64 `protobuf:"varint,10,opt,name=uint,proto3,oneof"`
}

type LogField_Float32 struct {
	Float32 float32 `protobuf:"fixed32,11,opt,name=float32,proto3,oneof"`
}

type LogField_Float64 struct {
	Float64 float64 `protobuf:"fixed64,12,opt,name=float64,proto3,oneof"`
}

func (*LogField_Error) isLogField_Value() {}

func (*LogField_Str) isLogField_Value() {}

func (*LogField_Bool) isLogField_Value() {}

func (*LogField_Time) isLogField_Value() {}

func (*LogField_Dur) isLogField_Value() {}

func (*LogField_Uuid) isLogField_Value() {}

func (*LogField_Json) isLogField_Value() {}

func (*LogField_Int) isLogField_Value() {}

func (*LogField_Uint) isLogField_Value() {}

func (*LogField_Float32) isLogField_Value() {}

func (*LogField_Float64) isLogField_Value() {}

type StackTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pcs    []int64       `protobuf:"varint,1,rep,packed,name=pcs,proto3" json:"pcs,omitempty"`
	Frames []*StackFrame `protobuf:"bytes,2,rep,name=frames,proto3" json:"frames,omitempty"`
}

func (x *StackTrace) Reset() {
	*x = StackTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackTrace) ProtoMessage() {}

func (x *StackTrace) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackTrace.ProtoReflect.Descriptor instead.
func (*StackTrace) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{48}
}

func (x *StackTrace) GetPcs() []int64 {
	if x != nil {
		return x.Pcs
	}
	return nil
}

func (x *StackTrace) GetFrames() []*StackFrame {
	if x != nil {
		return x.Frames
	}
	return nil
}

type StackFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Func     string `protobuf:"bytes,2,opt,name=func,proto3" json:"func,omitempty"`
	Line     int32  `protobuf:"varint,3,opt,name=line,proto3" json:"line,omitempty"`
}

func (x *StackFrame) Reset() {
	*x = StackFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackFrame) ProtoMessage() {}

func (x *StackFrame) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackFrame.ProtoReflect.Descriptor instead.
func (*StackFrame) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{49}
}

func (x *StackFrame) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StackFrame) GetFunc() string {
	if x != nil {
		return x.Func
	}
	return ""
}

func (x *StackFrame) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg   string      `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Stack *StackTrace `protobuf:"bytes,2,opt,name=stack,proto3,oneof" json:"stack,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_engine_trace2_trace2_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_encore_engine_trace2_trace2_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_encore_engine_trace2_trace2_proto_rawDescGZIP(), []int{50}
}

func (x *Error) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Error) GetStack() *StackTrace {
	if x != nil {
		return x.Stack
	}
	return nil
}

var File_encore_engine_trace2_trace2_proto protoreflect.FileDescriptor

var file_encore_engine_trace2_trace2_proto_rawDesc = []byte{
	0x0a, 0x21, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x05, 0x0a, 0x0b, 0x53,
	0x70, 0x61, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x3e,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x65,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e,
	0x53, 0x70, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x22, 0x42, 0x0a, 0x08, 0x53, 0x70, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55,
	0x54, 0x48, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x55, 0x42, 0x53, 0x55, 0x42, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x03, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x2f,
	0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x22,
	0x45, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xfe, 0x02, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x0a, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x3a, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x6e,
	0x64, 0x48, 0x00, 0x52, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x0a,
	0x73, 0x70, 0x61, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xdf, 0x04, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6f, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x44, 0x48, 0x01, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52,
	0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x0d, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a,
	0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x64, 0x65,
	0x66, 0x5f, 0x6c, 0x6f, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x06, 0x64,
	0x65, 0x66, 0x4c, 0x6f, 0x63, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x55, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x64, 0x65, 0x66, 0x5f, 0x6c, 0x6f, 0x63, 0x22, 0xc0, 0x04, 0x0a, 0x07, 0x53, 0x70,
	0x61, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x36, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0b, 0x70, 0x61, 0x6e, 0x69, 0x63, 0x5f, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32,
	0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x48, 0x02, 0x52, 0x0a, 0x70,
	0x61, 0x6e, 0x69, 0x63, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x44, 0x48, 0x03, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x04, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x70, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x53,
	0x0a, 0x0e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x50, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x45,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x6e, 0x69, 0x63, 0x5f,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x83, 0x04, 0x0a,
	0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x68, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x63, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x10, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x41, 0x0a, 0x13,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75,
	0x69, 0x64, 0x22, 0xf1, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x70,
	0x61, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x64, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a,
	0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x42, 0x0a,
	0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x70, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x0b, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xc1, 0x02, 0x0a, 0x16, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x9b, 0x0b, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6f, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x5f, 0x6c, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x64, 0x65, 0x66, 0x4c, 0x6f, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x14, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52,
	0x12, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x0a, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x4a, 0x0a, 0x0e, 0x72, 0x70, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e,
	0x52, 0x50, 0x43, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0c,
	0x72, 0x70, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x44, 0x0a, 0x0c,
	0x72, 0x70, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x52, 0x50, 0x43, 0x43, 0x61, 0x6c,
	0x6c, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x70, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x45,
	0x6e, 0x64, 0x12, 0x5c, 0x0a, 0x14, 0x64, 0x62, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x44, 0x42, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x12, 0x64, 0x62,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x56, 0x0a, 0x12, 0x64, 0x62, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x32, 0x2e, 0x44, 0x42, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x10, 0x64, 0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x4a, 0x0a, 0x0e, 0x64, 0x62, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x44, 0x42, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x64, 0x62, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x32, 0x2e, 0x44, 0x42, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0a,
	0x64, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x12, 0x4d, 0x0a, 0x0f, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x43,
	0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x68, 0x74, 0x74, 0x70,
	0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x6c, 0x6c,
	0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x45,
	0x6e, 0x64, 0x12, 0x5c, 0x0a, 0x14, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x12, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x56, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x32, 0x2e, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x10, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x64, 0x12, 0x50, 0x0a, 0x10, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x12, 0x56, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x50,
	0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x48, 0x00,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x45, 0x6e, 0x64,
	0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x66,
	0x5f, 0x6c, 0x6f, 0x63, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xa8, 0x01,
	0x0a, 0x0c, 0x52, 0x50, 0x43, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x48, 0x0a, 0x0a, 0x52, 0x50, 0x43, 0x43,
	0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65,
	0x72, 0x72, 0x22, 0x10, 0x0a, 0x0e, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x65, 0x45, 0x6e, 0x64, 0x22, 0x4c, 0x0a, 0x12, 0x44, 0x42, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32,
	0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x22, 0x89, 0x02, 0x0a, 0x10, 0x44, 0x42, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x55, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x65, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x32, 0x2e, 0x44, 0x42, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x22, 0x2a, 0x0a, 0x0e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f,
	0x4d, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x22, 0x5c,
	0x0a, 0x0c, 0x44, 0x42, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x48, 0x0a, 0x0a,
	0x44, 0x42, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x03, 0x65, 0x72,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x22, 0x7c, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x22, 0x81, 0x01, 0x0a, 0x10, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x22, 0x2c, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x65, 0x72, 0x72, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12,
	0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x22, 0xd4, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x65,
	0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x22,
	0x45, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x03, 0x12, 0x07, 0x0a,
	0x03, 0x45, 0x52, 0x52, 0x10, 0x04, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x22, 0x61,
	0x0a, 0x0a, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xd5, 0x01, 0x0a, 0x0d, 0x48, 0x54, 0x54, 0x50, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32,
	0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4e, 0x61, 0x6e, 0x6f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x0b, 0x48, 0x54,
	0x54, 0x50, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x03, 0x65, 0x72, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x65, 0x72, 0x72, 0x22, 0x90, 0x09, 0x0a, 0x0e, 0x48, 0x54, 0x54, 0x50, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x61, 0x6e, 0x6f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x61, 0x6e, 0x6f, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x67, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x47, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x67, 0x6f, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x12, 0x67, 0x0a, 0x17, 0x67, 0x6f, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x47, 0x6f, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x48, 0x00, 0x52, 0x14, 0x67, 0x6f, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x10,
	0x67, 0x6f, 0x74, 0x5f, 0x31, 0x78, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x47, 0x6f, 0x74, 0x31, 0x78, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x67, 0x6f, 0x74, 0x31, 0x78, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x44, 0x4e, 0x53, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6e, 0x73,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6e,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x07, 0x64, 0x6e,
	0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x32, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f,
	0x64, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x32, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x6e,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x6e, 0x65,
	0x12, 0x5d, 0x0a, 0x13, 0x74, 0x6c, 0x73, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x32, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x54, 0x4c, 0x53, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x11, 0x74, 0x6c,
	0x73, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x5a, 0x0a, 0x12, 0x74, 0x6c, 0x73, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65,
	0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x32, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x54, 0x4c, 0x53, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68,
	0x61, 0x6b, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x10, 0x74, 0x6c, 0x73, 0x48, 0x61,
	0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x77,
	0x72, 0x6f, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x57, 0x72,
	0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x72,
	0x6f, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x77, 0x72,
	0x6f, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x57, 0x72, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x72, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x11, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x57, 0x61, 0x69, 0x74, 0x31, 0x30, 0x30, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x31, 0x30, 0x30, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x42,
	0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2a, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x22, 0x6a, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x47, 0x6f, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x75, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x75, 0x73, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61,
	0x73, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x61,
	0x73, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x69, 0x64, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x73, 0x22,
	0x1a, 0x0a, 0x18, 0x48, 0x54, 0x54, 0x50, 0x47, 0x6f, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x79, 0x74, 0x65, 0x22, 0x28, 0x0a, 0x12, 0x48,
	0x54, 0x54, 0x50, 0x47, 0x6f, 0x74, 0x31, 0x78, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x44, 0x4e, 0x53,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x0b, 0x48, 0x54, 0x54,
	0x50, 0x44, 0x4e, 0x53, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x44, 0x4e, 0x53, 0x41, 0x64, 0x64, 0x72, 0x52, 0x05, 0x61,
	0x64, 0x64, 0x72, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x22, 0x19, 0x0a, 0x07,
	0x44, 0x4e, 0x53, 0x41, 0x64, 0x64, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x70, 0x22, 0x40, 0x0a, 0x10, 0x48, 0x54, 0x54, 0x50, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x22, 0x51, 0x0a, 0x0f, 0x48, 0x54, 0x54,
	0x50, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x17, 0x0a, 0x15,
	0x48, 0x54, 0x54, 0x50, 0x54, 0x4c, 0x53, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x14, 0x48, 0x54, 0x54, 0x50, 0x54, 0x4c,
	0x53, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x15,
	0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x03, 0x65,
	0x72, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6c, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x6e, 0x65,
	0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x65, 0x72, 0x72, 0x22, 0x12, 0x0a, 0x10, 0x48, 0x54, 0x54, 0x50, 0x57, 0x72, 0x6f, 0x74, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x31, 0x0a, 0x10, 0x48, 0x54, 0x54, 0x50, 0x57,
	0x72, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x65,
	0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88,
	0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x22, 0x15, 0x0a, 0x13, 0x48, 0x54,
	0x54, 0x50, 0x57, 0x61, 0x69, 0x74, 0x31, 0x30, 0x30, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x65, 0x22, 0x33, 0x0a, 0x12, 0x48, 0x54, 0x54, 0x50, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x42,
	0x6f, 0x64, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x65, 0x72, 0x72, 0x22, 0x8a, 0x02, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x4c, 0x6f, 0x67,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x36, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x3c, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x09,
	0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43,
	0x45, 0x10, 0x04, 0x22, 0xd8, 0x02, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x62,
	0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f,
	0x6c, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x64, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x03, 0x64, 0x75, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x6a,
	0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x75, 0x69, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x75, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00,
	0x52, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x12, 0x1a, 0x0a, 0x07, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x07, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x36, 0x34, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x58,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x70, 0x63, 0x73, 0x12, 0x38,
	0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x60, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2a, 0xb1, 0x02, 0x0a,
	0x12, 0x48, 0x54, 0x54, 0x50, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x47, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x47, 0x4f, 0x54, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x4f, 0x54,
	0x5f, 0x31, 0x58, 0x58, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x4e, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x05, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x4e, 0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x07, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10,
	0x08, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x4c, 0x53, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x48, 0x41,
	0x4b, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x4c,
	0x53, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x5f, 0x44, 0x4f, 0x4e, 0x45,
	0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x52, 0x4f, 0x54, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44,
	0x45, 0x52, 0x53, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x52, 0x4f, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x31, 0x30, 0x30, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x10, 0x0d, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x10, 0x0e,
	0x42, 0x25, 0x5a, 0x23, 0x65, 0x6e, 0x63, 0x72, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_encore_engine_trace2_trace2_proto_rawDescOnce sync.Once
	file_encore_engine_trace2_trace2_proto_rawDescData = file_encore_engine_trace2_trace2_proto_rawDesc
)

func file_encore_engine_trace2_trace2_proto_rawDescGZIP() []byte {
	file_encore_engine_trace2_trace2_proto_rawDescOnce.Do(func() {
		file_encore_engine_trace2_trace2_proto_rawDescData = protoimpl.X.CompressGZIP(file_encore_engine_trace2_trace2_proto_rawDescData)
	})
	return file_encore_engine_trace2_trace2_proto_rawDescData
}

var file_encore_engine_trace2_trace2_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_encore_engine_trace2_trace2_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_encore_engine_trace2_trace2_proto_goTypes = []interface{}{
	(HTTPTraceEventCode)(0),              // 0: encore.engine.trace2.HTTPTraceEventCode
	(SpanSummary_SpanType)(0),            // 1: encore.engine.trace2.SpanSummary.SpanType
	(DBTransactionEnd_CompletionType)(0), // 2: encore.engine.trace2.DBTransactionEnd.CompletionType
	(CacheCallEnd_Result)(0),             // 3: encore.engine.trace2.CacheCallEnd.Result
	(LogMessage_Level)(0),                // 4: encore.engine.trace2.LogMessage.Level
	(*SpanSummary)(nil),                  // 5: encore.engine.trace2.SpanSummary
	(*TraceID)(nil),                      // 6: encore.engine.trace2.TraceID
	(*EventList)(nil),                    // 7: encore.engine.trace2.EventList
	(*TraceEvent)(nil),                   // 8: encore.engine.trace2.TraceEvent
	(*SpanStart)(nil),                    // 9: encore.engine.trace2.SpanStart
	(*SpanEnd)(nil),                      // 10: encore.engine.trace2.SpanEnd
	(*RequestSpanStart)(nil),             // 11: encore.engine.trace2.RequestSpanStart
	(*RequestSpanEnd)(nil),               // 12: encore.engine.trace2.RequestSpanEnd
	(*AuthSpanStart)(nil),                // 13: encore.engine.trace2.AuthSpanStart
	(*AuthSpanEnd)(nil),                  // 14: encore.engine.trace2.AuthSpanEnd
	(*PubsubMessageSpanStart)(nil),       // 15: encore.engine.trace2.PubsubMessageSpanStart
	(*PubsubMessageSpanEnd)(nil),         // 16: encore.engine.trace2.PubsubMessageSpanEnd
	(*SpanEvent)(nil),                    // 17: encore.engine.trace2.SpanEvent
	(*RPCCallStart)(nil),                 // 18: encore.engine.trace2.RPCCallStart
	(*RPCCallEnd)(nil),                   // 19: encore.engine.trace2.RPCCallEnd
	(*GoroutineStart)(nil),               // 20: encore.engine.trace2.GoroutineStart
	(*GoroutineEnd)(nil),                 // 21: encore.engine.trace2.GoroutineEnd
	(*DBTransactionStart)(nil),           // 22: encore.engine.trace2.DBTransactionStart
	(*DBTransactionEnd)(nil),             // 23: encore.engine.trace2.DBTransactionEnd
	(*DBQueryStart)(nil),                 // 24: encore.engine.trace2.DBQueryStart
	(*DBQueryEnd)(nil),                   // 25: encore.engine.trace2.DBQueryEnd
	(*PubsubPublishStart)(nil),           // 26: encore.engine.trace2.PubsubPublishStart
	(*PubsubPublishEnd)(nil),             // 27: encore.engine.trace2.PubsubPublishEnd
	(*ServiceInitStart)(nil),             // 28: encore.engine.trace2.ServiceInitStart
	(*ServiceInitEnd)(nil),               // 29: encore.engine.trace2.ServiceInitEnd
	(*CacheCallStart)(nil),               // 30: encore.engine.trace2.CacheCallStart
	(*CacheCallEnd)(nil),                 // 31: encore.engine.trace2.CacheCallEnd
	(*BodyStream)(nil),                   // 32: encore.engine.trace2.BodyStream
	(*HTTPCallStart)(nil),                // 33: encore.engine.trace2.HTTPCallStart
	(*HTTPCallEnd)(nil),                  // 34: encore.engine.trace2.HTTPCallEnd
	(*HTTPTraceEvent)(nil),               // 35: encore.engine.trace2.HTTPTraceEvent
	(*HTTPGetConn)(nil),                  // 36: encore.engine.trace2.HTTPGetConn
	(*HTTPGotConn)(nil),                  // 37: encore.engine.trace2.HTTPGotConn
	(*HTTPGotFirstResponseByte)(nil),     // 38: encore.engine.trace2.HTTPGotFirstResponseByte
	(*HTTPGot1XxResponse)(nil),           // 39: encore.engine.trace2.HTTPGot1xxResponse
	(*HTTPDNSStart)(nil),                 // 40: encore.engine.trace2.HTTPDNSStart
	(*HTTPDNSDone)(nil),                  // 41: encore.engine.trace2.HTTPDNSDone
	(*DNSAddr)(nil),                      // 42: encore.engine.trace2.DNSAddr
	(*HTTPConnectStart)(nil),             // 43: encore.engine.trace2.HTTPConnectStart
	(*HTTPConnectDone)(nil),              // 44: encore.engine.trace2.HTTPConnectDone
	(*HTTPTLSHandshakeStart)(nil),        // 45: encore.engine.trace2.HTTPTLSHandshakeStart
	(*HTTPTLSHandshakeDone)(nil),         // 46: encore.engine.trace2.HTTPTLSHandshakeDone
	(*HTTPWroteHeaders)(nil),             // 47: encore.engine.trace2.HTTPWroteHeaders
	(*HTTPWroteRequest)(nil),             // 48: encore.engine.trace2.HTTPWroteRequest
	(*HTTPWait100Continue)(nil),          // 49: encore.engine.trace2.HTTPWait100Continue
	(*HTTPClosedBodyData)(nil),           // 50: encore.engine.trace2.HTTPClosedBodyData
	(*LogMessage)(nil),                   // 51: encore.engine.trace2.LogMessage
	(*LogField)(nil),                     // 52: encore.engine.trace2.LogField
	(*StackTrace)(nil),                   // 53: encore.engine.trace2.StackTrace
	(*StackFrame)(nil),                   // 54: encore.engine.trace2.StackFrame
	(*Error)(nil),                        // 55: encore.engine.trace2.Error
	nil,                                  // 56: encore.engine.trace2.RequestSpanStart.RequestHeadersEntry
	nil,                                  // 57: encore.engine.trace2.RequestSpanEnd.ResponseHeadersEntry
	(*timestamppb.Timestamp)(nil),        // 58: google.protobuf.Timestamp
}
var file_encore_engine_trace2_trace2_proto_depIdxs = []int32{
	1,  // 0: encore.engine.trace2.SpanSummary.type:type_name -> encore.engine.trace2.SpanSummary.SpanType
	58, // 1: encore.engine.trace2.SpanSummary.started_at:type_name -> google.protobuf.Timestamp
	8,  // 2: encore.engine.trace2.EventList.events:type_name -> encore.engine.trace2.TraceEvent
	6,  // 3: encore.engine.trace2.TraceEvent.trace_id:type_name -> encore.engine.trace2.TraceID
	58, // 4: encore.engine.trace2.TraceEvent.event_time:type_name -> google.protobuf.Timestamp
	9,  // 5: encore.engine.trace2.TraceEvent.span_start:type_name -> encore.engine.trace2.SpanStart
	10, // 6: encore.engine.trace2.TraceEvent.span_end:type_name -> encore.engine.trace2.SpanEnd
	17, // 7: encore.engine.trace2.TraceEvent.span_event:type_name -> encore.engine.trace2.SpanEvent
	6,  // 8: encore.engine.trace2.SpanStart.parent_trace_id:type_name -> encore.engine.trace2.TraceID
	11, // 9: encore.engine.trace2.SpanStart.request:type_name -> encore.engine.trace2.RequestSpanStart
	13, // 10: encore.engine.trace2.SpanStart.auth:type_name -> encore.engine.trace2.AuthSpanStart
	15, // 11: encore.engine.trace2.SpanStart.pubsub_message:type_name -> encore.engine.trace2.PubsubMessageSpanStart
	55, // 12: encore.engine.trace2.SpanEnd.error:type_name -> encore.engine.trace2.Error
	53, // 13: encore.engine.trace2.SpanEnd.panic_stack:type_name -> encore.engine.trace2.StackTrace
	6,  // 14: encore.engine.trace2.SpanEnd.parent_trace_id:type_name -> encore.engine.trace2.TraceID
	12, // 15: encore.engine.trace2.SpanEnd.request:type_name -> encore.engine.trace2.RequestSpanEnd
	14, // 16: encore.engine.trace2.SpanEnd.auth:type_name -> encore.engine.trace2.AuthSpanEnd
	16, // 17: encore.engine.trace2.SpanEnd.pubsub_message:type_name -> encore.engine.trace2.PubsubMessageSpanEnd
	56, // 18: encore.engine.trace2.RequestSpanStart.request_headers:type_name -> encore.engine.trace2.RequestSpanStart.RequestHeadersEntry
	57, // 19: encore.engine.trace2.RequestSpanEnd.response_headers:type_name -> encore.engine.trace2.RequestSpanEnd.ResponseHeadersEntry
	58, // 20: encore.engine.trace2.PubsubMessageSpanStart.publish_time:type_name -> google.protobuf.Timestamp
	51, // 21: encore.engine.trace2.SpanEvent.log_message:type_name -> encore.engine.trace2.LogMessage
	32, // 22: encore.engine.trace2.SpanEvent.body_stream:type_name -> encore.engine.trace2.BodyStream
	18, // 23: encore.engine.trace2.SpanEvent.rpc_call_start:type_name -> encore.engine.trace2.RPCCallStart
	19, // 24: encore.engine.trace2.SpanEvent.rpc_call_end:type_name -> encore.engine.trace2.RPCCallEnd
	22, // 25: encore.engine.trace2.SpanEvent.db_transaction_start:type_name -> encore.engine.trace2.DBTransactionStart
	23, // 26: encore.engine.trace2.SpanEvent.db_transaction_end:type_name -> encore.engine.trace2.DBTransactionEnd
	24, // 27: encore.engine.trace2.SpanEvent.db_query_start:type_name -> encore.engine.trace2.DBQueryStart
	25, // 28: encore.engine.trace2.SpanEvent.db_query_end:type_name -> encore.engine.trace2.DBQueryEnd
	33, // 29: encore.engine.trace2.SpanEvent.http_call_start:type_name -> encore.engine.trace2.HTTPCallStart
	34, // 30: encore.engine.trace2.SpanEvent.http_call_end:type_name -> encore.engine.trace2.HTTPCallEnd
	26, // 31: encore.engine.trace2.SpanEvent.pubsub_publish_start:type_name -> encore.engine.trace2.PubsubPublishStart
	27, // 32: encore.engine.trace2.SpanEvent.pubsub_publish_end:type_name -> encore.engine.trace2.PubsubPublishEnd
	30, // 33: encore.engine.trace2.SpanEvent.cache_call_start:type_name -> encore.engine.trace2.CacheCallStart
	31, // 34: encore.engine.trace2.SpanEvent.cache_call_end:type_name -> encore.engine.trace2.CacheCallEnd
	28, // 35: encore.engine.trace2.SpanEvent.service_init_start:type_name -> encore.engine.trace2.ServiceInitStart
	29, // 36: encore.engine.trace2.SpanEvent.service_init_end:type_name -> encore.engine.trace2.ServiceInitEnd
	53, // 37: encore.engine.trace2.RPCCallStart.stack:type_name -> encore.engine.trace2.StackTrace
	55, // 38: encore.engine.trace2.RPCCallEnd.err:type_name -> encore.engine.trace2.Error
	53, // 39: encore.engine.trace2.DBTransactionStart.stack:type_name -> encore.engine.trace2.StackTrace
	2,  // 40: encore.engine.trace2.DBTransactionEnd.completion:type_name -> encore.engine.trace2.DBTransactionEnd.CompletionType
	53, // 41: encore.engine.trace2.DBTransactionEnd.stack:type_name -> encore.engine.trace2.StackTrace
	55, // 42: encore.engine.trace2.DBTransactionEnd.err:type_name -> encore.engine.trace2.Error
	53, // 43: encore.engine.trace2.DBQueryStart.stack:type_name -> encore.engine.trace2.StackTrace
	55, // 44: encore.engine.trace2.DBQueryEnd.err:type_name -> encore.engine.trace2.Error
	53, // 45: encore.engine.trace2.PubsubPublishStart.stack:type_name -> encore.engine.trace2.StackTrace
	55, // 46: encore.engine.trace2.PubsubPublishEnd.err:type_name -> encore.engine.trace2.Error
	55, // 47: encore.engine.trace2.ServiceInitEnd.err:type_name -> encore.engine.trace2.Error
	53, // 48: encore.engine.trace2.CacheCallStart.stack:type_name -> encore.engine.trace2.StackTrace
	3,  // 49: encore.engine.trace2.CacheCallEnd.result:type_name -> encore.engine.trace2.CacheCallEnd.Result
	55, // 50: encore.engine.trace2.CacheCallEnd.err:type_name -> encore.engine.trace2.Error
	53, // 51: encore.engine.trace2.HTTPCallStart.stack:type_name -> encore.engine.trace2.StackTrace
	55, // 52: encore.engine.trace2.HTTPCallEnd.err:type_name -> encore.engine.trace2.Error
	35, // 53: encore.engine.trace2.HTTPCallEnd.trace_events:type_name -> encore.engine.trace2.HTTPTraceEvent
	36, // 54: encore.engine.trace2.HTTPTraceEvent.get_conn:type_name -> encore.engine.trace2.HTTPGetConn
	37, // 55: encore.engine.trace2.HTTPTraceEvent.got_conn:type_name -> encore.engine.trace2.HTTPGotConn
	38, // 56: encore.engine.trace2.HTTPTraceEvent.got_first_response_byte:type_name -> encore.engine.trace2.HTTPGotFirstResponseByte
	39, // 57: encore.engine.trace2.HTTPTraceEvent.got_1xx_response:type_name -> encore.engine.trace2.HTTPGot1xxResponse
	40, // 58: encore.engine.trace2.HTTPTraceEvent.dns_start:type_name -> encore.engine.trace2.HTTPDNSStart
	41, // 59: encore.engine.trace2.HTTPTraceEvent.dns_done:type_name -> encore.engine.trace2.HTTPDNSDone
	43, // 60: encore.engine.trace2.HTTPTraceEvent.connect_start:type_name -> encore.engine.trace2.HTTPConnectStart
	44, // 61: encore.engine.trace2.HTTPTraceEvent.connect_done:type_name -> encore.engine.trace2.HTTPConnectDone
	45, // 62: encore.engine.trace2.HTTPTraceEvent.tls_handshake_start:type_name -> encore.engine.trace2.HTTPTLSHandshakeStart
	46, // 63: encore.engine.trace2.HTTPTraceEvent.tls_handshake_done:type_name -> encore.engine.trace2.HTTPTLSHandshakeDone
	47, // 64: encore.engine.trace2.HTTPTraceEvent.wrote_headers:type_name -> encore.engine.trace2.HTTPWroteHeaders
	48, // 65: encore.engine.trace2.HTTPTraceEvent.wrote_request:type_name -> encore.engine.trace2.HTTPWroteRequest
	49, // 66: encore.engine.trace2.HTTPTraceEvent.wait_100_continue:type_name -> encore.engine.trace2.HTTPWait100Continue
	50, // 67: encore.engine.trace2.HTTPTraceEvent.closed_body:type_name -> encore.engine.trace2.HTTPClosedBodyData
	42, // 68: encore.engine.trace2.HTTPDNSDone.addrs:type_name -> encore.engine.trace2.DNSAddr
	4,  // 69: encore.engine.trace2.LogMessage.level:type_name -> encore.engine.trace2.LogMessage.Level
	52, // 70: encore.engine.trace2.LogMessage.fields:type_name -> encore.engine.trace2.LogField
	53, // 71: encore.engine.trace2.LogMessage.stack:type_name -> encore.engine.trace2.StackTrace
	55, // 72: encore.engine.trace2.LogField.error:type_name -> encore.engine.trace2.Error
	58, // 73: encore.engine.trace2.LogField.time:type_name -> google.protobuf.Timestamp
	54, // 74: encore.engine.trace2.StackTrace.frames:type_name -> encore.engine.trace2.StackFrame
	53, // 75: encore.engine.trace2.Error.stack:type_name -> encore.engine.trace2.StackTrace
	76, // [76:76] is the sub-list for method output_type
	76, // [76:76] is the sub-list for method input_type
	76, // [76:76] is the sub-list for extension type_name
	76, // [76:76] is the sub-list for extension extendee
	0,  // [0:76] is the sub-list for field type_name
}

func init() { file_encore_engine_trace2_trace2_proto_init() }
func file_encore_engine_trace2_trace2_proto_init() {
	if File_encore_engine_trace2_trace2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_encore_engine_trace2_trace2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSpanStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSpanEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthSpanStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthSpanEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubsubMessageSpanStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubsubMessageSpanEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPCCallStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPCCallEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoroutineStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoroutineEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBTransactionStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBTransactionEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBQueryStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBQueryEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubsubPublishStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubsubPublishEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceInitStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceInitEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheCallStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheCallEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPCallStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPCallEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPTraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPGetConn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPGotConn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPGotFirstResponseByte); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPGot1XxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPDNSStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPDNSDone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPConnectStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPConnectDone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPTLSHandshakeStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPTLSHandshakeDone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPWroteHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPWroteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPWait100Continue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPClosedBodyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_engine_trace2_trace2_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_encore_engine_trace2_trace2_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_encore_engine_trace2_trace2_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*TraceEvent_SpanStart)(nil),
		(*TraceEvent_SpanEnd)(nil),
		(*TraceEvent_SpanEvent)(nil),
	}
	file_encore_engine_trace2_trace2_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*SpanStart_Request)(nil),
		(*SpanStart_Auth)(nil),
		(*SpanStart_PubsubMessage)(nil),
	}
	file_encore_engine_trace2_trace2_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*SpanEnd_Request)(nil),
		(*SpanEnd_Auth)(nil),
		(*SpanEnd_PubsubMessage)(nil),
	}
	file_encore_engine_trace2_trace2_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_encore_engine_trace2_trace2_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_encore_engine_trace2_trace2_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_encore_engine_trace2_trace2_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_encore_engine_trace2_trace2_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_encore_engine_trace2_trace2_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*SpanEvent_LogMessage)(nil),
		(*SpanEvent_BodyStream)(nil),
		(*SpanEvent_RpcCallStart)(nil),
		(*SpanEvent_RpcCallEnd)(nil),
		(*SpanEvent_DbTransactionStart)(nil),
		(*SpanEvent_DbTransactionEnd)(nil),
		(*SpanEvent_DbQueryStart)(nil),
		(*SpanEvent_DbQueryEnd)(nil),
		(*SpanEvent_HttpCallStart)(nil),
		(*SpanEvent_HttpCallEnd)(nil),
		(*SpanEvent_PubsubPublishStart)(nil),
		(*SpanEvent_PubsubPublishEnd)(nil),
		(*SpanEvent_CacheCallStart)(nil),
		(*SpanEvent_CacheCallEnd)(nil),
		(*SpanEvent_ServiceInitStart)(nil),
		(*SpanEvent_ServiceInitEnd)(nil),
	}
	file_encore_engine_trace2_trace2_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_encore_engine_trace2_trace2_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_encore_engine_trace2_trace2_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_encore_engine_trace2_trace2_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_encore_engine_trace2_trace2_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_encore_engine_trace2_trace2_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_encore_engine_trace2_trace2_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_encore_engine_trace2_trace2_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*HTTPTraceEvent_GetConn)(nil),
		(*HTTPTraceEvent_GotConn)(nil),
		(*HTTPTraceEvent_GotFirstResponseByte)(nil),
		(*HTTPTraceEvent_Got_1XxResponse)(nil),
		(*HTTPTraceEvent_DnsStart)(nil),
		(*HTTPTraceEvent_DnsDone)(nil),
		(*HTTPTraceEvent_ConnectStart)(nil),
		(*HTTPTraceEvent_ConnectDone)(nil),
		(*HTTPTraceEvent_TlsHandshakeStart)(nil),
		(*HTTPTraceEvent_TlsHandshakeDone)(nil),
		(*HTTPTraceEvent_WroteHeaders)(nil),
		(*HTTPTraceEvent_WroteRequest)(nil),
		(*HTTPTraceEvent_Wait_100Continue)(nil),
		(*HTTPTraceEvent_ClosedBody)(nil),
	}
	file_encore_engine_trace2_trace2_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_encore_engine_trace2_trace2_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_encore_engine_trace2_trace2_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_encore_engine_trace2_trace2_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_encore_engine_trace2_trace2_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*LogField_Error)(nil),
		(*LogField_Str)(nil),
		(*LogField_Bool)(nil),
		(*LogField_Time)(nil),
		(*LogField_Dur)(nil),
		(*LogField_Uuid)(nil),
		(*LogField_Json)(nil),
		(*LogField_Int)(nil),
		(*LogField_Uint)(nil),
		(*LogField_Float32)(nil),
		(*LogField_Float64)(nil),
	}
	file_encore_engine_trace2_trace2_proto_msgTypes[50].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_encore_engine_trace2_trace2_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_encore_engine_trace2_trace2_proto_goTypes,
		DependencyIndexes: file_encore_engine_trace2_trace2_proto_depIdxs,
		EnumInfos:         file_encore_engine_trace2_trace2_proto_enumTypes,
		MessageInfos:      file_encore_engine_trace2_trace2_proto_msgTypes,
	}.Build()
	File_encore_engine_trace2_trace2_proto = out.File
	file_encore_engine_trace2_trace2_proto_rawDesc = nil
	file_encore_engine_trace2_trace2_proto_goTypes = nil
	file_encore_engine_trace2_trace2_proto_depIdxs = nil
}
