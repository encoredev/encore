syntax = "proto3";
package encore.runtime.v1;

option go_package = "encr.dev/proto/encore/runtime/v1;runtimev1";

// Defines how to resolve a secret value.
message SecretData {
  // How to resolve the initial secret value.
  // The output of this step is always a byte slice.
  oneof source {
    // The secret data is embedded directly in the configuration.
    // This is insecure unless `encrypted` is true, and should only
    // be used for local development.
    bytes embedded = 1;

    // Look up the secret data in an env variable with the given name.
    // Assumes the
    string env = 2;
  }
  reserved 3 to 9; // for future sources

  // How the value is encoded.
  Encoding encoding = 20;

  // sub_path is an optional path to a sub-value within the secret data.
  oneof sub_path {
    // json_key indicates the secret data is a JSON map,
    // and the resolved secret value is a key in that map.
    //
    // The value is encoded differently based on its type.
    // Supported types are utf-8 strings and raw bytes:
    // - For strings, the value is the string itself, e.g. "foo".
    // - For raw bytes, the value is a JSON object with a single key "bytes" and the value is the base64-encoded bytes.
    //
    // For example: '{"foo": "string-value", "bar": {"bytes": "aGVsbG8="}}'.
    string json_key = 10;

    // null: the raw secret data is the resolved value.
  }
  reserved 12 to 19; // for future sub_paths

  enum Encoding {
    // Indicates the value is used as-is.
    ENCODING_NONE = 0;
    // Indicates the value is base64-encoded.
    ENCODING_BASE64      = 1;
  }
}
