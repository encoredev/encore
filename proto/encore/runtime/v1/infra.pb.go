// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: encore/runtime/v1/infra.proto

package runtimev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServerKind int32

const (
	ServerKind_SERVER_KIND_UNSPECIFIED ServerKind = 0
	ServerKind_SERVER_KIND_PRIMARY     ServerKind = 1
	// A hot-standby (a read replica designed to take over write traffic
	// at a moment's notice).
	ServerKind_SERVER_KIND_HOT_STANDBY ServerKind = 2
	// A read-replica.
	ServerKind_SERVER_KIND_READ_REPLICA ServerKind = 3
)

// Enum value maps for ServerKind.
var (
	ServerKind_name = map[int32]string{
		0: "SERVER_KIND_UNSPECIFIED",
		1: "SERVER_KIND_PRIMARY",
		2: "SERVER_KIND_HOT_STANDBY",
		3: "SERVER_KIND_READ_REPLICA",
	}
	ServerKind_value = map[string]int32{
		"SERVER_KIND_UNSPECIFIED":  0,
		"SERVER_KIND_PRIMARY":      1,
		"SERVER_KIND_HOT_STANDBY":  2,
		"SERVER_KIND_READ_REPLICA": 3,
	}
)

func (x ServerKind) Enum() *ServerKind {
	p := new(ServerKind)
	*p = x
	return p
}

func (x ServerKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerKind) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_runtime_v1_infra_proto_enumTypes[0].Descriptor()
}

func (ServerKind) Type() protoreflect.EnumType {
	return &file_encore_runtime_v1_infra_proto_enumTypes[0]
}

func (x ServerKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerKind.Descriptor instead.
func (ServerKind) EnumDescriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{0}
}

type PubSubTopic_DeliveryGuarantee int32

const (
	PubSubTopic_DELIVERY_GUARANTEE_UNSPECIFIED   PubSubTopic_DeliveryGuarantee = 0
	PubSubTopic_DELIVERY_GUARANTEE_AT_LEAST_ONCE PubSubTopic_DeliveryGuarantee = 1 // All messages will be delivered to each subscription at least once
	PubSubTopic_DELIVERY_GUARANTEE_EXACTLY_ONCE  PubSubTopic_DeliveryGuarantee = 2 // All messages will be delivered to each subscription exactly once
)

// Enum value maps for PubSubTopic_DeliveryGuarantee.
var (
	PubSubTopic_DeliveryGuarantee_name = map[int32]string{
		0: "DELIVERY_GUARANTEE_UNSPECIFIED",
		1: "DELIVERY_GUARANTEE_AT_LEAST_ONCE",
		2: "DELIVERY_GUARANTEE_EXACTLY_ONCE",
	}
	PubSubTopic_DeliveryGuarantee_value = map[string]int32{
		"DELIVERY_GUARANTEE_UNSPECIFIED":   0,
		"DELIVERY_GUARANTEE_AT_LEAST_ONCE": 1,
		"DELIVERY_GUARANTEE_EXACTLY_ONCE":  2,
	}
)

func (x PubSubTopic_DeliveryGuarantee) Enum() *PubSubTopic_DeliveryGuarantee {
	p := new(PubSubTopic_DeliveryGuarantee)
	*p = x
	return p
}

func (x PubSubTopic_DeliveryGuarantee) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PubSubTopic_DeliveryGuarantee) Descriptor() protoreflect.EnumDescriptor {
	return file_encore_runtime_v1_infra_proto_enumTypes[1].Descriptor()
}

func (PubSubTopic_DeliveryGuarantee) Type() protoreflect.EnumType {
	return &file_encore_runtime_v1_infra_proto_enumTypes[1]
}

func (x PubSubTopic_DeliveryGuarantee) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PubSubTopic_DeliveryGuarantee.Descriptor instead.
func (PubSubTopic_DeliveryGuarantee) EnumDescriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{15, 0}
}

type Infrastructure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources   *Infrastructure_Resources   `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	Credentials *Infrastructure_Credentials `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *Infrastructure) Reset() {
	*x = Infrastructure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Infrastructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Infrastructure) ProtoMessage() {}

func (x *Infrastructure) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Infrastructure.ProtoReflect.Descriptor instead.
func (*Infrastructure) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{0}
}

func (x *Infrastructure) GetResources() *Infrastructure_Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Infrastructure) GetCredentials() *Infrastructure_Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type SQLCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique resource id for this cluster.
	Rid       string         `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	Servers   []*SQLServer   `protobuf:"bytes,2,rep,name=servers,proto3" json:"servers,omitempty"`
	Databases []*SQLDatabase `protobuf:"bytes,3,rep,name=databases,proto3" json:"databases,omitempty"`
}

func (x *SQLCluster) Reset() {
	*x = SQLCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLCluster) ProtoMessage() {}

func (x *SQLCluster) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLCluster.ProtoReflect.Descriptor instead.
func (*SQLCluster) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{1}
}

func (x *SQLCluster) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *SQLCluster) GetServers() []*SQLServer {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *SQLCluster) GetDatabases() []*SQLDatabase {
	if x != nil {
		return x.Databases
	}
	return nil
}

type TLSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server CA Cert PEM to use for verifying the server's certificate.
	ServerCaCert *string `protobuf:"bytes,1,opt,name=server_ca_cert,json=serverCaCert,proto3,oneof" json:"server_ca_cert,omitempty"`
	// If true, skips hostname verification when connecting.
	// If invalid hostnames are trusted, *any* valid certificate for *any* site will be trusted for use.
	// This introduces significant vulnerabilities, and should only be used as a last resort.
	DisableTlsHostnameVerification bool `protobuf:"varint,2,opt,name=disable_tls_hostname_verification,json=disableTlsHostnameVerification,proto3" json:"disable_tls_hostname_verification,omitempty"`
}

func (x *TLSConfig) Reset() {
	*x = TLSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSConfig) ProtoMessage() {}

func (x *TLSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSConfig.ProtoReflect.Descriptor instead.
func (*TLSConfig) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{2}
}

func (x *TLSConfig) GetServerCaCert() string {
	if x != nil && x.ServerCaCert != nil {
		return *x.ServerCaCert
	}
	return ""
}

func (x *TLSConfig) GetDisableTlsHostnameVerification() bool {
	if x != nil {
		return x.DisableTlsHostnameVerification
	}
	return false
}

type SQLServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique resource id for this server.
	Rid string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	// Host is the host to connect to.
	// Valid formats are "hostname", "hostname:port", and "/path/to/unix.socket".
	Host string     `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Kind ServerKind `protobuf:"varint,3,opt,name=kind,proto3,enum=encore.runtime.v1.ServerKind" json:"kind,omitempty"`
	// TLS configuration to use when connecting.
	TlsConfig *TLSConfig `protobuf:"bytes,4,opt,name=tls_config,json=tlsConfig,proto3,oneof" json:"tls_config,omitempty"`
}

func (x *SQLServer) Reset() {
	*x = SQLServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLServer) ProtoMessage() {}

func (x *SQLServer) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLServer.ProtoReflect.Descriptor instead.
func (*SQLServer) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{3}
}

func (x *SQLServer) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *SQLServer) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SQLServer) GetKind() ServerKind {
	if x != nil {
		return x.Kind
	}
	return ServerKind_SERVER_KIND_UNSPECIFIED
}

func (x *SQLServer) GetTlsConfig() *TLSConfig {
	if x != nil {
		return x.TlsConfig
	}
	return nil
}

type ClientCert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique resource id for this certificate.
	Rid  string      `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	Cert string      `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	Key  *SecretData `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ClientCert) Reset() {
	*x = ClientCert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCert) ProtoMessage() {}

func (x *ClientCert) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCert.ProtoReflect.Descriptor instead.
func (*ClientCert) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{4}
}

func (x *ClientCert) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *ClientCert) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *ClientCert) GetKey() *SecretData {
	if x != nil {
		return x.Key
	}
	return nil
}

type SQLRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique resource id for this role.
	Rid      string      `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	Username string      `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password *SecretData `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// The client cert to use to authenticate, if any.
	ClientCertRid *string `protobuf:"bytes,4,opt,name=client_cert_rid,json=clientCertRid,proto3,oneof" json:"client_cert_rid,omitempty"`
}

func (x *SQLRole) Reset() {
	*x = SQLRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLRole) ProtoMessage() {}

func (x *SQLRole) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLRole.ProtoReflect.Descriptor instead.
func (*SQLRole) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{5}
}

func (x *SQLRole) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *SQLRole) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SQLRole) GetPassword() *SecretData {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *SQLRole) GetClientCertRid() string {
	if x != nil && x.ClientCertRid != nil {
		return *x.ClientCertRid
	}
	return ""
}

type SQLDatabase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique resource id for this database.
	Rid        string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	EncoreName string `protobuf:"bytes,2,opt,name=encore_name,json=encoreName,proto3" json:"encore_name,omitempty"`
	// The physical name of the database in the cluster.
	CloudName string `protobuf:"bytes,3,opt,name=cloud_name,json=cloudName,proto3" json:"cloud_name,omitempty"`
	// Connection pools to use for connecting to the database.
	ConnPools []*SQLConnectionPool `protobuf:"bytes,4,rep,name=conn_pools,json=connPools,proto3" json:"conn_pools,omitempty"`
}

func (x *SQLDatabase) Reset() {
	*x = SQLDatabase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLDatabase) ProtoMessage() {}

func (x *SQLDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLDatabase.ProtoReflect.Descriptor instead.
func (*SQLDatabase) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{6}
}

func (x *SQLDatabase) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *SQLDatabase) GetEncoreName() string {
	if x != nil {
		return x.EncoreName
	}
	return ""
}

func (x *SQLDatabase) GetCloudName() string {
	if x != nil {
		return x.CloudName
	}
	return ""
}

func (x *SQLDatabase) GetConnPools() []*SQLConnectionPool {
	if x != nil {
		return x.ConnPools
	}
	return nil
}

type SQLConnectionPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether this connection pool is for read-only servers.
	IsReadonly bool `protobuf:"varint,1,opt,name=is_readonly,json=isReadonly,proto3" json:"is_readonly,omitempty"`
	// The role to use to authenticate.
	RoleRid string `protobuf:"bytes,2,opt,name=role_rid,json=roleRid,proto3" json:"role_rid,omitempty"`
	// The minimum and maximum number of connections to use.
	MinConnections int32 `protobuf:"varint,3,opt,name=min_connections,json=minConnections,proto3" json:"min_connections,omitempty"`
	MaxConnections int32 `protobuf:"varint,4,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
}

func (x *SQLConnectionPool) Reset() {
	*x = SQLConnectionPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLConnectionPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLConnectionPool) ProtoMessage() {}

func (x *SQLConnectionPool) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLConnectionPool.ProtoReflect.Descriptor instead.
func (*SQLConnectionPool) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{7}
}

func (x *SQLConnectionPool) GetIsReadonly() bool {
	if x != nil {
		return x.IsReadonly
	}
	return false
}

func (x *SQLConnectionPool) GetRoleRid() string {
	if x != nil {
		return x.RoleRid
	}
	return ""
}

func (x *SQLConnectionPool) GetMinConnections() int32 {
	if x != nil {
		return x.MinConnections
	}
	return 0
}

func (x *SQLConnectionPool) GetMaxConnections() int32 {
	if x != nil {
		return x.MaxConnections
	}
	return 0
}

type RedisCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique resource id for this cluster.
	Rid       string           `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	Servers   []*RedisServer   `protobuf:"bytes,2,rep,name=servers,proto3" json:"servers,omitempty"`
	Databases []*RedisDatabase `protobuf:"bytes,3,rep,name=databases,proto3" json:"databases,omitempty"`
}

func (x *RedisCluster) Reset() {
	*x = RedisCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisCluster) ProtoMessage() {}

func (x *RedisCluster) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisCluster.ProtoReflect.Descriptor instead.
func (*RedisCluster) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{8}
}

func (x *RedisCluster) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *RedisCluster) GetServers() []*RedisServer {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *RedisCluster) GetDatabases() []*RedisDatabase {
	if x != nil {
		return x.Databases
	}
	return nil
}

type RedisServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique resource id for this server.
	Rid string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	// Host is the host to connect to.
	// Valid formats are "hostname", "hostname:port", and "/path/to/unix.socket".
	Host string     `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Kind ServerKind `protobuf:"varint,3,opt,name=kind,proto3,enum=encore.runtime.v1.ServerKind" json:"kind,omitempty"`
	// TLS configuration to use when connecting.
	// If nil, TLS is not used.
	TlsConfig *TLSConfig `protobuf:"bytes,4,opt,name=tls_config,json=tlsConfig,proto3,oneof" json:"tls_config,omitempty"`
}

func (x *RedisServer) Reset() {
	*x = RedisServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisServer) ProtoMessage() {}

func (x *RedisServer) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisServer.ProtoReflect.Descriptor instead.
func (*RedisServer) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{9}
}

func (x *RedisServer) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *RedisServer) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *RedisServer) GetKind() ServerKind {
	if x != nil {
		return x.Kind
	}
	return ServerKind_SERVER_KIND_UNSPECIFIED
}

func (x *RedisServer) GetTlsConfig() *TLSConfig {
	if x != nil {
		return x.TlsConfig
	}
	return nil
}

type RedisConnectionPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether this connection pool is for read-only servers.
	IsReadonly bool `protobuf:"varint,1,opt,name=is_readonly,json=isReadonly,proto3" json:"is_readonly,omitempty"`
	// The role to use to authenticate.
	RoleRid string `protobuf:"bytes,2,opt,name=role_rid,json=roleRid,proto3" json:"role_rid,omitempty"`
	// The minimum and maximum number of connections to use.
	MinConnections int32 `protobuf:"varint,3,opt,name=min_connections,json=minConnections,proto3" json:"min_connections,omitempty"`
	MaxConnections int32 `protobuf:"varint,4,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
}

func (x *RedisConnectionPool) Reset() {
	*x = RedisConnectionPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisConnectionPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisConnectionPool) ProtoMessage() {}

func (x *RedisConnectionPool) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisConnectionPool.ProtoReflect.Descriptor instead.
func (*RedisConnectionPool) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{10}
}

func (x *RedisConnectionPool) GetIsReadonly() bool {
	if x != nil {
		return x.IsReadonly
	}
	return false
}

func (x *RedisConnectionPool) GetRoleRid() string {
	if x != nil {
		return x.RoleRid
	}
	return ""
}

func (x *RedisConnectionPool) GetMinConnections() int32 {
	if x != nil {
		return x.MinConnections
	}
	return 0
}

func (x *RedisConnectionPool) GetMaxConnections() int32 {
	if x != nil {
		return x.MaxConnections
	}
	return 0
}

type RedisRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique resource id for this role.
	Rid string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	// The client cert to use to authenticate, if any.
	ClientCertRid *string `protobuf:"bytes,2,opt,name=client_cert_rid,json=clientCertRid,proto3,oneof" json:"client_cert_rid,omitempty"`
	// How to authenticate with Redis.
	// If unset, no authentication is used.
	//
	// Types that are assignable to Auth:
	//
	//	*RedisRole_Acl
	//	*RedisRole_AuthString
	Auth isRedisRole_Auth `protobuf_oneof:"auth"`
}

func (x *RedisRole) Reset() {
	*x = RedisRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisRole) ProtoMessage() {}

func (x *RedisRole) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisRole.ProtoReflect.Descriptor instead.
func (*RedisRole) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{11}
}

func (x *RedisRole) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *RedisRole) GetClientCertRid() string {
	if x != nil && x.ClientCertRid != nil {
		return *x.ClientCertRid
	}
	return ""
}

func (m *RedisRole) GetAuth() isRedisRole_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (x *RedisRole) GetAcl() *RedisRole_AuthACL {
	if x, ok := x.GetAuth().(*RedisRole_Acl); ok {
		return x.Acl
	}
	return nil
}

func (x *RedisRole) GetAuthString() *SecretData {
	if x, ok := x.GetAuth().(*RedisRole_AuthString); ok {
		return x.AuthString
	}
	return nil
}

type isRedisRole_Auth interface {
	isRedisRole_Auth()
}

type RedisRole_Acl struct {
	Acl *RedisRole_AuthACL `protobuf:"bytes,10,opt,name=acl,proto3,oneof"` // Redis ACL
}

type RedisRole_AuthString struct {
	AuthString *SecretData `protobuf:"bytes,11,opt,name=auth_string,json=authString,proto3,oneof"` // Redis AUTH string
}

func (*RedisRole_Acl) isRedisRole_Auth() {}

func (*RedisRole_AuthString) isRedisRole_Auth() {}

type RedisDatabase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique resource id for this database.
	Rid string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	// The encore name of the database.
	EncoreName string `protobuf:"bytes,2,opt,name=encore_name,json=encoreName,proto3" json:"encore_name,omitempty"`
	// The database index to use, [0-15].
	DatabaseIdx int32 `protobuf:"varint,3,opt,name=database_idx,json=databaseIdx,proto3" json:"database_idx,omitempty"`
	// KeyPrefix specifies a prefix to add to all cache keys
	// for this database. It exists to enable multiple cache clusters
	// to use the same physical Redis database for local development
	// without having to coordinate and persist database index ids.
	KeyPrefix *string `protobuf:"bytes,4,opt,name=key_prefix,json=keyPrefix,proto3,oneof" json:"key_prefix,omitempty"`
	// Connection pools to use for connecting to the database.
	ConnPools []*RedisConnectionPool `protobuf:"bytes,5,rep,name=conn_pools,json=connPools,proto3" json:"conn_pools,omitempty"`
}

func (x *RedisDatabase) Reset() {
	*x = RedisDatabase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisDatabase) ProtoMessage() {}

func (x *RedisDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisDatabase.ProtoReflect.Descriptor instead.
func (*RedisDatabase) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{12}
}

func (x *RedisDatabase) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *RedisDatabase) GetEncoreName() string {
	if x != nil {
		return x.EncoreName
	}
	return ""
}

func (x *RedisDatabase) GetDatabaseIdx() int32 {
	if x != nil {
		return x.DatabaseIdx
	}
	return 0
}

func (x *RedisDatabase) GetKeyPrefix() string {
	if x != nil && x.KeyPrefix != nil {
		return *x.KeyPrefix
	}
	return ""
}

func (x *RedisDatabase) GetConnPools() []*RedisConnectionPool {
	if x != nil {
		return x.ConnPools
	}
	return nil
}

type AppSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique resource id for this secret.
	Rid string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	// The encore name of the secret.
	EncoreName string `protobuf:"bytes,2,opt,name=encore_name,json=encoreName,proto3" json:"encore_name,omitempty"`
	// The secret data.
	Data *SecretData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AppSecret) Reset() {
	*x = AppSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppSecret) ProtoMessage() {}

func (x *AppSecret) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppSecret.ProtoReflect.Descriptor instead.
func (*AppSecret) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{13}
}

func (x *AppSecret) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *AppSecret) GetEncoreName() string {
	if x != nil {
		return x.EncoreName
	}
	return ""
}

func (x *AppSecret) GetData() *SecretData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PubSubCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique resource id for this cluster.
	Rid           string                `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	Topics        []*PubSubTopic        `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	Subscriptions []*PubSubSubscription `protobuf:"bytes,3,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	// Types that are assignable to Provider:
	//
	//	*PubSubCluster_Encore
	//	*PubSubCluster_Aws
	//	*PubSubCluster_Gcp
	//	*PubSubCluster_Azure
	//	*PubSubCluster_Nsq
	Provider isPubSubCluster_Provider `protobuf_oneof:"provider"`
}

func (x *PubSubCluster) Reset() {
	*x = PubSubCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubSubCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubCluster) ProtoMessage() {}

func (x *PubSubCluster) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubCluster.ProtoReflect.Descriptor instead.
func (*PubSubCluster) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{14}
}

func (x *PubSubCluster) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *PubSubCluster) GetTopics() []*PubSubTopic {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *PubSubCluster) GetSubscriptions() []*PubSubSubscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (m *PubSubCluster) GetProvider() isPubSubCluster_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (x *PubSubCluster) GetEncore() *PubSubCluster_EncoreCloud {
	if x, ok := x.GetProvider().(*PubSubCluster_Encore); ok {
		return x.Encore
	}
	return nil
}

func (x *PubSubCluster) GetAws() *PubSubCluster_AWSSqsSns {
	if x, ok := x.GetProvider().(*PubSubCluster_Aws); ok {
		return x.Aws
	}
	return nil
}

func (x *PubSubCluster) GetGcp() *PubSubCluster_GCPPubSub {
	if x, ok := x.GetProvider().(*PubSubCluster_Gcp); ok {
		return x.Gcp
	}
	return nil
}

func (x *PubSubCluster) GetAzure() *PubSubCluster_AzureServiceBus {
	if x, ok := x.GetProvider().(*PubSubCluster_Azure); ok {
		return x.Azure
	}
	return nil
}

func (x *PubSubCluster) GetNsq() *PubSubCluster_NSQ {
	if x, ok := x.GetProvider().(*PubSubCluster_Nsq); ok {
		return x.Nsq
	}
	return nil
}

type isPubSubCluster_Provider interface {
	isPubSubCluster_Provider()
}

type PubSubCluster_Encore struct {
	Encore *PubSubCluster_EncoreCloud `protobuf:"bytes,5,opt,name=encore,proto3,oneof"`
}

type PubSubCluster_Aws struct {
	Aws *PubSubCluster_AWSSqsSns `protobuf:"bytes,6,opt,name=aws,proto3,oneof"`
}

type PubSubCluster_Gcp struct {
	Gcp *PubSubCluster_GCPPubSub `protobuf:"bytes,7,opt,name=gcp,proto3,oneof"`
}

type PubSubCluster_Azure struct {
	Azure *PubSubCluster_AzureServiceBus `protobuf:"bytes,8,opt,name=azure,proto3,oneof"`
}

type PubSubCluster_Nsq struct {
	Nsq *PubSubCluster_NSQ `protobuf:"bytes,9,opt,name=nsq,proto3,oneof"`
}

func (*PubSubCluster_Encore) isPubSubCluster_Provider() {}

func (*PubSubCluster_Aws) isPubSubCluster_Provider() {}

func (*PubSubCluster_Gcp) isPubSubCluster_Provider() {}

func (*PubSubCluster_Azure) isPubSubCluster_Provider() {}

func (*PubSubCluster_Nsq) isPubSubCluster_Provider() {}

type PubSubTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique resource id for this topic.
	Rid string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	// The encore name of the topic.
	EncoreName string `protobuf:"bytes,2,opt,name=encore_name,json=encoreName,proto3" json:"encore_name,omitempty"`
	// The cloud name of the topic.
	CloudName string `protobuf:"bytes,3,opt,name=cloud_name,json=cloudName,proto3" json:"cloud_name,omitempty"`
	// The delivery guarantee.
	DeliveryGuarantee PubSubTopic_DeliveryGuarantee `protobuf:"varint,4,opt,name=delivery_guarantee,json=deliveryGuarantee,proto3,enum=encore.runtime.v1.PubSubTopic_DeliveryGuarantee" json:"delivery_guarantee,omitempty"`
	// Optional ordering attribute. Specifies the attribute name
	// to use for message ordering.
	OrderingAttr *string `protobuf:"bytes,5,opt,name=ordering_attr,json=orderingAttr,proto3,oneof" json:"ordering_attr,omitempty"`
	// Provider-specific configuration.
	// Not all providers require this, but it must always be set
	// for the providers that are present.
	//
	// Types that are assignable to ProviderConfig:
	//
	//	*PubSubTopic_GcpConfig
	ProviderConfig isPubSubTopic_ProviderConfig `protobuf_oneof:"provider_config"`
}

func (x *PubSubTopic) Reset() {
	*x = PubSubTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubSubTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubTopic) ProtoMessage() {}

func (x *PubSubTopic) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubTopic.ProtoReflect.Descriptor instead.
func (*PubSubTopic) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{15}
}

func (x *PubSubTopic) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *PubSubTopic) GetEncoreName() string {
	if x != nil {
		return x.EncoreName
	}
	return ""
}

func (x *PubSubTopic) GetCloudName() string {
	if x != nil {
		return x.CloudName
	}
	return ""
}

func (x *PubSubTopic) GetDeliveryGuarantee() PubSubTopic_DeliveryGuarantee {
	if x != nil {
		return x.DeliveryGuarantee
	}
	return PubSubTopic_DELIVERY_GUARANTEE_UNSPECIFIED
}

func (x *PubSubTopic) GetOrderingAttr() string {
	if x != nil && x.OrderingAttr != nil {
		return *x.OrderingAttr
	}
	return ""
}

func (m *PubSubTopic) GetProviderConfig() isPubSubTopic_ProviderConfig {
	if m != nil {
		return m.ProviderConfig
	}
	return nil
}

func (x *PubSubTopic) GetGcpConfig() *PubSubTopic_GCPConfig {
	if x, ok := x.GetProviderConfig().(*PubSubTopic_GcpConfig); ok {
		return x.GcpConfig
	}
	return nil
}

type isPubSubTopic_ProviderConfig interface {
	isPubSubTopic_ProviderConfig()
}

type PubSubTopic_GcpConfig struct {
	GcpConfig *PubSubTopic_GCPConfig `protobuf:"bytes,10,opt,name=gcp_config,json=gcpConfig,proto3,oneof"` // Null: no provider-specific configuration.
}

func (*PubSubTopic_GcpConfig) isPubSubTopic_ProviderConfig() {}

type PubSubSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique resource id for this subscription.
	Rid string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	// The encore name of the topic this subscription is for.
	TopicEncoreName string `protobuf:"bytes,2,opt,name=topic_encore_name,json=topicEncoreName,proto3" json:"topic_encore_name,omitempty"`
	// The encore name of the subscription.
	SubscriptionEncoreName string `protobuf:"bytes,3,opt,name=subscription_encore_name,json=subscriptionEncoreName,proto3" json:"subscription_encore_name,omitempty"`
	// The cloud name of the subscription.
	TopicCloudName string `protobuf:"bytes,4,opt,name=topic_cloud_name,json=topicCloudName,proto3" json:"topic_cloud_name,omitempty"`
	// The cloud name of the subscription.
	SubscriptionCloudName string `protobuf:"bytes,5,opt,name=subscription_cloud_name,json=subscriptionCloudName,proto3" json:"subscription_cloud_name,omitempty"`
	// If true the application will not actively subscribe but wait
	// for incoming messages to be pushed to it.
	PushOnly bool `protobuf:"varint,6,opt,name=push_only,json=pushOnly,proto3" json:"push_only,omitempty"`
	// Subscription-specific provider configuration.
	// Not all providers require this, but it must always be set
	// for the providers that are present.
	//
	// Types that are assignable to ProviderConfig:
	//
	//	*PubSubSubscription_GcpConfig
	ProviderConfig isPubSubSubscription_ProviderConfig `protobuf_oneof:"provider_config"`
}

func (x *PubSubSubscription) Reset() {
	*x = PubSubSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubSubSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubSubscription) ProtoMessage() {}

func (x *PubSubSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubSubscription.ProtoReflect.Descriptor instead.
func (*PubSubSubscription) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{16}
}

func (x *PubSubSubscription) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *PubSubSubscription) GetTopicEncoreName() string {
	if x != nil {
		return x.TopicEncoreName
	}
	return ""
}

func (x *PubSubSubscription) GetSubscriptionEncoreName() string {
	if x != nil {
		return x.SubscriptionEncoreName
	}
	return ""
}

func (x *PubSubSubscription) GetTopicCloudName() string {
	if x != nil {
		return x.TopicCloudName
	}
	return ""
}

func (x *PubSubSubscription) GetSubscriptionCloudName() string {
	if x != nil {
		return x.SubscriptionCloudName
	}
	return ""
}

func (x *PubSubSubscription) GetPushOnly() bool {
	if x != nil {
		return x.PushOnly
	}
	return false
}

func (m *PubSubSubscription) GetProviderConfig() isPubSubSubscription_ProviderConfig {
	if m != nil {
		return m.ProviderConfig
	}
	return nil
}

func (x *PubSubSubscription) GetGcpConfig() *PubSubSubscription_GCPConfig {
	if x, ok := x.GetProviderConfig().(*PubSubSubscription_GcpConfig); ok {
		return x.GcpConfig
	}
	return nil
}

type isPubSubSubscription_ProviderConfig interface {
	isPubSubSubscription_ProviderConfig()
}

type PubSubSubscription_GcpConfig struct {
	GcpConfig *PubSubSubscription_GCPConfig `protobuf:"bytes,10,opt,name=gcp_config,json=gcpConfig,proto3,oneof"` // Null: no provider-specific configuration.
}

func (*PubSubSubscription_GcpConfig) isPubSubSubscription_ProviderConfig() {}

type BucketCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique resource id for this cluster.
	Rid      string    `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	Buckets  []*Bucket `protobuf:"bytes,2,rep,name=buckets,proto3" json:"buckets,omitempty"`
	Region   string    `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Endpoint string    `protobuf:"bytes,4,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *BucketCluster) Reset() {
	*x = BucketCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketCluster) ProtoMessage() {}

func (x *BucketCluster) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketCluster.ProtoReflect.Descriptor instead.
func (*BucketCluster) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{17}
}

func (x *BucketCluster) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *BucketCluster) GetBuckets() []*Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *BucketCluster) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *BucketCluster) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

type Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique resource id for this bucket.
	Rid string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	// The encore name of the bucket.
	EncoreName string `protobuf:"bytes,2,opt,name=encore_name,json=encoreName,proto3" json:"encore_name,omitempty"`
	// The cloud name of the bucket.
	CloudName string `protobuf:"bytes,3,opt,name=cloud_name,json=cloudName,proto3" json:"cloud_name,omitempty"`
}

func (x *Bucket) Reset() {
	*x = Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bucket) ProtoMessage() {}

func (x *Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bucket.ProtoReflect.Descriptor instead.
func (*Bucket) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{18}
}

func (x *Bucket) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *Bucket) GetEncoreName() string {
	if x != nil {
		return x.EncoreName
	}
	return ""
}

func (x *Bucket) GetCloudName() string {
	if x != nil {
		return x.CloudName
	}
	return ""
}

type Gateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique id for this resource.
	Rid string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	// The encore name of the gateway.
	EncoreName string `protobuf:"bytes,2,opt,name=encore_name,json=encoreName,proto3" json:"encore_name,omitempty"`
	// The base url for reaching this gateway, for returning to the application
	// via e.g. the metadata APIs.
	BaseUrl string `protobuf:"bytes,3,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	// The hostnames this gateway accepts requests for.
	Hostnames []string `protobuf:"bytes,4,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
	// CORS is the CORS configuration for this gateway.
	Cors *Gateway_CORS `protobuf:"bytes,5,opt,name=cors,proto3" json:"cors,omitempty"`
}

func (x *Gateway) Reset() {
	*x = Gateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway) ProtoMessage() {}

func (x *Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway.ProtoReflect.Descriptor instead.
func (*Gateway) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{19}
}

func (x *Gateway) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *Gateway) GetEncoreName() string {
	if x != nil {
		return x.EncoreName
	}
	return ""
}

func (x *Gateway) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *Gateway) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

func (x *Gateway) GetCors() *Gateway_CORS {
	if x != nil {
		return x.Cors
	}
	return nil
}

type Infrastructure_Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientCerts []*ClientCert `protobuf:"bytes,1,rep,name=client_certs,json=clientCerts,proto3" json:"client_certs,omitempty"`
	SqlRoles    []*SQLRole    `protobuf:"bytes,2,rep,name=sql_roles,json=sqlRoles,proto3" json:"sql_roles,omitempty"`
	RedisRoles  []*RedisRole  `protobuf:"bytes,3,rep,name=redis_roles,json=redisRoles,proto3" json:"redis_roles,omitempty"`
}

func (x *Infrastructure_Credentials) Reset() {
	*x = Infrastructure_Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Infrastructure_Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Infrastructure_Credentials) ProtoMessage() {}

func (x *Infrastructure_Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Infrastructure_Credentials.ProtoReflect.Descriptor instead.
func (*Infrastructure_Credentials) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Infrastructure_Credentials) GetClientCerts() []*ClientCert {
	if x != nil {
		return x.ClientCerts
	}
	return nil
}

func (x *Infrastructure_Credentials) GetSqlRoles() []*SQLRole {
	if x != nil {
		return x.SqlRoles
	}
	return nil
}

func (x *Infrastructure_Credentials) GetRedisRoles() []*RedisRole {
	if x != nil {
		return x.RedisRoles
	}
	return nil
}

type Infrastructure_Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateways       []*Gateway       `protobuf:"bytes,1,rep,name=gateways,proto3" json:"gateways,omitempty"`
	SqlClusters    []*SQLCluster    `protobuf:"bytes,2,rep,name=sql_clusters,json=sqlClusters,proto3" json:"sql_clusters,omitempty"`
	PubsubClusters []*PubSubCluster `protobuf:"bytes,3,rep,name=pubsub_clusters,json=pubsubClusters,proto3" json:"pubsub_clusters,omitempty"`
	RedisClusters  []*RedisCluster  `protobuf:"bytes,4,rep,name=redis_clusters,json=redisClusters,proto3" json:"redis_clusters,omitempty"`
	AppSecrets     []*AppSecret     `protobuf:"bytes,5,rep,name=app_secrets,json=appSecrets,proto3" json:"app_secrets,omitempty"`
	BucketClusters []*BucketCluster `protobuf:"bytes,6,rep,name=bucket_clusters,json=bucketClusters,proto3" json:"bucket_clusters,omitempty"`
}

func (x *Infrastructure_Resources) Reset() {
	*x = Infrastructure_Resources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Infrastructure_Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Infrastructure_Resources) ProtoMessage() {}

func (x *Infrastructure_Resources) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Infrastructure_Resources.ProtoReflect.Descriptor instead.
func (*Infrastructure_Resources) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Infrastructure_Resources) GetGateways() []*Gateway {
	if x != nil {
		return x.Gateways
	}
	return nil
}

func (x *Infrastructure_Resources) GetSqlClusters() []*SQLCluster {
	if x != nil {
		return x.SqlClusters
	}
	return nil
}

func (x *Infrastructure_Resources) GetPubsubClusters() []*PubSubCluster {
	if x != nil {
		return x.PubsubClusters
	}
	return nil
}

func (x *Infrastructure_Resources) GetRedisClusters() []*RedisCluster {
	if x != nil {
		return x.RedisClusters
	}
	return nil
}

func (x *Infrastructure_Resources) GetAppSecrets() []*AppSecret {
	if x != nil {
		return x.AppSecrets
	}
	return nil
}

func (x *Infrastructure_Resources) GetBucketClusters() []*BucketCluster {
	if x != nil {
		return x.BucketClusters
	}
	return nil
}

type RedisRole_AuthACL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string      `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password *SecretData `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *RedisRole_AuthACL) Reset() {
	*x = RedisRole_AuthACL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisRole_AuthACL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisRole_AuthACL) ProtoMessage() {}

func (x *RedisRole_AuthACL) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisRole_AuthACL.ProtoReflect.Descriptor instead.
func (*RedisRole_AuthACL) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{11, 0}
}

func (x *RedisRole_AuthACL) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RedisRole_AuthACL) GetPassword() *SecretData {
	if x != nil {
		return x.Password
	}
	return nil
}

type PubSubCluster_EncoreCloud struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PubSubCluster_EncoreCloud) Reset() {
	*x = PubSubCluster_EncoreCloud{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubSubCluster_EncoreCloud) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubCluster_EncoreCloud) ProtoMessage() {}

func (x *PubSubCluster_EncoreCloud) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubCluster_EncoreCloud.ProtoReflect.Descriptor instead.
func (*PubSubCluster_EncoreCloud) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{14, 0}
}

type PubSubCluster_AWSSqsSns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PubSubCluster_AWSSqsSns) Reset() {
	*x = PubSubCluster_AWSSqsSns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubSubCluster_AWSSqsSns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubCluster_AWSSqsSns) ProtoMessage() {}

func (x *PubSubCluster_AWSSqsSns) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubCluster_AWSSqsSns.ProtoReflect.Descriptor instead.
func (*PubSubCluster_AWSSqsSns) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{14, 1}
}

type PubSubCluster_GCPPubSub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PubSubCluster_GCPPubSub) Reset() {
	*x = PubSubCluster_GCPPubSub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubSubCluster_GCPPubSub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubCluster_GCPPubSub) ProtoMessage() {}

func (x *PubSubCluster_GCPPubSub) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubCluster_GCPPubSub.ProtoReflect.Descriptor instead.
func (*PubSubCluster_GCPPubSub) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{14, 2}
}

type PubSubCluster_NSQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hosts to connect to NSQ. Must be non-empty.
	Hosts []string `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
}

func (x *PubSubCluster_NSQ) Reset() {
	*x = PubSubCluster_NSQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubSubCluster_NSQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubCluster_NSQ) ProtoMessage() {}

func (x *PubSubCluster_NSQ) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubCluster_NSQ.ProtoReflect.Descriptor instead.
func (*PubSubCluster_NSQ) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{14, 3}
}

func (x *PubSubCluster_NSQ) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

type PubSubCluster_AzureServiceBus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *PubSubCluster_AzureServiceBus) Reset() {
	*x = PubSubCluster_AzureServiceBus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubSubCluster_AzureServiceBus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubCluster_AzureServiceBus) ProtoMessage() {}

func (x *PubSubCluster_AzureServiceBus) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubCluster_AzureServiceBus.ProtoReflect.Descriptor instead.
func (*PubSubCluster_AzureServiceBus) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{14, 4}
}

func (x *PubSubCluster_AzureServiceBus) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type PubSubTopic_GCPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The GCP project id where the topic exists.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *PubSubTopic_GCPConfig) Reset() {
	*x = PubSubTopic_GCPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubSubTopic_GCPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubTopic_GCPConfig) ProtoMessage() {}

func (x *PubSubTopic_GCPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubTopic_GCPConfig.ProtoReflect.Descriptor instead.
func (*PubSubTopic_GCPConfig) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{15, 0}
}

func (x *PubSubTopic_GCPConfig) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type PubSubSubscription_GCPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The GCP project id where the subscription exists.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The service account used to authenticate messages being delivered over push.
	// If unset, pushes are rejected.
	PushServiceAccount *string `protobuf:"bytes,2,opt,name=push_service_account,json=pushServiceAccount,proto3,oneof" json:"push_service_account,omitempty"`
	// The audience to use when validating JWTs delivered over push.
	// If set, the JWT audience claim must match. If unset, any JWT audience is allowed.
	PushJwtAudience *string `protobuf:"bytes,3,opt,name=push_jwt_audience,json=pushJwtAudience,proto3,oneof" json:"push_jwt_audience,omitempty"`
}

func (x *PubSubSubscription_GCPConfig) Reset() {
	*x = PubSubSubscription_GCPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubSubSubscription_GCPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubSubscription_GCPConfig) ProtoMessage() {}

func (x *PubSubSubscription_GCPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubSubscription_GCPConfig.ProtoReflect.Descriptor instead.
func (*PubSubSubscription_GCPConfig) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{16, 0}
}

func (x *PubSubSubscription_GCPConfig) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PubSubSubscription_GCPConfig) GetPushServiceAccount() string {
	if x != nil && x.PushServiceAccount != nil {
		return *x.PushServiceAccount
	}
	return ""
}

func (x *PubSubSubscription_GCPConfig) GetPushJwtAudience() string {
	if x != nil && x.PushJwtAudience != nil {
		return *x.PushJwtAudience
	}
	return ""
}

// CORS describes the CORS configuration for a gateway.
type Gateway_CORS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Debug bool `protobuf:"varint,1,opt,name=debug,proto3" json:"debug,omitempty"`
	// If true, causes Encore to respond to OPTIONS requests
	// without setting Access-Control-Allow-Credentials: true.
	DisableCredentials bool `protobuf:"varint,2,opt,name=disable_credentials,json=disableCredentials,proto3" json:"disable_credentials,omitempty"`
	// Specifies the allowed origins for requests that include credentials.
	// If a request is made from an Origin in this list
	// Encore responds with Access-Control-Allow-Origin: <Origin>.
	//
	// If disable_credentials is true this field is not used.
	//
	// Types that are assignable to AllowedOriginsWithCredentials:
	//
	//	*Gateway_CORS_AllowedOrigins
	//	*Gateway_CORS_UnsafeAllowAllOriginsWithCredentials
	AllowedOriginsWithCredentials isGateway_CORS_AllowedOriginsWithCredentials `protobuf_oneof:"allowed_origins_with_credentials"`
	// Specifies the allowed origins for requests
	// that don't include credentials.
	//
	// The URLs in this list may include wildcards (e.g. "https://*.example.com"
	// or "https://*-myapp.example.com").
	AllowedOriginsWithoutCredentials *Gateway_CORSAllowedOrigins `protobuf:"bytes,5,opt,name=allowed_origins_without_credentials,json=allowedOriginsWithoutCredentials,proto3" json:"allowed_origins_without_credentials,omitempty"`
	// Specifies extra headers to allow, beyond
	// the default set always recognized by Encore.
	// As a special case, if the list contains "*" all headers are allowed.
	ExtraAllowedHeaders []string `protobuf:"bytes,6,rep,name=extra_allowed_headers,json=extraAllowedHeaders,proto3" json:"extra_allowed_headers,omitempty"`
	// Specifies extra headers to expose, beyond
	// the default set always recognized by Encore.
	// As a special case, if the list contains "*" all headers are allowed.
	ExtraExposedHeaders []string `protobuf:"bytes,7,rep,name=extra_exposed_headers,json=extraExposedHeaders,proto3" json:"extra_exposed_headers,omitempty"`
	// If true, allows requests to Encore apps running
	// on private networks from websites.
	// See: https://wicg.github.io/private-network-access/
	AllowPrivateNetworkAccess bool `protobuf:"varint,8,opt,name=allow_private_network_access,json=allowPrivateNetworkAccess,proto3" json:"allow_private_network_access,omitempty"`
}

func (x *Gateway_CORS) Reset() {
	*x = Gateway_CORS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gateway_CORS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway_CORS) ProtoMessage() {}

func (x *Gateway_CORS) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway_CORS.ProtoReflect.Descriptor instead.
func (*Gateway_CORS) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{19, 0}
}

func (x *Gateway_CORS) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *Gateway_CORS) GetDisableCredentials() bool {
	if x != nil {
		return x.DisableCredentials
	}
	return false
}

func (m *Gateway_CORS) GetAllowedOriginsWithCredentials() isGateway_CORS_AllowedOriginsWithCredentials {
	if m != nil {
		return m.AllowedOriginsWithCredentials
	}
	return nil
}

func (x *Gateway_CORS) GetAllowedOrigins() *Gateway_CORSAllowedOrigins {
	if x, ok := x.GetAllowedOriginsWithCredentials().(*Gateway_CORS_AllowedOrigins); ok {
		return x.AllowedOrigins
	}
	return nil
}

func (x *Gateway_CORS) GetUnsafeAllowAllOriginsWithCredentials() bool {
	if x, ok := x.GetAllowedOriginsWithCredentials().(*Gateway_CORS_UnsafeAllowAllOriginsWithCredentials); ok {
		return x.UnsafeAllowAllOriginsWithCredentials
	}
	return false
}

func (x *Gateway_CORS) GetAllowedOriginsWithoutCredentials() *Gateway_CORSAllowedOrigins {
	if x != nil {
		return x.AllowedOriginsWithoutCredentials
	}
	return nil
}

func (x *Gateway_CORS) GetExtraAllowedHeaders() []string {
	if x != nil {
		return x.ExtraAllowedHeaders
	}
	return nil
}

func (x *Gateway_CORS) GetExtraExposedHeaders() []string {
	if x != nil {
		return x.ExtraExposedHeaders
	}
	return nil
}

func (x *Gateway_CORS) GetAllowPrivateNetworkAccess() bool {
	if x != nil {
		return x.AllowPrivateNetworkAccess
	}
	return false
}

type isGateway_CORS_AllowedOriginsWithCredentials interface {
	isGateway_CORS_AllowedOriginsWithCredentials()
}

type Gateway_CORS_AllowedOrigins struct {
	AllowedOrigins *Gateway_CORSAllowedOrigins `protobuf:"bytes,3,opt,name=allowed_origins,json=allowedOrigins,proto3,oneof"`
}

type Gateway_CORS_UnsafeAllowAllOriginsWithCredentials struct {
	UnsafeAllowAllOriginsWithCredentials bool `protobuf:"varint,4,opt,name=unsafe_allow_all_origins_with_credentials,json=unsafeAllowAllOriginsWithCredentials,proto3,oneof"`
}

func (*Gateway_CORS_AllowedOrigins) isGateway_CORS_AllowedOriginsWithCredentials() {}

func (*Gateway_CORS_UnsafeAllowAllOriginsWithCredentials) isGateway_CORS_AllowedOriginsWithCredentials() {
}

type Gateway_CORSAllowedOrigins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of allowed origins.
	// The URLs in this list may include wildcards (e.g. "https://*.example.com"
	// or "https://*-myapp.example.com").
	//
	// The string "*" allows all origins, except for requests with credentials;
	// use CORS.unsafe_allow_unsafe_all_origins_with_credentials for that.
	AllowedOrigins []string `protobuf:"bytes,1,rep,name=allowed_origins,json=allowedOrigins,proto3" json:"allowed_origins,omitempty"`
}

func (x *Gateway_CORSAllowedOrigins) Reset() {
	*x = Gateway_CORSAllowedOrigins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_encore_runtime_v1_infra_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gateway_CORSAllowedOrigins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway_CORSAllowedOrigins) ProtoMessage() {}

func (x *Gateway_CORSAllowedOrigins) ProtoReflect() protoreflect.Message {
	mi := &file_encore_runtime_v1_infra_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway_CORSAllowedOrigins.ProtoReflect.Descriptor instead.
func (*Gateway_CORSAllowedOrigins) Descriptor() ([]byte, []int) {
	return file_encore_runtime_v1_infra_proto_rawDescGZIP(), []int{19, 1}
}

func (x *Gateway_CORSAllowedOrigins) GetAllowedOrigins() []string {
	if x != nil {
		return x.AllowedOrigins
	}
	return nil
}

var File_encore_runtime_v1_infra_proto protoreflect.FileDescriptor

var file_encore_runtime_v1_infra_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x1a, 0x22, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x06, 0x0a, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x1a, 0xc7, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x71, 0x6c, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x51, 0x4c, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x12, 0x3d, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x69, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x1a,
	0xa2, 0x03, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x36, 0x0a,
	0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x08, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x51, 0x4c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x73, 0x71, 0x6c, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x0a, 0x61,
	0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x0a, 0x53, 0x51, 0x4c, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x51, 0x4c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x51, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x09,
	0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x43, 0x65, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x21, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x6c, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6c, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x09, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x6c, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x09, 0x74,
	0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x63, 0x0a, 0x0a, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x2f,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0xb3, 0x01, 0x0a, 0x07, 0x53, 0x51, 0x4c, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x5f, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x52, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x72, 0x69, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x0b, 0x53, 0x51, 0x4c, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0xa1, 0x01, 0x0a,
	0x11, 0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x6f,
	0x6e, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x72, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x52, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x9a, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x72, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x22, 0xb7, 0x01,
	0x0a, 0x0b, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x09, 0x74, 0x6c, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6c, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xa3, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x52, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d,
	0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc4, 0x02,
	0x0a, 0x09, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x2b, 0x0a,
	0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x52, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x03, 0x61, 0x63,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x52, 0x6f, 0x6c, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x41, 0x43, 0x4c, 0x48, 0x00, 0x52,
	0x03, 0x61, 0x63, 0x6c, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x60, 0x0a, 0x07, 0x41, 0x75, 0x74, 0x68, 0x41, 0x43,
	0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x5f, 0x72, 0x69, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x78, 0x12, 0x22, 0x0a, 0x0a,
	0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x45, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x71, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf5, 0x04, 0x0a, 0x0d, 0x50, 0x75,
	0x62, 0x53, 0x75, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x36, 0x0a,
	0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x06, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x03, 0x61, 0x77,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x53,
	0x75, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x57, 0x53, 0x53, 0x71, 0x73,
	0x53, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x03, 0x61, 0x77, 0x73, 0x12, 0x3e, 0x0a, 0x03, 0x67, 0x63,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x53,
	0x75, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x43, 0x50, 0x50, 0x75, 0x62,
	0x53, 0x75, 0x62, 0x48, 0x00, 0x52, 0x03, 0x67, 0x63, 0x70, 0x12, 0x48, 0x0a, 0x05, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x6e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x62, 0x53, 0x75, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x73, 0x48, 0x00, 0x52, 0x05, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x6e, 0x73, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4e, 0x53, 0x51, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x73, 0x71, 0x1a, 0x0d,
	0x0a, 0x0b, 0x45, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x1a, 0x0b, 0x0a,
	0x09, 0x41, 0x57, 0x53, 0x53, 0x71, 0x73, 0x53, 0x6e, 0x73, 0x1a, 0x0b, 0x0a, 0x09, 0x47, 0x43,
	0x50, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x1a, 0x1b, 0x0a, 0x03, 0x4e, 0x53, 0x51, 0x12, 0x14,
	0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68,
	0x6f, 0x73, 0x74, 0x73, 0x1a, 0x2f, 0x0a, 0x0f, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x22, 0x8b, 0x04, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x72, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x65, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x47, 0x75, 0x61, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x72, 0x88, 0x01, 0x01, 0x12, 0x49,
	0x0a, 0x0a, 0x67, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x2e, 0x47, 0x43, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x09,
	0x67, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x2a, 0x0a, 0x09, 0x47, 0x43, 0x50,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x44,
	0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x45,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x24, 0x0a, 0x20, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x55, 0x41, 0x52,
	0x41, 0x4e, 0x54, 0x45, 0x45, 0x5f, 0x41, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x4f,
	0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x47, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x45, 0x45, 0x5f, 0x45, 0x58, 0x41, 0x43,
	0x54, 0x4c, 0x59, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x42, 0x11, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x22,
	0xb4, 0x04, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x45, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x50, 0x0a,
	0x0a, 0x67, 0x63, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x43, 0x50, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x09, 0x67, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a,
	0xc1, 0x01, 0x0a, 0x09, 0x47, 0x43, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x14,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x70, 0x75,
	0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6a, 0x77, 0x74, 0x5f,
	0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0f, 0x70, 0x75, 0x73, 0x68, 0x4a, 0x77, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6a, 0x77, 0x74, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x8a, 0x01, 0x0a, 0x0d, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0x5a, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xb9, 0x06, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x43, 0x4f, 0x52, 0x53, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x1a, 0xcd, 0x04, 0x0a,
	0x04, 0x43, 0x4f, 0x52, 0x53, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x2f, 0x0a, 0x13, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x58, 0x0a, 0x0f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x43, 0x4f, 0x52, 0x53, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x29, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x24, 0x75, 0x6e, 0x73,
	0x61, 0x66, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x7c, 0x0a, 0x23, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x4f, 0x52, 0x53, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x52, 0x20, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x74, 0x72, 0x61, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x22, 0x0a, 0x20, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x1a, 0x3d, 0x0a, 0x12,
	0x43, 0x4f, 0x52, 0x53, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x2a, 0x7d, 0x0a, 0x0a, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48,
	0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x10, 0x03, 0x42, 0x2c, 0x5a, 0x2a, 0x65, 0x6e,
	0x63, 0x72, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_encore_runtime_v1_infra_proto_rawDescOnce sync.Once
	file_encore_runtime_v1_infra_proto_rawDescData = file_encore_runtime_v1_infra_proto_rawDesc
)

func file_encore_runtime_v1_infra_proto_rawDescGZIP() []byte {
	file_encore_runtime_v1_infra_proto_rawDescOnce.Do(func() {
		file_encore_runtime_v1_infra_proto_rawDescData = protoimpl.X.CompressGZIP(file_encore_runtime_v1_infra_proto_rawDescData)
	})
	return file_encore_runtime_v1_infra_proto_rawDescData
}

var file_encore_runtime_v1_infra_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_encore_runtime_v1_infra_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_encore_runtime_v1_infra_proto_goTypes = []interface{}{
	(ServerKind)(0),                       // 0: encore.runtime.v1.ServerKind
	(PubSubTopic_DeliveryGuarantee)(0),    // 1: encore.runtime.v1.PubSubTopic.DeliveryGuarantee
	(*Infrastructure)(nil),                // 2: encore.runtime.v1.Infrastructure
	(*SQLCluster)(nil),                    // 3: encore.runtime.v1.SQLCluster
	(*TLSConfig)(nil),                     // 4: encore.runtime.v1.TLSConfig
	(*SQLServer)(nil),                     // 5: encore.runtime.v1.SQLServer
	(*ClientCert)(nil),                    // 6: encore.runtime.v1.ClientCert
	(*SQLRole)(nil),                       // 7: encore.runtime.v1.SQLRole
	(*SQLDatabase)(nil),                   // 8: encore.runtime.v1.SQLDatabase
	(*SQLConnectionPool)(nil),             // 9: encore.runtime.v1.SQLConnectionPool
	(*RedisCluster)(nil),                  // 10: encore.runtime.v1.RedisCluster
	(*RedisServer)(nil),                   // 11: encore.runtime.v1.RedisServer
	(*RedisConnectionPool)(nil),           // 12: encore.runtime.v1.RedisConnectionPool
	(*RedisRole)(nil),                     // 13: encore.runtime.v1.RedisRole
	(*RedisDatabase)(nil),                 // 14: encore.runtime.v1.RedisDatabase
	(*AppSecret)(nil),                     // 15: encore.runtime.v1.AppSecret
	(*PubSubCluster)(nil),                 // 16: encore.runtime.v1.PubSubCluster
	(*PubSubTopic)(nil),                   // 17: encore.runtime.v1.PubSubTopic
	(*PubSubSubscription)(nil),            // 18: encore.runtime.v1.PubSubSubscription
	(*BucketCluster)(nil),                 // 19: encore.runtime.v1.BucketCluster
	(*Bucket)(nil),                        // 20: encore.runtime.v1.Bucket
	(*Gateway)(nil),                       // 21: encore.runtime.v1.Gateway
	(*Infrastructure_Credentials)(nil),    // 22: encore.runtime.v1.Infrastructure.Credentials
	(*Infrastructure_Resources)(nil),      // 23: encore.runtime.v1.Infrastructure.Resources
	(*RedisRole_AuthACL)(nil),             // 24: encore.runtime.v1.RedisRole.AuthACL
	(*PubSubCluster_EncoreCloud)(nil),     // 25: encore.runtime.v1.PubSubCluster.EncoreCloud
	(*PubSubCluster_AWSSqsSns)(nil),       // 26: encore.runtime.v1.PubSubCluster.AWSSqsSns
	(*PubSubCluster_GCPPubSub)(nil),       // 27: encore.runtime.v1.PubSubCluster.GCPPubSub
	(*PubSubCluster_NSQ)(nil),             // 28: encore.runtime.v1.PubSubCluster.NSQ
	(*PubSubCluster_AzureServiceBus)(nil), // 29: encore.runtime.v1.PubSubCluster.AzureServiceBus
	(*PubSubTopic_GCPConfig)(nil),         // 30: encore.runtime.v1.PubSubTopic.GCPConfig
	(*PubSubSubscription_GCPConfig)(nil),  // 31: encore.runtime.v1.PubSubSubscription.GCPConfig
	(*Gateway_CORS)(nil),                  // 32: encore.runtime.v1.Gateway.CORS
	(*Gateway_CORSAllowedOrigins)(nil),    // 33: encore.runtime.v1.Gateway.CORSAllowedOrigins
	(*SecretData)(nil),                    // 34: encore.runtime.v1.SecretData
}
var file_encore_runtime_v1_infra_proto_depIdxs = []int32{
	23, // 0: encore.runtime.v1.Infrastructure.resources:type_name -> encore.runtime.v1.Infrastructure.Resources
	22, // 1: encore.runtime.v1.Infrastructure.credentials:type_name -> encore.runtime.v1.Infrastructure.Credentials
	5,  // 2: encore.runtime.v1.SQLCluster.servers:type_name -> encore.runtime.v1.SQLServer
	8,  // 3: encore.runtime.v1.SQLCluster.databases:type_name -> encore.runtime.v1.SQLDatabase
	0,  // 4: encore.runtime.v1.SQLServer.kind:type_name -> encore.runtime.v1.ServerKind
	4,  // 5: encore.runtime.v1.SQLServer.tls_config:type_name -> encore.runtime.v1.TLSConfig
	34, // 6: encore.runtime.v1.ClientCert.key:type_name -> encore.runtime.v1.SecretData
	34, // 7: encore.runtime.v1.SQLRole.password:type_name -> encore.runtime.v1.SecretData
	9,  // 8: encore.runtime.v1.SQLDatabase.conn_pools:type_name -> encore.runtime.v1.SQLConnectionPool
	11, // 9: encore.runtime.v1.RedisCluster.servers:type_name -> encore.runtime.v1.RedisServer
	14, // 10: encore.runtime.v1.RedisCluster.databases:type_name -> encore.runtime.v1.RedisDatabase
	0,  // 11: encore.runtime.v1.RedisServer.kind:type_name -> encore.runtime.v1.ServerKind
	4,  // 12: encore.runtime.v1.RedisServer.tls_config:type_name -> encore.runtime.v1.TLSConfig
	24, // 13: encore.runtime.v1.RedisRole.acl:type_name -> encore.runtime.v1.RedisRole.AuthACL
	34, // 14: encore.runtime.v1.RedisRole.auth_string:type_name -> encore.runtime.v1.SecretData
	12, // 15: encore.runtime.v1.RedisDatabase.conn_pools:type_name -> encore.runtime.v1.RedisConnectionPool
	34, // 16: encore.runtime.v1.AppSecret.data:type_name -> encore.runtime.v1.SecretData
	17, // 17: encore.runtime.v1.PubSubCluster.topics:type_name -> encore.runtime.v1.PubSubTopic
	18, // 18: encore.runtime.v1.PubSubCluster.subscriptions:type_name -> encore.runtime.v1.PubSubSubscription
	25, // 19: encore.runtime.v1.PubSubCluster.encore:type_name -> encore.runtime.v1.PubSubCluster.EncoreCloud
	26, // 20: encore.runtime.v1.PubSubCluster.aws:type_name -> encore.runtime.v1.PubSubCluster.AWSSqsSns
	27, // 21: encore.runtime.v1.PubSubCluster.gcp:type_name -> encore.runtime.v1.PubSubCluster.GCPPubSub
	29, // 22: encore.runtime.v1.PubSubCluster.azure:type_name -> encore.runtime.v1.PubSubCluster.AzureServiceBus
	28, // 23: encore.runtime.v1.PubSubCluster.nsq:type_name -> encore.runtime.v1.PubSubCluster.NSQ
	1,  // 24: encore.runtime.v1.PubSubTopic.delivery_guarantee:type_name -> encore.runtime.v1.PubSubTopic.DeliveryGuarantee
	30, // 25: encore.runtime.v1.PubSubTopic.gcp_config:type_name -> encore.runtime.v1.PubSubTopic.GCPConfig
	31, // 26: encore.runtime.v1.PubSubSubscription.gcp_config:type_name -> encore.runtime.v1.PubSubSubscription.GCPConfig
	20, // 27: encore.runtime.v1.BucketCluster.buckets:type_name -> encore.runtime.v1.Bucket
	32, // 28: encore.runtime.v1.Gateway.cors:type_name -> encore.runtime.v1.Gateway.CORS
	6,  // 29: encore.runtime.v1.Infrastructure.Credentials.client_certs:type_name -> encore.runtime.v1.ClientCert
	7,  // 30: encore.runtime.v1.Infrastructure.Credentials.sql_roles:type_name -> encore.runtime.v1.SQLRole
	13, // 31: encore.runtime.v1.Infrastructure.Credentials.redis_roles:type_name -> encore.runtime.v1.RedisRole
	21, // 32: encore.runtime.v1.Infrastructure.Resources.gateways:type_name -> encore.runtime.v1.Gateway
	3,  // 33: encore.runtime.v1.Infrastructure.Resources.sql_clusters:type_name -> encore.runtime.v1.SQLCluster
	16, // 34: encore.runtime.v1.Infrastructure.Resources.pubsub_clusters:type_name -> encore.runtime.v1.PubSubCluster
	10, // 35: encore.runtime.v1.Infrastructure.Resources.redis_clusters:type_name -> encore.runtime.v1.RedisCluster
	15, // 36: encore.runtime.v1.Infrastructure.Resources.app_secrets:type_name -> encore.runtime.v1.AppSecret
	19, // 37: encore.runtime.v1.Infrastructure.Resources.bucket_clusters:type_name -> encore.runtime.v1.BucketCluster
	34, // 38: encore.runtime.v1.RedisRole.AuthACL.password:type_name -> encore.runtime.v1.SecretData
	33, // 39: encore.runtime.v1.Gateway.CORS.allowed_origins:type_name -> encore.runtime.v1.Gateway.CORSAllowedOrigins
	33, // 40: encore.runtime.v1.Gateway.CORS.allowed_origins_without_credentials:type_name -> encore.runtime.v1.Gateway.CORSAllowedOrigins
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_encore_runtime_v1_infra_proto_init() }
func file_encore_runtime_v1_infra_proto_init() {
	if File_encore_runtime_v1_infra_proto != nil {
		return
	}
	file_encore_runtime_v1_secretdata_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_encore_runtime_v1_infra_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Infrastructure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientCert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLDatabase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLConnectionPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisConnectionPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisDatabase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubSubCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubSubTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubSubSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Infrastructure_Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Infrastructure_Resources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisRole_AuthACL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubSubCluster_EncoreCloud); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubSubCluster_AWSSqsSns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubSubCluster_GCPPubSub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubSubCluster_NSQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubSubCluster_AzureServiceBus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubSubTopic_GCPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubSubSubscription_GCPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gateway_CORS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_encore_runtime_v1_infra_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gateway_CORSAllowedOrigins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_encore_runtime_v1_infra_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_encore_runtime_v1_infra_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_encore_runtime_v1_infra_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_encore_runtime_v1_infra_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_encore_runtime_v1_infra_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*RedisRole_Acl)(nil),
		(*RedisRole_AuthString)(nil),
	}
	file_encore_runtime_v1_infra_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_encore_runtime_v1_infra_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*PubSubCluster_Encore)(nil),
		(*PubSubCluster_Aws)(nil),
		(*PubSubCluster_Gcp)(nil),
		(*PubSubCluster_Azure)(nil),
		(*PubSubCluster_Nsq)(nil),
	}
	file_encore_runtime_v1_infra_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*PubSubTopic_GcpConfig)(nil),
	}
	file_encore_runtime_v1_infra_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*PubSubSubscription_GcpConfig)(nil),
	}
	file_encore_runtime_v1_infra_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_encore_runtime_v1_infra_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*Gateway_CORS_AllowedOrigins)(nil),
		(*Gateway_CORS_UnsafeAllowAllOriginsWithCredentials)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_encore_runtime_v1_infra_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_encore_runtime_v1_infra_proto_goTypes,
		DependencyIndexes: file_encore_runtime_v1_infra_proto_depIdxs,
		EnumInfos:         file_encore_runtime_v1_infra_proto_enumTypes,
		MessageInfos:      file_encore_runtime_v1_infra_proto_msgTypes,
	}.Build()
	File_encore_runtime_v1_infra_proto = out.File
	file_encore_runtime_v1_infra_proto_rawDesc = nil
	file_encore_runtime_v1_infra_proto_goTypes = nil
	file_encore_runtime_v1_infra_proto_depIdxs = nil
}
