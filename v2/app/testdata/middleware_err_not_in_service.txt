! parse

-- svc/svc.go --
package svc

import "context"


//encore:api public tag:foo
func API(ctx context.Context) error { return nil }

-- svc/mw/mw.go --
package mw

import "encore.dev/middleware"

//encore:middleware target=tag:foo
func TaggedInSvc(req middleware.Request, next middleware.Next) middleware.Response {
    return next(req)
}

//encore:middleware target=all
func AllInSvc(req middleware.Request, next middleware.Next) middleware.Response {
    return next(req)
}


-- lib/globalmw/globalmw.go --
package globalmw

import "encore.dev/middleware"

//encore:middleware global target=tag:foo
func TaggedInSvc(req middleware.Request, next middleware.Next) middleware.Response {
    return next(req)
}

//encore:middleware target=all
func AllInSvc(req middleware.Request, next middleware.Next) middleware.Response {
    return next(req)
}
-- want: errors --

── Invalid middleware function ────────────────────────────────────────────────────────────[E9999]──

Middleware must be defined in a service unless it is marked as being global.

    ╭─[ lib/globalmw/globalmw.go:11:6 ]
    │
  9 │
 10 │ //encore:middleware target=all
 11 │ func AllInSvc(req middleware.Request, next middleware.Next) middleware.Response {
    ⋮      ────────
 12 │     return next(req)
 13 │ }
────╯

hint: middleware must have the signature:
	func(req middleware.Request, next middleware.Next) middleware.Response

For more information on how to use middleware, see https://encore.dev/docs/develop/middleware
