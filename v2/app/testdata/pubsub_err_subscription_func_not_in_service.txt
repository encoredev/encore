! parse
err 'The function passed to `pubsub.NewSubscription` must be declared in the the same service as the'

-- shared/shared.go --
package shared

type MessageType struct {
    Name string
}

-- svc1/svc.go --
package svc1

import (
    "context"

    "encore.dev/pubsub"

    "test/shared"
    "test/svc2"
)

var BasicTopic = pubsub.NewTopic[*shared.MessageType]("basic-topic", pubsub.TopicConfig{ DeliveryGuarantee: pubsub.AtLeastOnce })

var _ = pubsub.NewSubscription(BasicTopic, "basic-subscription", pubsub.SusbcriptionConfig { Handler: svc2.Subscriber })

// encore:api
func Stuff(ctx context.Context) error {
    return nil
}

-- svc2/svc.go --
package svc2

import (
    "context"

    "test/shared"
)

//encore:api
func Subscriber(ctx context.Context, msg *shared.MessageType) error {
    return nil
}

-- want: errors --

── Invalid PubSub subscription handler ────────────────────────────────────────────────────[E9999]──

The handler for the subscription must be defined in the same service as the call to
pubsub.NewSubscription.

    ╭─[ svc1/svc.go:14:103 ]
    │
 12 │ var BasicTopic = pubsub.NewTopic[*shared.MessageType]("basic-topic", pubsub.TopicConfig{ DeliveryGuarantee: pubsub.AtLeastOnce })
 13 │
 14 │ var _ = pubsub.NewSubscription(BasicTopic, "basic-subscription", pubsub.SusbcriptionConfig { Handler: svc2.Subscriber })
    ⋮                                                                                                       ───────┬───────
    ⋮                                                                                                              ╰─ handler specified here
 15 │
 16 │ // encore:api
────╯

    ╭─[ svc2/svc.go:10:6 ]
    │
  8 │
  9 │ //encore:api
 10 │ func Subscriber(ctx context.Context, msg *shared.MessageType) error {
    ⋮      ────┬─────
    ⋮          ╰─ endpoint defined here
 11 │     return nil
 12 │ }
────╯

A pubsub subscription must have a unique name per topic and be given a handler function for
processing the message. The handler for the subscription must be defined in the same service as the
call to pubsub.NewSubscription and can be an inline function. For example:
	pubsub.NewSubscription(myTopic, "subscription-name", pubsub.SubscriptionConfig[MyMessage]{
		Handler: func(ctx context.Context, event MyMessage) error { return nil },
	})

For more information on PubSub, see https://encore.dev/docs/primitives/pubsub
