-- svc/svc.go --
package svc

import (
	"context"

	"encore.dev/config"
)

type Config struct {
    Ages map[string]int
}

var _ = config.Load[*Config]()

//encore:api
func MyAPI(ctx context.Context) (error) {
	return nil
}
-- want:svc/encore_internal__config_unmarshal.go --
package svc

import (
	__etype "encore.dev/appruntime/shared/etype"
	config "encore.dev/config"
	"fmt"
	jsoniter "github.com/json-iterator/go"
)

/*
These functions are automatically generated and maintained by Encore to allow config values
to be unmarshalled into the correct types. They are not intended to be used directly. They
are automatically updated by Encore whenever you change the data types used within your
calls to config.Load[T]().
*/

// Concrete unmarshalers for all config.Load calls, including those using generic types.
// These instances are used directly by calls to `config.Load[T]()`.
var (
	encoreInternalConfigUnmarshaler_ptr_svc_Config = func(itr *jsoniter.Iterator, path []string) *Config {
		return func() *Config {
			// If the value is null, we return nil
			if itr.ReadNil() {
				return nil
			}

			// Otherwise we unmarshal the value and return a pointer to it
			obj := encoreInternalTypeConfigUnmarshaler_svc_Config(itr, append(path))
			return &obj
		}()
	}
)

// encoreInternalTypeConfigUnmarshaler_svc_Config will unmarshal the JSON representation into the given type, taking account for
// the `config.Value` dynamic functions.
func encoreInternalTypeConfigUnmarshaler_svc_Config(itr *jsoniter.Iterator, path []string) (obj Config) {
	itr.ReadObjectCB(func(itr *jsoniter.Iterator, field string) bool {
		switch field {
		case "Ages":
			obj.Ages = config.ReadMap[string, int](itr, func(itr *jsoniter.Iterator, keyAsString string) (string, int) {
				// Decode the map key from the JSON string to the underlying type it needs to be
				keyDecoder := new(__etype.Unmarshaller)
				key := __etype.UnmarshalOne(keyDecoder, __etype.UnmarshalString, "keyAsString", keyAsString, true)
				if err := keyDecoder.Error; err != nil {
					panic(fmt.Sprintf("unable to decode the config: %v", err))
				}
				return key, itr.ReadInt()
			})
		default:
			itr.Skip()
		}
		return true
	})
	return
}
-- want:svc/svc.go --
package svc

import (
	"context"

	"encore.dev/config"
)

type Config struct {
    Ages map[string]int
}

var _ = config.Load[*Config]("svc", encoreInternalConfigUnmarshaler_ptr_svc_Config/*line :13:30*/)

//encore:api
func MyAPI(ctx context.Context) (error) {
	return nil
}
