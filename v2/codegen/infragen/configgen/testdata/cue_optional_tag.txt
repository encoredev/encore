-- svc/svc.go --
package svc

import (
	"context"

	"encore.dev/config"
)

type ServerOption struct {
    Option   int64
    Disabled bool `cue:",opt"` // True if this is disabled
}

type Config struct {
    HTTP    ServerOption
    Another ServerOption
    TCP     ServerOption `cue:",opt"`
    GRPC    ServerOption `cue:",opt"`
}

var _ = config.Load[*Config]()

//encore:api
func MyAPI(ctx context.Context) (error) {
	return nil
}
-- want:svc/encore_internal__config_unmarshal.go --
package svc

import jsoniter "github.com/json-iterator/go"

/*
These functions are automatically generated and maintained by Encore to allow config values
to be unmarshalled into the correct types. They are not intended to be used directly. They
are automatically updated by Encore whenever you change the data types used within your
calls to config.Load[T]().
*/

// Concrete unmarshalers for all config.Load calls, including those using generic types.
// These instances are used directly by calls to `config.Load[T]()`.
var (
	encoreInternalConfigUnmarshaler_ptr_svc_Config = func(itr *jsoniter.Iterator, path []string) *Config {
		return func() *Config {
			// If the value is null, we return nil
			if itr.ReadNil() {
				return nil
			}

			// Otherwise we unmarshal the value and return a pointer to it
			obj := encoreInternalTypeConfigUnmarshaler_svc_Config(itr, append(path))
			return &obj
		}()
	}
)

// encoreInternalTypeConfigUnmarshaler_svc_Config will unmarshal the JSON representation into the given type, taking account for
// the `config.Value` dynamic functions.
func encoreInternalTypeConfigUnmarshaler_svc_Config(itr *jsoniter.Iterator, path []string) (obj Config) {
	itr.ReadObjectCB(func(itr *jsoniter.Iterator, field string) bool {
		switch field {
		case "HTTP":
			obj.HTTP = encoreInternalTypeConfigUnmarshaler_svc_ServerOption(itr, append(path, "HTTP"))
		case "Another":
			obj.Another = encoreInternalTypeConfigUnmarshaler_svc_ServerOption(itr, append(path, "Another"))
		case "TCP":
			obj.TCP = encoreInternalTypeConfigUnmarshaler_svc_ServerOption(itr, append(path, "TCP"))
		case "GRPC":
			obj.GRPC = encoreInternalTypeConfigUnmarshaler_svc_ServerOption(itr, append(path, "GRPC"))
		default:
			itr.Skip()
		}
		return true
	})
	return
}

// encoreInternalTypeConfigUnmarshaler_svc_ServerOption will unmarshal the JSON representation into the given type, taking account for
// the `config.Value` dynamic functions.
func encoreInternalTypeConfigUnmarshaler_svc_ServerOption(itr *jsoniter.Iterator, path []string) (obj ServerOption) {
	itr.ReadObjectCB(func(itr *jsoniter.Iterator, field string) bool {
		switch field {
		case "Option":
			obj.Option = itr.ReadInt64()
		case "Disabled":
			obj.Disabled = itr.ReadBool()
		default:
			itr.Skip()
		}
		return true
	})
	return
}
-- want:svc/svc.go --
package svc

import (
	"context"

	"encore.dev/config"
)

type ServerOption struct {
    Option   int64
    Disabled bool `cue:",opt"` // True if this is disabled
}

type Config struct {
    HTTP    ServerOption
    Another ServerOption
    TCP     ServerOption `cue:",opt"`
    GRPC    ServerOption `cue:",opt"`
}

var _ = config.Load[*Config]("svc", encoreInternalConfigUnmarshaler_ptr_svc_Config/*line :21:30*/)

//encore:api
func MyAPI(ctx context.Context) (error) {
	return nil
}
