-- svc/svc.go --
package svc

import (
	"context"

	"encore.dev/config"
)

type Config struct {
    Name        config.String    // The users name
    Port        config.Uint16
    ReadOnly    config.Bool      // true if we're in read only mode

    // MagicNumber is complicated and requires
    // a multi-line comment to explain it.
    MagicNumber config.Int

    Start       config.Time // The time at which the service was first started
    ID          config.UUID // An ID

    PublicKey config.Value[[]byte]

    AdminUsers config.Values[string]
}

var _ = config.Load[*Config]()

//encore:api
func MyAPI(ctx context.Context) (error) {
	return nil
}
-- want:svc/encore_internal__config_unmarshal.go --
package svc

import (
	__etype "encore.dev/appruntime/shared/etype"
	config "encore.dev/config"
	uuid "encore.dev/types/uuid"
	"fmt"
	jsoniter "github.com/json-iterator/go"
	"time"
)

/*
These functions are automatically generated and maintained by Encore to allow config values
to be unmarshalled into the correct types. They are not intended to be used directly. They
are automatically updated by Encore whenever you change the data types used within your
calls to config.Load[T]().
*/

// Concrete unmarshalers for all config.Load calls, including those using generic types.
// These instances are used directly by calls to `config.Load[T]()`.
var (
	encoreInternalConfigUnmarshaler_ptr_svc_Config = func(itr *jsoniter.Iterator, path []string) *Config {
		return func() *Config {
			// If the value is null, we return nil
			if itr.ReadNil() {
				return nil
			}

			// Otherwise we unmarshal the value and return a pointer to it
			obj := encoreInternalTypeConfigUnmarshaler_svc_Config(itr, append(path))
			return &obj
		}()
	}
)

// encoreInternalTypeConfigUnmarshaler_svc_Config will unmarshal the JSON representation into the given type, taking account for
// the `config.Value` dynamic functions.
func encoreInternalTypeConfigUnmarshaler_svc_Config(itr *jsoniter.Iterator, path []string) (obj Config) {
	itr.ReadObjectCB(func(itr *jsoniter.Iterator, field string) bool {
		switch field {
		case "Name":
			obj.Name = config.CreateValue[string](itr.ReadString(), append(path, "Name"))
		case "Port":
			obj.Port = config.CreateValue[uint16](itr.ReadUint16(), append(path, "Port"))
		case "ReadOnly":
			obj.ReadOnly = config.CreateValue[bool](itr.ReadBool(), append(path, "ReadOnly"))
		case "MagicNumber":
			obj.MagicNumber = config.CreateValue[int](itr.ReadInt(), append(path, "MagicNumber"))
		case "Start":
			obj.Start = config.CreateValue[time.Time](func() (rtn time.Time) {
				decoder := new(__etype.Unmarshaller)
				rtn = __etype.UnmarshalOne(decoder, __etype.UnmarshalTime, "value", itr.ReadString(), true)
				if err := decoder.Error; err != nil {
					panic(fmt.Sprintf("unable to decode the config: %v", err))
				}
				return
			}(), append(path, "Start"))
		case "ID":
			obj.ID = config.CreateValue[uuid.UUID](func() (rtn uuid.UUID) {
				decoder := new(__etype.Unmarshaller)
				rtn = __etype.UnmarshalOne(decoder, __etype.UnmarshalUUID, "value", itr.ReadString(), true)
				if err := decoder.Error; err != nil {
					panic(fmt.Sprintf("unable to decode the config: %v", err))
				}
				return
			}(), append(path, "ID"))
		case "PublicKey":
			obj.PublicKey = config.CreateValue[[]byte](func() (rtn []byte) {
				decoder := new(__etype.Unmarshaller)
				rtn = __etype.UnmarshalOne(decoder, __etype.UnmarshalBytes, "value", itr.ReadString(), true)
				if err := decoder.Error; err != nil {
					panic(fmt.Sprintf("unable to decode the config: %v", err))
				}
				return
			}(), append(path, "PublicKey"))
		case "AdminUsers":
			obj.AdminUsers = config.CreateValueList(config.ReadArray[string](itr, func(itr *jsoniter.Iterator, idx int) string {
				return itr.ReadString()
			}), append(path, "AdminUsers"))
		default:
			itr.Skip()
		}
		return true
	})
	return
}
-- want:svc/svc.go --
package svc

import (
	"context"

	"encore.dev/config"
)

type Config struct {
    Name        config.String    // The users name
    Port        config.Uint16
    ReadOnly    config.Bool      // true if we're in read only mode

    // MagicNumber is complicated and requires
    // a multi-line comment to explain it.
    MagicNumber config.Int

    Start       config.Time // The time at which the service was first started
    ID          config.UUID // An ID

    PublicKey config.Value[[]byte]

    AdminUsers config.Values[string]
}

var _ = config.Load[*Config]("svc", encoreInternalConfigUnmarshaler_ptr_svc_Config/*line :26:30*/)

//encore:api
func MyAPI(ctx context.Context) (error) {
	return nil
}
