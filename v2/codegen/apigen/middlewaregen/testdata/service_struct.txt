-- code.go --
package code

import ("context"; "encore.dev/middleware")

//encore:service
type Service struct{}

//encore:middleware target=all
func (s *Service) Middleware(req middleware.Request, next middleware.Next) middleware.Response {
    return next(req)
}

// Note: we need an API endpoint to be able to define service-specific middleware
//encore:api
func (s *Service) API(context.Context) error { return nil }
-- want:encore_internal__middleware.go --
package code

import (
	__api "encore.dev/appruntime/apisdk/api"
	errs "encore.dev/beta/errs"
	middleware "encore.dev/middleware"
)

var EncoreInternal_middleware_middleware_Middleware = &__api.Middleware{
	DefLoc: int32(0),
	Global: false,
	ID:     "example.com.Middleware",
	Invoke: func(req middleware.Request, next middleware.Next) middleware.Response {
		svc, err := EncoreInternal_svcstruct_Service.Get()
		if err != nil {
			return middleware.Response{
				Err:        err,
				HTTPStatus: errs.HTTPStatus(err),
			}
		}
		return svc.Middleware(req, next)
	},
	Name:    "Middleware",
	PkgName: "code",
}
-- want:encore_internal__svcstruct.go --
package code

import __service "encore.dev/appruntime/apisdk/service"

func init() {
	__service.Register(EncoreInternal_svcstruct_Service)
}

var EncoreInternal_svcstruct_Service = &__service.Decl[Service]{
	Name:        "Service",
	Service:     "code",
	Setup:       nil,
	SetupDefLoc: int32(0),
}
