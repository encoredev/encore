-- basic.go --
package basic

import ("context"; "net/http")

//encore:service
type Service struct{}

// Foo is an amazing API which does
// x, y and z - it's really cool!
//encore:api public
func (s *Service) Foo(ctx context.Context) error { return nil }

//encore:api public raw
func (s *Service) Raw(w http.ResponseWriter, req *http.Request) {}

type Data struct{}

//encore:api public
func (s *Service) WithReq(context.Context, *Data) error { return nil }

//encore:api public
func (s *Service) WithResp(context.Context) (*Data, error) { return nil, nil }

//encore:api public
func (s *Service) WithReqResp(context.Context, *Data) (*Data, error) { return nil, nil }

//encore:api public path=/pathing/:name/:age/*other
func (s *Service) WithPathParams(ctx context.Context, name string, age int, other string) error { return nil }

//encore:api public path=/fallback/!url
func (s *Service) WithFallback(ctx context.Context, url string) error { return nil }

// This API doesn't
// exist on the service struct, but should still
// appear
//
// on the service Interface
//encore:api public
func NoServiceStruct(context.Context) error { return nil }
-- want:clients/basic/basic.go --
// Code generated by encore. DO NOT EDIT.

package basicclient

import (
	"context"
	__api "encore.dev/appruntime/apisdk/api"
	jsoniter "github.com/json-iterator/go"
	"net/http"
	"net/url"
)

type EncoreInternal_FooReq struct{}
type EncoreInternal_WithReqReq struct {
	Payload struct{}
}
type EncoreInternal_WithRespReq struct{}
type EncoreInternal_WithRespResp struct{}
type EncoreInternal_WithReqRespReq struct {
	Payload struct{}
}
type EncoreInternal_WithReqRespResp struct{}
type EncoreInternal_WithPathParamsReq struct {
	P0 string
	P1 int
	P2 string
}
type EncoreInternal_WithFallbackReq struct {
	P0 string
}
type EncoreInternal_NoServiceStructReq struct{}

// Foo is an amazing API which does
// x, y and z - it's really cool!
func Foo(ctx context.Context) error {
	callCtx := __api.NewCallContext(ctx)
	req := &EncoreInternal_FooReq{}
	_, err := EncoreInternal_basic_APIDesc_Foo.Call(callCtx, req)
	return err
}

func WithReq(ctx context.Context, req *EncoreInternal_WithReqReq) error {
	callCtx := __api.NewCallContext(ctx)
	_, err := EncoreInternal_basic_APIDesc_WithReq.Call(callCtx, req)
	return err
}

func WithResp(ctx context.Context) (*EncoreInternal_WithRespResp, error) {
	callCtx := __api.NewCallContext(ctx)
	req := &EncoreInternal_WithRespReq{}
	_, err := EncoreInternal_basic_APIDesc_WithResp.Call(callCtx, req)
	if err != nil {
		return nil, err
	}
	result := &EncoreInternal_WithRespResp{}
	// TODO: Map fields from response to result
	return result, nil
}

func WithReqResp(ctx context.Context, req *EncoreInternal_WithReqRespReq) (*EncoreInternal_WithReqRespResp, error) {
	callCtx := __api.NewCallContext(ctx)
	_, err := EncoreInternal_basic_APIDesc_WithReqResp.Call(callCtx, req)
	if err != nil {
		return nil, err
	}
	result := &EncoreInternal_WithReqRespResp{}
	// TODO: Map fields from response to result
	return result, nil
}

func WithPathParams(ctx context.Context, name string, age int, other string) error {
	callCtx := __api.NewCallContext(ctx)
	req := &EncoreInternal_WithPathParamsReq{}
	_, err := EncoreInternal_basic_APIDesc_WithPathParams.Call(callCtx, req)
	return err
}

func WithFallback(ctx context.Context, url string) error {
	callCtx := __api.NewCallContext(ctx)
	req := &EncoreInternal_WithFallbackReq{}
	_, err := EncoreInternal_basic_APIDesc_WithFallback.Call(callCtx, req)
	return err
}

// This API doesn't
// exist on the service struct, but should still
// appear
//
// on the service Interface
func NoServiceStruct(ctx context.Context) error {
	callCtx := __api.NewCallContext(ctx)
	req := &EncoreInternal_NoServiceStructReq{}
	_, err := EncoreInternal_basic_APIDesc_NoServiceStruct.Call(callCtx, req)
	return err
}

// Interface defines the service's API surface area, primarily for mocking purposes.
//
// Raw endpoints are currently excluded from this interface, as Encore does not yet
// support service-to-service API calls to raw endpoints.
type Interface interface {
	// Foo is an amazing API which does
	// x, y and z - it's really cool!
	Foo(ctx context.Context) error

	WithReq(ctx context.Context, req *EncoreInternal_WithReqReq) error

	WithResp(ctx context.Context) (*EncoreInternal_WithRespResp, error)

	WithReqResp(ctx context.Context, req *EncoreInternal_WithReqRespReq) (*EncoreInternal_WithReqRespResp, error)

	WithPathParams(ctx context.Context, name string, age int, other string) error

	WithFallback(ctx context.Context, url string) error

	// This API doesn't
	// exist on the service struct, but should still
	// appear
	//
	// on the service Interface
	NoServiceStruct(ctx context.Context) error
}

var EncoreInternal_basic_APIDesc_Foo = &__api.Desc[*EncoreInternal_FooReq, interface{}]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_FooReq) (*EncoreInternal_FooReq, error) {
		var clone *EncoreInternal_FooReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: nil,
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp interface{}, err error) {
		return resp, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_FooReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_FooReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_FooReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp interface{}, status int) (err error) {
		return nil
	},
	Endpoint:            "Foo",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/basic.Foo",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/basic.Foo",
	ReqPath: func(reqData *EncoreInternal_FooReq) (string, __api.UnnamedParams, error) {
		return "/basic.Foo", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_FooReq) any {
		return nil
	},
	Service:           "basic",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_basic_APIDesc_WithReq = &__api.Desc[*EncoreInternal_WithReqReq, interface{}]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_WithReqReq) (*EncoreInternal_WithReqReq, error) {
		var clone *EncoreInternal_WithReqReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: nil,
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp interface{}, err error) {
		return resp, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_WithReqReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_WithReqReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_WithReqReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp interface{}, status int) (err error) {
		return nil
	},
	Endpoint:            "WithReq",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"POST"},
	Path:                "/basic.WithReq",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/basic.WithReq",
	ReqPath: func(reqData *EncoreInternal_WithReqReq) (string, __api.UnnamedParams, error) {
		return "/basic.WithReq", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_WithReqReq) any {
		return reqData.Payload
	},
	Service:           "basic",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_basic_APIDesc_WithResp = &__api.Desc[*EncoreInternal_WithRespReq, EncoreInternal_WithRespResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_WithRespReq) (*EncoreInternal_WithRespReq, error) {
		var clone *EncoreInternal_WithRespReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_WithRespResp) (EncoreInternal_WithRespResp, error) {
		var clone EncoreInternal_WithRespResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_WithRespResp, err error) {
		var result EncoreInternal_WithRespResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_WithRespReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_WithRespReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_WithRespReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_WithRespResp, status int) (err error) {
		return nil
	},
	Endpoint:            "WithResp",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/basic.WithResp",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/basic.WithResp",
	ReqPath: func(reqData *EncoreInternal_WithRespReq) (string, __api.UnnamedParams, error) {
		return "/basic.WithResp", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_WithRespReq) any {
		return nil
	},
	Service:           "basic",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_basic_APIDesc_WithReqResp = &__api.Desc[*EncoreInternal_WithReqRespReq, EncoreInternal_WithReqRespResp]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_WithReqRespReq) (*EncoreInternal_WithReqRespReq, error) {
		var clone *EncoreInternal_WithReqRespReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_WithReqRespResp) (EncoreInternal_WithReqRespResp, error) {
		var clone EncoreInternal_WithReqRespResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_WithReqRespResp, err error) {
		var result EncoreInternal_WithReqRespResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_WithReqRespReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_WithReqRespReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_WithReqRespReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_WithReqRespResp, status int) (err error) {
		return nil
	},
	Endpoint:            "WithReqResp",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"POST"},
	Path:                "/basic.WithReqResp",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/basic.WithReqResp",
	ReqPath: func(reqData *EncoreInternal_WithReqRespReq) (string, __api.UnnamedParams, error) {
		return "/basic.WithReqResp", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_WithReqRespReq) any {
		return reqData.Payload
	},
	Service:           "basic",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_basic_APIDesc_WithPathParams = &__api.Desc[*EncoreInternal_WithPathParamsReq, interface{}]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_WithPathParamsReq) (*EncoreInternal_WithPathParamsReq, error) {
		var clone *EncoreInternal_WithPathParamsReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: nil,
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp interface{}, err error) {
		return resp, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_WithPathParamsReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_WithPathParamsReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_WithPathParamsReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp interface{}, status int) (err error) {
		return nil
	},
	Endpoint:            "WithPathParams",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/pathing/:name/:age/*other",
	PathParamNames:      []string{"name", "age", "other"},
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/pathing/:name/:age/*other",
	ReqPath: func(reqData *EncoreInternal_WithPathParamsReq) (string, __api.UnnamedParams, error) {
		return "/pathing/:name/:age/*other", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_WithPathParamsReq) any {
		return nil
	},
	Service:           "basic",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_basic_APIDesc_WithFallback = &__api.Desc[*EncoreInternal_WithFallbackReq, interface{}]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_WithFallbackReq) (*EncoreInternal_WithFallbackReq, error) {
		var clone *EncoreInternal_WithFallbackReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: nil,
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp interface{}, err error) {
		return resp, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_WithFallbackReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_WithFallbackReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_WithFallbackReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp interface{}, status int) (err error) {
		return nil
	},
	Endpoint:            "WithFallback",
	Fallback:            true,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/fallback/!url",
	PathParamNames:      []string{"url"},
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/fallback/!url",
	ReqPath: func(reqData *EncoreInternal_WithFallbackReq) (string, __api.UnnamedParams, error) {
		return "/fallback/!url", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_WithFallbackReq) any {
		return nil
	},
	Service:           "basic",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}

var EncoreInternal_basic_APIDesc_NoServiceStruct = &__api.Desc[*EncoreInternal_NoServiceStructReq, interface{}]{
	Access:     __api.Public,
	AppHandler: nil,
	CloneReq: func(r *EncoreInternal_NoServiceStructReq) (*EncoreInternal_NoServiceStructReq, error) {
		var clone *EncoreInternal_NoServiceStructReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: nil,
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp interface{}, err error) {
		return resp, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_NoServiceStructReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_NoServiceStructReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_NoServiceStructReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp interface{}, status int) (err error) {
		return nil
	},
	Endpoint:            "NoServiceStruct",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/basic.NoServiceStruct",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/basic.NoServiceStruct",
	ReqPath: func(reqData *EncoreInternal_NoServiceStructReq) (string, __api.UnnamedParams, error) {
		return "/basic.NoServiceStruct", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_NoServiceStructReq) any {
		return nil
	},
	Service:           "basic",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            0,
	Tags:              nil,
}
-- want:encore.gen.go --
// Code generated by encore. DO NOT EDIT.

package basic

import (
	"context"
	"errors"
	"net/http"
)

// These functions are automatically generated and maintained by Encore
// to simplify calling them from other services, as they were implemented as methods.
// They are automatically updated by Encore whenever your API endpoints change.

// Foo is an amazing API which does
// x, y and z - it's really cool!
func Foo(ctx context.Context) error {
	svc, err := EncoreInternal_svcstruct_Service.Get()
	if err != nil {
		return err
	}
	return svc.Foo(ctx)
}

func Raw(ctx context.Context, req *http.Request) (*http.Response, error) {
	return nil, errors.New("encore: calling raw endpoints is not yet supported")
}

func WithReq(ctx context.Context, p *Data) error {
	svc, err := EncoreInternal_svcstruct_Service.Get()
	if err != nil {
		return err
	}
	return svc.WithReq(ctx, p)
}

func WithResp(ctx context.Context) (*Data, error) {
	svc, err := EncoreInternal_svcstruct_Service.Get()
	if err != nil {
		return (*Data)(nil), err
	}
	return svc.WithResp(ctx)
}

func WithReqResp(ctx context.Context, p *Data) (*Data, error) {
	svc, err := EncoreInternal_svcstruct_Service.Get()
	if err != nil {
		return (*Data)(nil), err
	}
	return svc.WithReqResp(ctx, p)
}

func WithPathParams(ctx context.Context, name string, age int, other string) error {
	svc, err := EncoreInternal_svcstruct_Service.Get()
	if err != nil {
		return err
	}
	return svc.WithPathParams(ctx, name, age, other)
}

func WithFallback(ctx context.Context, url string) error {
	svc, err := EncoreInternal_svcstruct_Service.Get()
	if err != nil {
		return err
	}
	return svc.WithFallback(ctx, url)
}

// Interface defines the service's API surface area, primarily for mocking purposes.
//
// Raw endpoints are currently excluded from this interface, as Encore does not yet
// support service-to-service API calls to raw endpoints.
type Interface interface {
	// Foo is an amazing API which does
	// x, y and z - it's really cool!
	Foo(ctx context.Context) error

	WithReq(ctx context.Context, p *Data) error

	WithResp(ctx context.Context) (*Data, error)

	WithReqResp(ctx context.Context, p *Data) (*Data, error)

	WithPathParams(ctx context.Context, name string, age int, other string) error

	WithFallback(ctx context.Context, url string) error

	// This API doesn't
	// exist on the service struct, but should still
	// appear
	//
	// on the service Interface
	NoServiceStruct(ctx context.Context) error
}
-- want:encore_internal__svcstruct.go --
package basic

import __service "encore.dev/appruntime/apisdk/service"

func init() {
	__service.Register(EncoreInternal_svcstruct_Service)
}

var EncoreInternal_svcstruct_Service = &__service.Decl[Service]{
	Name:        "Service",
	Service:     "basic",
	Setup:       nil,
	SetupDefLoc: uint32(0x0),
}
