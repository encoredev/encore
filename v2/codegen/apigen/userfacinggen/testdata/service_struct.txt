-- basic.go --
package basic

import ("context"; "net/http")

//encore:service
type Service struct{}

// Foo is an amazing API which does
// x, y and z - it's really cool!
//encore:api public
func (s *Service) Foo(ctx context.Context) error { return nil }

//encore:api public raw
func (s *Service) Raw(w http.ResponseWriter, req *http.Request) {}

type Data struct{}

//encore:api public
func (s *Service) WithReq(context.Context, *Data) error { return nil }

//encore:api public
func (s *Service) WithResp(context.Context) (*Data, error) { return nil, nil }

//encore:api public
func (s *Service) WithReqResp(context.Context, *Data) (*Data, error) { return nil, nil }

//encore:api public path=/pathing/:name/:age/*other
func (s *Service) WithPathParams(ctx context.Context, name string, age int, other string) error { return nil }

//encore:api public path=/fallback/!url
func (s *Service) WithFallback(ctx context.Context, url string) error { return nil }

// This API doesn't
// exist on the service struct, but should still
// appear
//
// on the service Interface
//encore:api public
func NoServiceStruct(context.Context) error { return nil }
-- want:encore.gen.go --
// Code generated by encore. DO NOT EDIT.

package basic

import (
	"context"
	"errors"
	"net/http"
)

// These functions are automatically generated and maintained by Encore
// to simplify calling them from other services, as they were implemented as methods.
// They are automatically updated by Encore whenever your API endpoints change.

// Foo is an amazing API which does
// x, y and z - it's really cool!
func Foo(ctx context.Context) error {
	svc, err := EncoreInternal_svcstruct_Service.Get()
	if err != nil {
		return err
	}
	return svc.Foo(ctx)
}

func Raw(ctx context.Context, req *http.Request) (*http.Response, error) {
	return nil, errors.New("encore: calling raw endpoints is not yet supported")
}

func WithReq(ctx context.Context, p *Data) error {
	svc, err := EncoreInternal_svcstruct_Service.Get()
	if err != nil {
		return err
	}
	return svc.WithReq(ctx, p)
}

func WithResp(ctx context.Context) (*Data, error) {
	svc, err := EncoreInternal_svcstruct_Service.Get()
	if err != nil {
		return (*Data)(nil), err
	}
	return svc.WithResp(ctx)
}

func WithReqResp(ctx context.Context, p *Data) (*Data, error) {
	svc, err := EncoreInternal_svcstruct_Service.Get()
	if err != nil {
		return (*Data)(nil), err
	}
	return svc.WithReqResp(ctx, p)
}

func WithPathParams(ctx context.Context, name string, age int, other string) error {
	svc, err := EncoreInternal_svcstruct_Service.Get()
	if err != nil {
		return err
	}
	return svc.WithPathParams(ctx, name, age, other)
}

func WithFallback(ctx context.Context, url string) error {
	svc, err := EncoreInternal_svcstruct_Service.Get()
	if err != nil {
		return err
	}
	return svc.WithFallback(ctx, url)
}

// Interface defines the service's API surface area, primarily for mocking purposes.
//
// Raw endpoints are currently excluded from this interface, as Encore does not yet
// support service-to-service API calls to raw endpoints.
type Interface interface {
	// Foo is an amazing API which does
	// x, y and z - it's really cool!
	Foo(ctx context.Context) error

	WithReq(ctx context.Context, p *Data) error

	WithResp(ctx context.Context) (*Data, error)

	WithReqResp(ctx context.Context, p *Data) (*Data, error)

	WithPathParams(ctx context.Context, name string, age int, other string) error

	WithFallback(ctx context.Context, url string) error

	// This API doesn't
	// exist on the service struct, but should still
	// appear
	//
	// on the service Interface
	NoServiceStruct(ctx context.Context) error
}
-- want:encore_internal__svcstruct.go --
package basic

import __service "encore.dev/appruntime/apisdk/service"

func init() {
	__service.Register(EncoreInternal_svcstruct_Service)
}

var EncoreInternal_svcstruct_Service = &__service.Decl[Service]{
	Name:        "Service",
	Service:     "basic",
	Setup:       nil,
	SetupDefLoc: uint32(0x0),
}
