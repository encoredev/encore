-- svca/svca.go --
package svca

import "context"

//encore:service
type Service struct{}

//encore:api public
func (s *Service) Foo(context.Context) error { return nil }

-- svcb/svcb.go --
package svcb

import ("context"; "example.com/svca")

//encore:api public
func Baz(ctx context.Context) error { return svca.Foo(ctx) }
-- want:svca/encore.gen.go --
// Code generated by encore. DO NOT EDIT.

package svca

import "context"

// These functions are automatically generated and maintained by Encore
// to simplify calling them from other services, as they were implemented as methods.
// They are automatically updated by Encore whenever your API endpoints change.

func Foo(ctx context.Context) error {
	svc, err := EncoreInternal_svcstruct_Service.Get()
	if err != nil {
		return err
	}
	return svc.Foo(ctx)
}

// Interface defines the service's API surface area, primarily for mocking purposes.
//
// Raw endpoints are currently excluded from this interface, as Encore does not yet
// support service-to-service API calls to raw endpoints.
type Interface interface {
	Foo(ctx context.Context) error
}
-- want:svca/encore_internal__api.go --
package svca

import (
	"context"
	__api "encore.dev/appruntime/apisdk/api"
	svcawrappers "example.com/svca/svcawrappers"
	jsoniter "github.com/json-iterator/go"
	"net/http"
	"net/url"
)

func init() {
	__api.RegisterEndpoint(EncoreInternal_api_APIDesc_Foo, Foo)
}

var EncoreInternal_api_APIDesc_Foo = &__api.Desc[*svcawrappers.EncoreInternal_FooReq, svcawrappers.EncoreInternal_FooResp]{
	Access: __api.Public,
	AppHandler: func(ctx context.Context, reqData *svcawrappers.EncoreInternal_FooReq) (svcawrappers.EncoreInternal_FooResp, error) {
		svc, initErr := EncoreInternal_svcstruct_Service.Get()
		if initErr != nil {
			return __api.Void{}, initErr
		}
		err := svc.Foo(ctx)
		if err != nil {
			return __api.Void{}, err
		}
		return __api.Void{}, nil
	},
	CloneReq: func(r *svcawrappers.EncoreInternal_FooReq) (*svcawrappers.EncoreInternal_FooReq, error) {
		var clone *svcawrappers.EncoreInternal_FooReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r svcawrappers.EncoreInternal_FooResp) (svcawrappers.EncoreInternal_FooResp, error) {
		var clone svcawrappers.EncoreInternal_FooResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp svcawrappers.EncoreInternal_FooResp, err error) {
		return __api.Void{}, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *svcawrappers.EncoreInternal_FooReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(svcawrappers.EncoreInternal_FooReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *svcawrappers.EncoreInternal_FooReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp svcawrappers.EncoreInternal_FooResp, status int) (err error) {
		return nil
	},
	Endpoint:            "Foo",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/svca.Foo",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/svca.Foo",
	ReqPath: func(reqData *svcawrappers.EncoreInternal_FooReq) (string, __api.UnnamedParams, error) {
		return "/svca.Foo", nil, nil
	},
	ReqUserPayload: func(reqData *svcawrappers.EncoreInternal_FooReq) any {
		return nil
	},
	Service:           "svca",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            1,
	Tags:              nil,
}

var _ __api.Callable[*svcawrappers.EncoreInternal_FooReq, svcawrappers.EncoreInternal_FooResp] = EncoreInternal_api_APIDesc_Foo
-- want:svca/encore_internal__apicalls.go --
package svca

import (
	"context"
	__api "encore.dev/appruntime/apisdk/api"
	svcawrappers "example.com/svca/svcawrappers"
)

func EncoreInternal_apicalls_Foo(ctx context.Context) error {
	_, err := EncoreInternal_api_APIDesc_Foo.Call(__api.NewCallContext(ctx), &svcawrappers.EncoreInternal_FooReq{})
	if err != nil {
		return err
	}
	return nil
}
-- want:svca/encore_internal__svcstruct.go --
package svca

import __service "encore.dev/appruntime/apisdk/service"

func init() {
	__service.Register(EncoreInternal_svcstruct_Service)
}

var EncoreInternal_svcstruct_Service = &__service.Decl[Service]{
	Name:        "Service",
	Service:     "svca",
	Setup:       nil,
	SetupDefLoc: uint32(0x0),
}
-- want:svca/svcawrappers/wrappers.go --
package svcawrappers

import __api "encore.dev/appruntime/apisdk/api"

type EncoreInternal_FooReq struct{}

type EncoreInternal_FooResp = __api.Void
-- want:svcb/svcb.go --
package svcb

import ("context"; "example.com/svca")

//encore:api public
func Baz(ctx context.Context) error { return svca.EncoreInternal_apicalls_Foo(ctx) }
