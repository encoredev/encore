-- basic.go --
package basic

import "context"

type Recursive struct {
    Basic []Recursive
    Pointer []*Recursive
    Mutual []MutualTwo
}

type MutualOne struct {
    Basic []MutualTwo
    Pointer []*MutualTwo
    Self []Recursive
    SelfPointer []*Recursive
}

type MutualTwo struct {
    Basic []MutualOne
    Pointer []*MutualOne
}

//encore:api public
func Foo(ctx context.Context, p *Recursive) (*Recursive, error) { return p, nil }
-- want:encore.gen.go --
// Code generated by encore. DO NOT EDIT.

package basic

// These functions are automatically generated and maintained by Encore
// to simplify calling them from other services, as they were implemented as methods.
// They are automatically updated by Encore whenever your API endpoints change.
-- want:encore_internal__api.go --
package basic

import (
	"context"
	__api "encore.dev/appruntime/apisdk/api"
	__etype "encore.dev/appruntime/shared/etype"
	__serde "encore.dev/appruntime/shared/serde"
	jsoniter "github.com/json-iterator/go"
	"net/http"
	"net/url"
	"strings"
)

func init() {
	__api.RegisterEndpoint(EncoreInternal_api_APIDesc_Foo)
}

type EncoreInternal_FooReq struct {
	Payload *Recursive
}

type EncoreInternal_FooResp = *Recursive

var EncoreInternal_api_APIDesc_Foo = &__api.Desc[*EncoreInternal_FooReq, EncoreInternal_FooResp]{
	Access: __api.Public,
	AppHandler: func(ctx context.Context, reqData *EncoreInternal_FooReq) (EncoreInternal_FooResp, error) {
		resp, err := Foo(ctx, reqData.Payload)
		if err != nil {
			return (*Recursive)(nil), err
		}
		return resp, nil
	},
	CloneReq: func(r *EncoreInternal_FooReq) (*EncoreInternal_FooReq, error) {
		var clone *EncoreInternal_FooReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_FooResp) (EncoreInternal_FooResp, error) {
		var clone EncoreInternal_FooResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_FooResp, err error) {
		resp = new(Recursive)
		dec := new(__etype.Unmarshaller)
		// Decode request body
		payload := dec.ReadBody(httpResp.Body)
		iter := jsoniter.ParseBytes(json, payload)

		for iter.ReadObjectCB(func(_ *jsoniter.Iterator, key string) bool {
			switch strings.ToLower(key) {
			case "basic":
				dec.ParseJSON("Basic", iter, &resp.Basic)
			case "pointer":
				dec.ParseJSON("Pointer", iter, &resp.Pointer)
			case "mutual":
				dec.ParseJSON("Mutual", iter, &resp.Mutual)
			default:
				_ = iter.SkipAndReturnBytes()
			}
			return true
		}) {
		}

		if err := dec.Error; err != nil {
			return (*Recursive)(nil), err
		}
		return resp, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_FooReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_FooReq)
		dec := new(__etype.Unmarshaller)
		params := new(Recursive)
		reqData.Payload = params
		switch m := httpReq.Method; m {
		case "POST":
			// Decode request body
			payload := dec.ReadBody(httpReq.Body)
			iter := jsoniter.ParseBytes(json, payload)

			for iter.ReadObjectCB(func(_ *jsoniter.Iterator, key string) bool {
				switch strings.ToLower(key) {
				case "basic":
					dec.ParseJSON("Basic", iter, &params.Basic)
				case "pointer":
					dec.ParseJSON("Pointer", iter, &params.Pointer)
				case "mutual":
					dec.ParseJSON("Mutual", iter, &params.Mutual)
				default:
					_ = iter.SkipAndReturnBytes()
				}
				return true
			}) {
			}

		default:
			panic("HTTP method is not supported")
		}
		if err := dec.Error; err != nil {
			return nil, nil, err
		}
		return reqData, ps, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_FooReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		params := reqData.Payload
		if params == nil {
			// If the payload is nil, we need to return an empty request body.
			return httpHeader, queryString, err
		}

		// Encode request body
		stream.WriteObjectStart()
		stream.WriteObjectField("Basic")
		stream.WriteVal(params.Basic)
		stream.WriteMore()
		stream.WriteObjectField("Pointer")
		stream.WriteVal(params.Pointer)
		stream.WriteMore()
		stream.WriteObjectField("Mutual")
		stream.WriteVal(params.Mutual)
		stream.WriteObjectEnd()

		return httpHeader, queryString, err
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_FooResp) (err error) {
		respData := []byte("null\n")
		if resp != nil {
			// Encode JSON body
			respData, err = __serde.SerializeJSONFunc(json, func(ser *__serde.JSONSerializer) {
				ser.WriteField("Basic", resp.Basic, false)
				ser.WriteField("Pointer", resp.Pointer, false)
				ser.WriteField("Mutual", resp.Mutual, false)
			})
			if err != nil {
				return err
			}
			respData = append(respData, '\n')
		}

		// Write response
		w.Write(respData)
		return nil
	},
	Endpoint:            "Foo",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"POST"},
	Path:                "/basic.Foo",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/basic.Foo",
	ReqPath: func(reqData *EncoreInternal_FooReq) (string, __api.UnnamedParams, error) {
		return "/basic.Foo", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_FooReq) any {
		return reqData.Payload
	},
	Service:           "basic",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            1,
}
