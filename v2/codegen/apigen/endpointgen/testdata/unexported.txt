-- code.go --
package code

import "context"

type Response struct {
    Exported bool
    unexported string
}

//encore:api public
func Foo(ctx context.Context) (*Response, error) { return nil, nil }
-- want:clients/code/encore.gen.go --
// Code generated by encore. DO NOT EDIT.

package codeclient

import (
	"context"
	__api "encore.dev/appruntime/apisdk/api"
	errs "encore.dev/beta/errs"
	examplecom "example.com"
	jsoniter "github.com/json-iterator/go"
	"net/http"
	"net/url"
)

func Foo(ctx context.Context) (*examplecom.Response, error) {
	callCtx := __api.NewCallContext(ctx)
	req := new(EncoreInternal_FooReq)
	return EncoreInternal_codeclient_api_APIDesc_Foo.Call(callCtx, req)
}

// Interface defines the service's API surface area, primarily for mocking purposes.
//
// Raw endpoints are currently excluded from this interface, as Encore does not yet
// support service-to-service API calls to raw endpoints.
type Interface interface {
	Foo(ctx context.Context) (*examplecom.Response, error)
}

type EncoreInternal_FooReq struct{}

type EncoreInternal_FooResp = *examplecom.Response

var EncoreInternal_codeclient_api_APIDesc_Foo = &__api.Desc[*EncoreInternal_FooReq, EncoreInternal_FooResp]{
	Access: __api.Public,
	AppHandler: func(ctx context.Context, reqData *EncoreInternal_FooReq) (EncoreInternal_FooResp, error) {
		handlerOpt := __api.LookupEndpoint("code", "Foo")
		handler, found := handlerOpt.Get()
		if !found {
			return (*examplecom.Response)(nil), errs.B().Code(errs.NotFound).Msgf("endpoint %s.%s not found", "code", "Foo").Err()
		}
		// Cast handler to *Desc to access AppHandler
		desc := handler.(*__api.Desc[*EncoreInternal_FooReq, EncoreInternal_FooResp])
		if desc.AppHandler == nil {
			return (*examplecom.Response)(nil), errs.B().Code(errs.Unimplemented).Msgf("endpoint %s.%s has no AppHandler", "code", "Foo").Err()
		}
		return desc.AppHandler(ctx, reqData)
	},
	CloneReq: func(r *EncoreInternal_FooReq) (*EncoreInternal_FooReq, error) {
		var clone *EncoreInternal_FooReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_FooResp) (EncoreInternal_FooResp, error) {
		var clone EncoreInternal_FooResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_FooResp, err error) {
		var result EncoreInternal_FooResp
		return result, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_FooReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_FooReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_FooReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_FooResp, status int) (err error) {
		return nil
	},
	Endpoint:            "Foo",
	Fallback:            false,
	GlobalMiddlewareIDs: nil,
	Methods:             []string{"GET", "POST"},
	Path:                "/code.Foo",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/code.Foo",
	ReqPath: func(reqData *EncoreInternal_FooReq) (string, __api.UnnamedParams, error) {
		return "/code.Foo", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_FooReq) any {
		return nil
	},
	Service:           "code",
	ServiceMiddleware: nil,
	SvcNum:            1,
	Tags:              nil,
}
-- want:encore.gen.go --
// Code generated by encore. DO NOT EDIT.

package code

import "context"

// These functions are automatically generated and maintained by Encore
// to simplify calling them from other services, as they were implemented as methods.
// They are automatically updated by Encore whenever your API endpoints change.

// Interface defines the service's API surface area, primarily for mocking purposes.
//
// Raw endpoints are currently excluded from this interface, as Encore does not yet
// support service-to-service API calls to raw endpoints.
type Interface interface {
	Foo(ctx context.Context) (*Response, error)
}
-- want:encore_internal__api.go --
package code

import (
	__api "encore.dev/appruntime/apisdk/api"
	code "example.com/clients/code"
)

func init() {
	__api.RegisterEndpoint(EncoreInternal_api_APIDesc_Foo, "Foo")
}

var EncoreInternal_api_APIDesc_Foo = &code.EncoreInternal_codeclient_api_APIDesc_Foo
