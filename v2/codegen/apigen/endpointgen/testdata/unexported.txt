-- code.go --
package code

import "context"

type Response struct {
    Exported bool
    unexported string
}

//encore:api public
func Foo(ctx context.Context) (*Response, error) { return nil, nil }
-- want:code.go --
package code

import _ "encore.dev/appruntime/app/appinit"
/*line :3:1*/import "context"

type Response struct {
    Exported bool
    unexported string
}

//encore:api public
func Foo(ctx context.Context) (*Response, error) { return nil, nil }
-- want:encore_internal__api.go --
package code

import (
	"context"
	__api "encore.dev/appruntime/api"
	__serde "encore.dev/appruntime/serde"
	jsoniter "github.com/json-iterator/go"
	"net/http"
)

type EncoreInternal_FooReq struct{}

type EncoreInternal_FooResp = *Response

var EncoreInternal_api_APIDesc_Foo = &__api.Desc[*EncoreInternal_FooReq, EncoreInternal_FooResp]{
	Access: __api.Public,
	AppHandler: func(ctx context.Context, reqData *EncoreInternal_FooReq) (EncoreInternal_FooResp, error) {
		resp, err := Foo(ctx)
		if err != nil {
			return (*Response)(nil), err
		}
		return resp, nil
	},
	CloneReq: func(r *EncoreInternal_FooReq) (*EncoreInternal_FooReq, error) {
		var clone *EncoreInternal_FooReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_FooResp) (EncoreInternal_FooResp, error) {
		var clone EncoreInternal_FooResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_FooReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_FooReq)
		return reqData, nil, nil
	},
	DefLoc: int32(0),
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_FooResp) (err error) {
		respData := []byte("null\n")
		if resp != nil {
			// Encode JSON body
			respData, err = __serde.SerializeJSONFunc(json, func(ser *__serde.JSONSerializer) {
				ser.WriteField("Exported", resp.Exported, false)
			})
			if err != nil {
				return err
			}
			respData = append(respData, '\n')
		}

		// Write response
		w.Write(respData)
		return nil
	},
	Endpoint:       "Foo",
	Methods:        []string{"GET", "POST"},
	Path:           "/code.Foo",
	PathParamNames: nil,
	Raw:            false,
	RawHandler:     nil,
	RawPath:        "/code.Foo",
	ReqPath: func(reqData *EncoreInternal_FooReq) (string, __api.UnnamedParams, error) {
		return "/code.Foo", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_FooReq) any {
		return nil
	},
	Service: "code",
	SvcNum:  0,
}
