-- code.go --
package code

import "context"

//encore:api public path=/!fallback
func Foo(ctx context.Context, fallback string) error { return nil }
-- want:encore.gen.go --
// Code generated by encore. DO NOT EDIT.

package code

// These functions are automatically generated and maintained by Encore
// to simplify calling them from other services, as they were implemented as methods.
// They are automatically updated by Encore whenever your API endpoints change.
-- want:encore_internal__api.go --
package code

import (
	"context"
	__api "encore.dev/appruntime/apisdk/api"
	__etype "encore.dev/appruntime/shared/etype"
	jsoniter "github.com/json-iterator/go"
	"net/http"
	"net/url"
	"strings"
)

func init() {
	__api.RegisterEndpoint(EncoreInternal_api_APIDesc_Foo)
}

type EncoreInternal_FooReq struct {
	P0 string
}

type EncoreInternal_FooResp = __api.Void

var EncoreInternal_api_APIDesc_Foo = &__api.Desc[*EncoreInternal_FooReq, EncoreInternal_FooResp]{
	Access: __api.Public,
	AppHandler: func(ctx context.Context, reqData *EncoreInternal_FooReq) (EncoreInternal_FooResp, error) {
		err := Foo(ctx, reqData.P0)
		if err != nil {
			return __api.Void{}, err
		}
		return __api.Void{}, nil
	},
	CloneReq: func(r *EncoreInternal_FooReq) (*EncoreInternal_FooReq, error) {
		var clone *EncoreInternal_FooReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_FooResp) (EncoreInternal_FooResp, error) {
		var clone EncoreInternal_FooResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_FooReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_FooReq)
		dec := new(__etype.Unmarshaller)
		// Trim the leading slash from wildcard parameter, as Encore's semantics excludes it,
		// while the httprouter implementation includes it.
		ps[0] = strings.TrimPrefix(ps[0], "/")

		if value, err := url.PathUnescape(ps[0]); err == nil {
			ps[0] = value
		}
		reqData.P0 = __etype.UnmarshalOne(dec, __etype.UnmarshalString, "fallback", ps[0], true)
		if err := dec.Error; err != nil {
			return nil, nil, err
		}
		return reqData, ps, nil
	},
	DefLoc: int32(0),
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_FooResp) (err error) {
		return nil
	},
	Endpoint:            "Foo",
	Fallback:            true,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/!fallback",
	PathParamNames:      []string{"fallback"},
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/*0",
	ReqPath: func(reqData *EncoreInternal_FooReq) (string, __api.UnnamedParams, error) {
		params := __api.UnnamedParams{__etype.MarshalOne(__etype.MarshalString, reqData.P0)}
		return "/" + params[0], params, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_FooReq) any {
		return nil
	},
	Service:           "code",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            1,
}
