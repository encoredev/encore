-- code.go --
package code

import "context"

type Params struct {
    Foo   string `header:"X-Foo"`
    Ignore string `header:"-"`
}

//encore:api public
func Foo(ctx context.Context, p *Params) error { return nil }

-- want:code.go --
package code

import _ "encore.dev/appruntime/app/appinit"
/*line :3:1*/import "context"

type Params struct {
    Foo   string `header:"X-Foo"`
    Ignore string `header:"-"`
}

//encore:api public
func Foo(ctx context.Context, p *Params) error { return nil }

-- want:encore_internal__api.go --
package code

import (
	"context"
	__api "encore.dev/appruntime/api"
	__etype "encore.dev/appruntime/etype"
	jsoniter "github.com/json-iterator/go"
	"net/http"
)

type EncoreInternal_FooReq struct {
	Payload *Params
}

type EncoreInternal_FooResp = __api.Void

var EncoreInternal_api_APIDesc_Foo = &__api.Desc[*EncoreInternal_FooReq, EncoreInternal_FooResp]{
	Access: __api.Public,
	AppHandler: func(ctx context.Context, reqData *EncoreInternal_FooReq) (EncoreInternal_FooResp, error) {
		err := Foo(ctx, reqData.Payload)
		if err != nil {
			return __api.Void{}, err
		}
		return __api.Void{}, nil
	},
	CloneReq: func(r *EncoreInternal_FooReq) (*EncoreInternal_FooReq, error) {
		var clone *EncoreInternal_FooReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_FooResp) (EncoreInternal_FooResp, error) {
		var clone EncoreInternal_FooResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_FooReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_FooReq)
		dec := new(__etype.Unmarshaller)
		params := new(Params)
		reqData.Payload = params
		switch m := httpReq.Method; m {
		case "POST":
			// Decode headers
			h := httpReq.Header
			params.Foo = __etype.UnmarshalOne(dec, __etype.UnmarshalString, "x-foo", h.Get("x-foo"), false)

		default:
			panic("HTTP method is not supported")
		}
		if err := dec.Error; err != nil {
			return nil, nil, err
		}
		return reqData, ps, nil
	},
	DefLoc: int32(0),
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_FooResp) (err error) {
		return nil
	},
	Endpoint:       "Foo",
	Methods:        []string{"POST"},
	Path:           "/code.Foo",
	PathParamNames: nil,
	Raw:            false,
	RawHandler:     nil,
	RawPath:        "/code.Foo",
	ReqPath: func(reqData *EncoreInternal_FooReq) (string, __api.UnnamedParams, error) {
		return "/code.Foo", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_FooReq) any {
		return reqData.Payload
	},
	Service: "code",
	SvcNum:  0,
}
