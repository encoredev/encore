-- code.go --
package code

import "context"

type Params struct {
    Foo   string `header:"X-Foo"`
    Ignore string `header:"-"`
    Strings []string `header:"X-Strings"`
}

//encore:api public
func Foo(ctx context.Context, p *Params) error { return nil }

-- want:encore.gen.go --
// Code generated by encore. DO NOT EDIT.

package code

import "context"

// These functions are automatically generated and maintained by Encore
// to simplify calling them from other services, as they were implemented as methods.
// They are automatically updated by Encore whenever your API endpoints change.

// Interface defines the service's API surface area, primarily for mocking purposes.
//
// Raw endpoints are currently excluded from this interface, as Encore does not yet
// support service-to-service API calls to raw endpoints.
type Interface interface {
	Foo(ctx context.Context, p *Params) error
}
-- want:encore_internal__api.go --
package code

import (
	"context"
	__api "encore.dev/appruntime/apisdk/api"
	__etype "encore.dev/appruntime/shared/etype"
	jsoniter "github.com/json-iterator/go"
	"net/http"
	"net/textproto"
	"net/url"
)

func init() {
	__api.RegisterEndpoint(EncoreInternal_api_APIDesc_Foo, Foo)
}

type EncoreInternal_FooReq struct {
	Payload *Params
}

type EncoreInternal_FooResp = __api.Void

var EncoreInternal_api_APIDesc_Foo = &__api.Desc[*EncoreInternal_FooReq, EncoreInternal_FooResp]{
	Access: __api.Public,
	AppHandler: func(ctx context.Context, reqData *EncoreInternal_FooReq) (EncoreInternal_FooResp, error) {
		err := Foo(ctx, reqData.Payload)
		if err != nil {
			return __api.Void{}, err
		}
		return __api.Void{}, nil
	},
	CloneReq: func(r *EncoreInternal_FooReq) (*EncoreInternal_FooReq, error) {
		var clone *EncoreInternal_FooReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_FooResp) (EncoreInternal_FooResp, error) {
		var clone EncoreInternal_FooResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_FooResp, err error) {
		return __api.Void{}, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_FooReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_FooReq)
		dec := new(__etype.Unmarshaller)
		params := new(Params)
		reqData.Payload = params
		switch m := httpReq.Method; m {
		case "POST":
			// Decode headers
			h := httpReq.Header
			params.Foo = __etype.UnmarshalOne(dec, __etype.UnmarshalString, "x-foo", h.Get("x-foo"), false)
			params.Strings = __etype.UnmarshalList(dec, __etype.UnmarshalString, "x-strings", h.Values("x-strings"), false)

		default:
			panic("HTTP method is not supported")
		}
		if err := dec.Error; err != nil {
			return nil, nil, err
		}
		return reqData, ps, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_FooReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		params := reqData.Payload
		if params == nil {
			// If the payload is nil, we need to return an empty request body.
			return httpHeader, queryString, err
		}

		// Encode headers
		httpHeader = make(http.Header, 2)
		httpHeader.Set("x-foo", __etype.MarshalOne(__etype.MarshalString, params.Foo))
		httpHeader[textproto.CanonicalMIMEHeaderKey("x-strings")] = __etype.MarshalList(__etype.MarshalString, params.Strings)

		return httpHeader, queryString, err
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_FooResp) (err error) {
		return nil
	},
	Endpoint:            "Foo",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"POST"},
	Path:                "/code.Foo",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/code.Foo",
	ReqPath: func(reqData *EncoreInternal_FooReq) (string, __api.UnnamedParams, error) {
		return "/code.Foo", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_FooReq) any {
		return reqData.Payload
	},
	Service:           "code",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            1,
	Tags:              nil,
}
