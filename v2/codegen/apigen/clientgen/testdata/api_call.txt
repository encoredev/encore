-- clients/svca/svcaclient.go --
package svcaclient

-- clients/svcb/svcbclient.go --
package svcbclient

-- svca/svca.go --
package svca

import "context"

//encore:api public
func Foo(ctx context.Context) error { return nil }

//encore:api public
func Bar(ctx context.Context) error { return Foo(ctx) }
-- svcb/svcb.go --
package svcb

import ("context"; svcaclient "example.com/clients/svca")

//encore:api public
func Baz(ctx context.Context) error { return svcaclient.NewSvcaClient().Foo(ctx) }
-- want:clients/svca/encore.gen.go --
package svcaclient

import (
	"context"
	__api "encore.dev/appruntime/apisdk/api"
	"errors"
	svcawrappers "example.com/svca/svcawrappers"
)

// SvcaClient is the client interface for the svca service.
type SvcaClient interface {
	Foo(ctx context.Context) error
	Bar(ctx context.Context) error
}

// svcaClientImpl implements the SvcaClient interface.
type svcaClientImpl struct{}

// NewSvcaClient creates a new client for the svca service.
func NewSvcaClient() SvcaClient {
	return &svcaClientImpl{}
}

func (c *svcaClientImpl) Foo(ctx context.Context) error {
	handler, ok := __api.LookupEndpoint("svca", "Foo")
	if !ok {
		return errors.New("no endpoint registered for svca.Foo")
	}
	callable, ok := handler.(__api.Callable[*svcawrappers.EncoreInternal_FooReq, svcawrappers.EncoreInternal_FooResp])
	if !ok {
		return errors.New("handler for svca.Foo has unexpected type")
	}
	reqData := &svcawrappers.EncoreInternal_FooReq{}
	callCtx := __api.Singleton.NewCallContext(ctx)
	_, err := callable.Call(callCtx, reqData)
	return err
}

func (c *svcaClientImpl) Bar(ctx context.Context) error {
	handler, ok := __api.LookupEndpoint("svca", "Bar")
	if !ok {
		return errors.New("no endpoint registered for svca.Bar")
	}
	callable, ok := handler.(__api.Callable[*svcawrappers.EncoreInternal_BarReq, svcawrappers.EncoreInternal_BarResp])
	if !ok {
		return errors.New("handler for svca.Bar has unexpected type")
	}
	reqData := &svcawrappers.EncoreInternal_BarReq{}
	callCtx := __api.Singleton.NewCallContext(ctx)
	_, err := callable.Call(callCtx, reqData)
	return err
}
-- want:svca/encore.gen.go --
// Code generated by encore. DO NOT EDIT.

package svca

import "context"

// These functions are automatically generated and maintained by Encore
// to simplify calling them from other services, as they were implemented as methods.
// They are automatically updated by Encore whenever your API endpoints change.

// Interface defines the service's API surface area, primarily for mocking purposes.
//
// Raw endpoints are currently excluded from this interface, as Encore does not yet
// support service-to-service API calls to raw endpoints.
type Interface interface {
	Foo(ctx context.Context) error

	Bar(ctx context.Context) error
}
-- want:svca/encore_internal__api.go --
package svca

import (
	"context"
	__api "encore.dev/appruntime/apisdk/api"
	svcawrappers "example.com/svca/svcawrappers"
	jsoniter "github.com/json-iterator/go"
	"net/http"
	"net/url"
)

func init() {
	__api.RegisterEndpoint(EncoreInternal_api_APIDesc_Foo, Foo)
	__api.RegisterEndpoint(EncoreInternal_api_APIDesc_Bar, Bar)
}

var EncoreInternal_api_APIDesc_Foo = &__api.Desc[*svcawrappers.EncoreInternal_FooReq, svcawrappers.EncoreInternal_FooResp]{
	Access: __api.Public,
	AppHandler: func(ctx context.Context, reqData *svcawrappers.EncoreInternal_FooReq) (svcawrappers.EncoreInternal_FooResp, error) {
		err := Foo(ctx)
		if err != nil {
			return __api.Void{}, err
		}
		return __api.Void{}, nil
	},
	CloneReq: func(r *svcawrappers.EncoreInternal_FooReq) (*svcawrappers.EncoreInternal_FooReq, error) {
		var clone *svcawrappers.EncoreInternal_FooReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r svcawrappers.EncoreInternal_FooResp) (svcawrappers.EncoreInternal_FooResp, error) {
		var clone svcawrappers.EncoreInternal_FooResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp svcawrappers.EncoreInternal_FooResp, err error) {
		return __api.Void{}, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *svcawrappers.EncoreInternal_FooReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(svcawrappers.EncoreInternal_FooReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *svcawrappers.EncoreInternal_FooReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp svcawrappers.EncoreInternal_FooResp, status int) (err error) {
		return nil
	},
	Endpoint:            "Foo",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/svca.Foo",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/svca.Foo",
	ReqPath: func(reqData *svcawrappers.EncoreInternal_FooReq) (string, __api.UnnamedParams, error) {
		return "/svca.Foo", nil, nil
	},
	ReqUserPayload: func(reqData *svcawrappers.EncoreInternal_FooReq) any {
		return nil
	},
	Service:           "svca",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            1,
	Tags:              nil,
}

var EncoreInternal_api_APIDesc_Bar = &__api.Desc[*svcawrappers.EncoreInternal_BarReq, svcawrappers.EncoreInternal_BarResp]{
	Access: __api.Public,
	AppHandler: func(ctx context.Context, reqData *svcawrappers.EncoreInternal_BarReq) (svcawrappers.EncoreInternal_BarResp, error) {
		err := Bar(ctx)
		if err != nil {
			return __api.Void{}, err
		}
		return __api.Void{}, nil
	},
	CloneReq: func(r *svcawrappers.EncoreInternal_BarReq) (*svcawrappers.EncoreInternal_BarReq, error) {
		var clone *svcawrappers.EncoreInternal_BarReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r svcawrappers.EncoreInternal_BarResp) (svcawrappers.EncoreInternal_BarResp, error) {
		var clone svcawrappers.EncoreInternal_BarResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp svcawrappers.EncoreInternal_BarResp, err error) {
		return __api.Void{}, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *svcawrappers.EncoreInternal_BarReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(svcawrappers.EncoreInternal_BarReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *svcawrappers.EncoreInternal_BarReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp svcawrappers.EncoreInternal_BarResp, status int) (err error) {
		return nil
	},
	Endpoint:            "Bar",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/svca.Bar",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/svca.Bar",
	ReqPath: func(reqData *svcawrappers.EncoreInternal_BarReq) (string, __api.UnnamedParams, error) {
		return "/svca.Bar", nil, nil
	},
	ReqUserPayload: func(reqData *svcawrappers.EncoreInternal_BarReq) any {
		return nil
	},
	Service:           "svca",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            1,
	Tags:              nil,
}
-- want:svca/encore_internal__apicalls.go --
package svca

import (
	"context"
	__api "encore.dev/appruntime/apisdk/api"
	svcawrappers "example.com/svca/svcawrappers"
)

func EncoreInternal_apicalls_Foo(ctx context.Context) error {
	_, err := EncoreInternal_api_APIDesc_Foo.Call(__api.NewCallContext(ctx), &svcawrappers.EncoreInternal_FooReq{})
	if err != nil {
		return err
	}
	return nil
}
-- want:svca/svca.go --
package svca

import "context"

//encore:api public
func Foo(ctx context.Context) error { return nil }

//encore:api public
func Bar(ctx context.Context) error { return EncoreInternal_apicalls_Foo(ctx) }
-- want:svca/svcawrappers/wrappers.go --
package svcawrappers

import __api "encore.dev/appruntime/apisdk/api"

type EncoreInternal_FooReq struct{}

type EncoreInternal_FooResp = __api.Void

type EncoreInternal_BarReq struct{}

type EncoreInternal_BarResp = __api.Void
