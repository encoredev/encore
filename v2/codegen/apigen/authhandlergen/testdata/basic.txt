-- basic.go --
package basic

import ("context"; "encore.dev/beta/auth")

//encore:authhandler
func AuthHandler(ctx context.Context, token string) (auth.UID, error) {
    return "", nil
}
-- want:basic.go --
package basic

import _ "encore.dev/appruntime/app/appinit"
/*line :3:1*/import ("context"; "encore.dev/beta/auth")

//encore:authhandler
func AuthHandler(ctx context.Context, token string) (auth.UID, error) {
    return "", nil
}
-- want:encore_internal__authhandler.go --
package basic

import (
	"context"
	__api "encore.dev/appruntime/api"
	__model "encore.dev/appruntime/model"
	errs "encore.dev/beta/errs"
	"net/http"
	"strings"
)

var EncoreInternal_authhandler_AuthDesc_AuthHandler = &__api.AuthHandlerDesc[string]{
	AuthHandler: func(ctx context.Context, params string) (info __model.AuthInfo, err error) {
		info.UID, err = AuthHandler(ctx, params)
		return info, err
	},
	DecodeAuth: func(httpReq *http.Request) (params string, err error) {
		if auth := httpReq.Header.Get("Authorization"); auth != "" {
			for _, prefix := range [...]string{"Bearer ", "Token "} {
				if strings.HasPrefix(auth, prefix) {
					if params = auth[len(prefix):]; params != "" {
						return params, nil
					}
				}
			}
		}
		return "", errs.B().Code(errs.Unauthenticated).Msg("invalid auth param").Err()
	},
	DefLoc:      int32(0),
	Endpoint:    "AuthHandler",
	HasAuthData: false,
	Service:     "UNKNOWN",
	SvcNum:      0,
}
