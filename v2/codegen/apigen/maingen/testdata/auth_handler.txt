-- code.go --
package code

import ("context"; "encore.dev/beta/auth")

//encore:api
func Foo(ctx context.Context) error { return nil }

type MyAuthData struct { Username string }

//encore:authhandler
func AuthHandler(context.Context, string) (auth.UID, *MyAuthData, error) {
    return "", nil, nil
}

-- want:__encore/main/main.go --
package main

import (
	__api "encore.dev/appruntime/api"
	__appinit "encore.dev/appruntime/app/appinit"
	__config "encore.dev/appruntime/config"
	__service "encore.dev/appruntime/service"
	examplecom "example.com"
	"reflect"
	_ "unsafe"
)

// loadApp loads the Encore app runtime.
//
//go:linkname loadApp encore.dev/appruntime/app/appinit.load
func loadApp() *__appinit.LoadData {
	static := &__config.Static{
		AppCommit: __config.CommitInfo{
			Revision:    "",
			Uncommitted: false,
		},
		AuthData:          reflect.TypeOf((*examplecom.MyAuthData)(nil)),
		BundledServices:   []string{"code"},
		CORSAllowHeaders:  nil,
		CORSExposeHeaders: nil,
		EncoreCompiler:    "",
		PubsubTopics:      map[string]*__config.StaticPubsubTopic{},
		TestService:       "",
		Testing:           false,
	}
	handlers := []__api.HandlerRegistration{
		{
			Handler:    examplecom.EncoreInternal_api_APIDesc_Foo,
			Middleware: nil,
		},
	}
	return &__appinit.LoadData{
		APIHandlers: handlers,
		AuthHandler: examplecom.EncoreInternal_authhandler_AuthDesc_AuthHandler,
		ServiceInit: []__service.Initializer{},
		StaticCfg:   static,
	}
}
func main() {
	__appinit.AppMain()
}
-- want:code.go --
package code

import _ "encore.dev/appruntime/app/appinit"
/*line :3:1*/import ("context"; "encore.dev/beta/auth")

//encore:api
func Foo(ctx context.Context) error { return nil }

type MyAuthData struct { Username string }

//encore:authhandler
func AuthHandler(context.Context, string) (auth.UID, *MyAuthData, error) {
    return "", nil, nil
}

-- want:encore_internal__api.go --
package code

import (
	"context"
	__api "encore.dev/appruntime/api"
	jsoniter "github.com/json-iterator/go"
	"net/http"
)

type EncoreInternal_FooReq struct{}

type EncoreInternal_FooResp = __api.Void

var EncoreInternal_api_APIDesc_Foo = &__api.Desc[*EncoreInternal_FooReq, EncoreInternal_FooResp]{
	Access: __api.Private,
	AppHandler: func(ctx context.Context, reqData *EncoreInternal_FooReq) (EncoreInternal_FooResp, error) {
		err := Foo(ctx)
		if err != nil {
			return __api.Void{}, err
		}
		return __api.Void{}, nil
	},
	CloneReq: func(r *EncoreInternal_FooReq) (*EncoreInternal_FooReq, error) {
		var clone *EncoreInternal_FooReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_FooResp) (EncoreInternal_FooResp, error) {
		var clone EncoreInternal_FooResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_FooReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_FooReq)
		return reqData, nil, nil
	},
	DefLoc: int32(0),
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_FooResp) (err error) {
		return nil
	},
	Endpoint:       "Foo",
	Methods:        []string{"GET", "POST"},
	Path:           "/code.Foo",
	PathParamNames: nil,
	Raw:            false,
	RawHandler:     nil,
	RawPath:        "/code.Foo",
	ReqPath: func(reqData *EncoreInternal_FooReq) (string, __api.UnnamedParams, error) {
		return "/code.Foo", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_FooReq) any {
		return nil
	},
	Service: "code",
	SvcNum:  0,
}
-- want:encore_internal__authhandler.go --
package code

import (
	"context"
	__api "encore.dev/appruntime/api"
	__model "encore.dev/appruntime/model"
	errs "encore.dev/beta/errs"
	"net/http"
	"strings"
)

var EncoreInternal_authhandler_AuthDesc_AuthHandler = &__api.AuthHandlerDesc[string]{
	AuthHandler: func(ctx context.Context, params string) (info __model.AuthInfo, err error) {
		info.UID, info.UserData, err = AuthHandler(ctx, params)
		return info, err
	},
	DecodeAuth: func(httpReq *http.Request) (params string, err error) {
		if auth := httpReq.Header.Get("Authorization"); auth != "" {
			for _, prefix := range [...]string{"Bearer ", "Token "} {
				if strings.HasPrefix(auth, prefix) {
					if params = auth[len(prefix):]; params != "" {
						return params, nil
					}
				}
			}
		}
		return "", errs.B().Code(errs.Unauthenticated).Msg("invalid auth param").Err()
	},
	DefLoc:      int32(0),
	Endpoint:    "AuthHandler",
	HasAuthData: true,
	Service:     "code",
	SvcNum:      0,
}
