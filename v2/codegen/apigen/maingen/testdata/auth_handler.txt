-- code.go --
package code

import ("context"; "encore.dev/beta/auth")

//encore:api
func Foo(ctx context.Context) error { return nil }

type MyAuthData struct { Username string }

//encore:authhandler
func AuthHandler(context.Context, string) (auth.UID, *MyAuthData, error) {
    return "", nil, nil
}

-- want:encore.gen.go --
// Code generated by encore. DO NOT EDIT.

package code

// These functions are automatically generated and maintained by Encore
// to simplify calling them from other services, as they were implemented as methods.
// They are automatically updated by Encore whenever your API endpoints change.
-- want:encore_internal/main/main.go --
package main

import (
	appinit "encore.dev/appruntime/apisdk/app/appinit"
	_ "example.com"
)

func main() {
	appinit.AppMain()
}
-- want:encore_internal__api.go --
package code

import (
	"context"
	__api "encore.dev/appruntime/apisdk/api"
	jsoniter "github.com/json-iterator/go"
	"net/http"
	"net/url"
)

func init() {
	__api.RegisterEndpoint(EncoreInternal_api_APIDesc_Foo)
}

type EncoreInternal_FooReq struct{}

type EncoreInternal_FooResp = __api.Void

var EncoreInternal_api_APIDesc_Foo = &__api.Desc[*EncoreInternal_FooReq, EncoreInternal_FooResp]{
	Access: __api.Private,
	AppHandler: func(ctx context.Context, reqData *EncoreInternal_FooReq) (EncoreInternal_FooResp, error) {
		err := Foo(ctx)
		if err != nil {
			return __api.Void{}, err
		}
		return __api.Void{}, nil
	},
	CloneReq: func(r *EncoreInternal_FooReq) (*EncoreInternal_FooReq, error) {
		var clone *EncoreInternal_FooReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_FooResp) (EncoreInternal_FooResp, error) {
		var clone EncoreInternal_FooResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_FooResp, err error) {
		return __api.Void{}, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_FooReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_FooReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_FooReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_FooResp) (err error) {
		return nil
	},
	Endpoint:            "Foo",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/code.Foo",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/code.Foo",
	ReqPath: func(reqData *EncoreInternal_FooReq) (string, __api.UnnamedParams, error) {
		return "/code.Foo", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_FooReq) any {
		return nil
	},
	Service:           "code",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            1,
}
-- want:encore_internal__authhandler.go --
package code

import (
	"context"
	__api "encore.dev/appruntime/apisdk/api"
	__model "encore.dev/appruntime/exported/model"
	errs "encore.dev/beta/errs"
	"net/http"
	"strings"
)

var EncoreInternal_authhandler_AuthDesc_AuthHandler = &__api.AuthHandlerDesc[string]{
	AuthHandler: func(ctx context.Context, params string) (info __model.AuthInfo, err error) {
		info.UID, info.UserData, err = AuthHandler(ctx, params)
		return info, err
	},
	DecodeAuth: func(httpReq *http.Request) (params string, err error) {
		if auth := httpReq.Header.Get("Authorization"); auth != "" {
			for _, prefix := range [...]string{"Bearer ", "Token "} {
				if strings.HasPrefix(auth, prefix) {
					if params = auth[len(prefix):]; params != "" {
						return params, nil
					}
				}
			}
		}
		return "", errs.B().Code(errs.Unauthenticated).Msg("invalid auth param").Err()
	},
	DefLoc:      uint32(0x0),
	Endpoint:    "AuthHandler",
	HasAuthData: true,
	Service:     "code",
	SvcNum:      1,
}

func init() {
	__api.RegisterAuthHandler(EncoreInternal_authhandler_AuthDesc_AuthHandler)
}

func init() {
	__api.RegisterAuthDataType[*MyAuthData]()
}
-- want:synthetic/static_config.go --
package synthetic

/*

This is a synthetic file describing the generated static config:

{
	"EncoreCompiler": "",
	"AppCommit": {
		"revision": "",
		"uncommitted": false
	},
	"CORSAllowHeaders": null,
	"CORSExposeHeaders": null,
	"PubsubTopics": {},
	"Testing": false,
	"TestServiceMap": {
		"code": "testing_path:code"
	},
	"PrettyPrintLogs": false,
	"BundledServices": [
		"code"
	],
	"EmbeddedEnvs": {}
}
*/
