-- foo/foo.go --
package foo

import "context"

//encore:api
func Foo(ctx context.Context) error { return nil }
-- bar/bar.go --
package bar

import "context"

//encore:api
func Bar(ctx context.Context) error { return nil }
-- want:bar/barwrappers/wrappers.go --
package barwrappers

import __api "encore.dev/appruntime/apisdk/api"

type EncoreInternal_BarReq struct{}

type EncoreInternal_BarResp = __api.Void
-- want:bar/encore.gen.go --
// Code generated by encore. DO NOT EDIT.

package bar

import "context"

// These functions are automatically generated and maintained by Encore
// to simplify calling them from other services, as they were implemented as methods.
// They are automatically updated by Encore whenever your API endpoints change.

// Interface defines the service's API surface area, primarily for mocking purposes.
//
// Raw endpoints are currently excluded from this interface, as Encore does not yet
// support service-to-service API calls to raw endpoints.
type Interface interface {
	Bar(ctx context.Context) error
}
-- want:bar/encore_internal__api.go --
package bar

import (
	"context"
	__api "encore.dev/appruntime/apisdk/api"
	barwrappers "example.com/bar/barwrappers"
	jsoniter "github.com/json-iterator/go"
	"net/http"
	"net/url"
)

func init() {
	__api.RegisterEndpoint(EncoreInternal_api_APIDesc_Bar, Bar)
}

var EncoreInternal_api_APIDesc_Bar = &__api.Desc[*barwrappers.EncoreInternal_BarReq, barwrappers.EncoreInternal_BarResp]{
	Access: __api.Private,
	AppHandler: func(ctx context.Context, reqData *barwrappers.EncoreInternal_BarReq) (barwrappers.EncoreInternal_BarResp, error) {
		err := Bar(ctx)
		if err != nil {
			return __api.Void{}, err
		}
		return __api.Void{}, nil
	},
	CloneReq: func(r *barwrappers.EncoreInternal_BarReq) (*barwrappers.EncoreInternal_BarReq, error) {
		var clone *barwrappers.EncoreInternal_BarReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r barwrappers.EncoreInternal_BarResp) (barwrappers.EncoreInternal_BarResp, error) {
		var clone barwrappers.EncoreInternal_BarResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp barwrappers.EncoreInternal_BarResp, err error) {
		return __api.Void{}, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *barwrappers.EncoreInternal_BarReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(barwrappers.EncoreInternal_BarReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *barwrappers.EncoreInternal_BarReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp barwrappers.EncoreInternal_BarResp, status int) (err error) {
		return nil
	},
	Endpoint:            "Bar",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/bar.Bar",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/bar.Bar",
	ReqPath: func(reqData *barwrappers.EncoreInternal_BarReq) (string, __api.UnnamedParams, error) {
		return "/bar.Bar", nil, nil
	},
	ReqUserPayload: func(reqData *barwrappers.EncoreInternal_BarReq) any {
		return nil
	},
	Service:           "bar",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            1,
	Tags:              nil,
}
-- want:clients/bar/encore.gen.go --
package barclient

import (
	"context"
	__api "encore.dev/appruntime/apisdk/api"
	"errors"
	barwrappers "example.com/bar/barwrappers"
)

// BarClient is the client interface for the bar service.
type BarClient interface {
	Bar(ctx context.Context) error
}

// barClientImpl implements the BarClient interface.
type barClientImpl struct{}

// NewBarClient creates a new client for the bar service.
func NewBarClient() BarClient {
	return &barClientImpl{}
}

func (c *barClientImpl) Bar(ctx context.Context) error {
	handler, ok := __api.LookupEndpoint("bar", "Bar")
	if !ok {
		return errors.New("no endpoint registered for bar.Bar")
	}
	callable, ok := handler.(__api.Callable[*barwrappers.EncoreInternal_BarReq, barwrappers.EncoreInternal_BarResp])
	if !ok {
		return errors.New("handler for bar.Bar has unexpected type")
	}
	reqData := &barwrappers.EncoreInternal_BarReq{}
	callCtx := __api.Singleton.NewCallContext(ctx)
	_, err := callable.Call(callCtx, reqData)
	return err
}
-- want:clients/foo/encore.gen.go --
package fooclient

import (
	"context"
	__api "encore.dev/appruntime/apisdk/api"
	"errors"
	foowrappers "example.com/foo/foowrappers"
)

// FooClient is the client interface for the foo service.
type FooClient interface {
	Foo(ctx context.Context) error
}

// fooClientImpl implements the FooClient interface.
type fooClientImpl struct{}

// NewFooClient creates a new client for the foo service.
func NewFooClient() FooClient {
	return &fooClientImpl{}
}

func (c *fooClientImpl) Foo(ctx context.Context) error {
	handler, ok := __api.LookupEndpoint("foo", "Foo")
	if !ok {
		return errors.New("no endpoint registered for foo.Foo")
	}
	callable, ok := handler.(__api.Callable[*foowrappers.EncoreInternal_FooReq, foowrappers.EncoreInternal_FooResp])
	if !ok {
		return errors.New("handler for foo.Foo has unexpected type")
	}
	reqData := &foowrappers.EncoreInternal_FooReq{}
	callCtx := __api.Singleton.NewCallContext(ctx)
	_, err := callable.Call(callCtx, reqData)
	return err
}
-- want:encore_internal/main/main.go --
package main

import (
	appinit "encore.dev/appruntime/apisdk/app/appinit"
	_ "example.com/bar"
	_ "example.com/foo"
)

func main() {
	appinit.AppMain()
}
-- want:foo/encore.gen.go --
// Code generated by encore. DO NOT EDIT.

package foo

import "context"

// These functions are automatically generated and maintained by Encore
// to simplify calling them from other services, as they were implemented as methods.
// They are automatically updated by Encore whenever your API endpoints change.

// Interface defines the service's API surface area, primarily for mocking purposes.
//
// Raw endpoints are currently excluded from this interface, as Encore does not yet
// support service-to-service API calls to raw endpoints.
type Interface interface {
	Foo(ctx context.Context) error
}
-- want:foo/encore_internal__api.go --
package foo

import (
	"context"
	__api "encore.dev/appruntime/apisdk/api"
	foowrappers "example.com/foo/foowrappers"
	jsoniter "github.com/json-iterator/go"
	"net/http"
	"net/url"
)

func init() {
	__api.RegisterEndpoint(EncoreInternal_api_APIDesc_Foo, Foo)
}

var EncoreInternal_api_APIDesc_Foo = &__api.Desc[*foowrappers.EncoreInternal_FooReq, foowrappers.EncoreInternal_FooResp]{
	Access: __api.Private,
	AppHandler: func(ctx context.Context, reqData *foowrappers.EncoreInternal_FooReq) (foowrappers.EncoreInternal_FooResp, error) {
		err := Foo(ctx)
		if err != nil {
			return __api.Void{}, err
		}
		return __api.Void{}, nil
	},
	CloneReq: func(r *foowrappers.EncoreInternal_FooReq) (*foowrappers.EncoreInternal_FooReq, error) {
		var clone *foowrappers.EncoreInternal_FooReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r foowrappers.EncoreInternal_FooResp) (foowrappers.EncoreInternal_FooResp, error) {
		var clone foowrappers.EncoreInternal_FooResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp foowrappers.EncoreInternal_FooResp, err error) {
		return __api.Void{}, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *foowrappers.EncoreInternal_FooReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(foowrappers.EncoreInternal_FooReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *foowrappers.EncoreInternal_FooReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp foowrappers.EncoreInternal_FooResp, status int) (err error) {
		return nil
	},
	Endpoint:            "Foo",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/foo.Foo",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/foo.Foo",
	ReqPath: func(reqData *foowrappers.EncoreInternal_FooReq) (string, __api.UnnamedParams, error) {
		return "/foo.Foo", nil, nil
	},
	ReqUserPayload: func(reqData *foowrappers.EncoreInternal_FooReq) any {
		return nil
	},
	Service:           "foo",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            2,
	Tags:              nil,
}
-- want:foo/foowrappers/wrappers.go --
package foowrappers

import __api "encore.dev/appruntime/apisdk/api"

type EncoreInternal_FooReq struct{}

type EncoreInternal_FooResp = __api.Void
-- want:synthetic/static_config.go --
package synthetic

/*

This is a synthetic file describing the generated static config:

{
	"EncoreCompiler": "",
	"AppCommit": {
		"revision": "",
		"uncommitted": false
	},
	"CORSAllowHeaders": null,
	"CORSExposeHeaders": null,
	"PubsubTopics": {},
	"Testing": false,
	"TestServiceMap": {
		"bar": "testing_path:bar",
		"foo": "testing_path:foo"
	},
	"TestAppRootPath": "testing_path:main",
	"PrettyPrintLogs": false,
	"BundledServices": [
		"bar",
		"foo"
	],
	"EmbeddedEnvs": {}
}
*/
