---
source: tsparser/src/parser/types/tests.rs
expression: result
input_file: tsparser/src/parser/types/testdata/debug.ts
---
{
    "MyPick": Generic(
        Mapped(
            Mapped {
                in_type: Generic(
                    TypeParam(
                        TypeParam {
                            idx: 1,
                            constraint: Some(
                                Generic(
                                    Keyof(
                                        Keyof(
                                            Generic(
                                                TypeParam(
                                                    TypeParam {
                                                        idx: 0,
                                                        constraint: None,
                                                    },
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        },
                    ),
                ),
                value_type: Generic(
                    Index(
                        Index {
                            source: Generic(
                                TypeParam(
                                    TypeParam {
                                        idx: 0,
                                        constraint: None,
                                    },
                                ),
                            ),
                            index: Generic(
                                MappedKeyType(
                                    MappedKeyType,
                                ),
                            ),
                        },
                    ),
                ),
                optional: None,
            },
        ),
    ),
    "MyExclude": Generic(
        Conditional(
            Conditional {
                check_type: Generic(
                    TypeParam(
                        TypeParam {
                            idx: 0,
                            constraint: None,
                        },
                    ),
                ),
                extends_type: Generic(
                    TypeParam(
                        TypeParam {
                            idx: 1,
                            constraint: None,
                        },
                    ),
                ),
                true_type: Basic(
                    Never,
                ),
                false_type: Generic(
                    TypeParam(
                        TypeParam {
                            idx: 0,
                            constraint: None,
                        },
                    ),
                ),
            },
        ),
    ),
    "MyOmit": Generic(
        Mapped(
            Mapped {
                in_type: Named(
                    Named {
                        obj: Object {
                            name: Some(
                                "MyExclude",
                            ),
                        },
                        type_arguments: [
                            Generic(
                                Keyof(
                                    Keyof(
                                        Generic(
                                            TypeParam(
                                                TypeParam {
                                                    idx: 0,
                                                    constraint: None,
                                                },
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                            Generic(
                                TypeParam(
                                    TypeParam {
                                        idx: 1,
                                        constraint: Some(
                                            Union(
                                                Union {
                                                    types: [
                                                        Basic(
                                                            String,
                                                        ),
                                                        Basic(
                                                            Number,
                                                        ),
                                                        Basic(
                                                            Symbol,
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    },
                                ),
                            ),
                        ],
                    },
                ),
                value_type: Generic(
                    Index(
                        Index {
                            source: Generic(
                                TypeParam(
                                    TypeParam {
                                        idx: 0,
                                        constraint: None,
                                    },
                                ),
                            ),
                            index: Generic(
                                MappedKeyType(
                                    MappedKeyType,
                                ),
                            ),
                        },
                    ),
                ),
                optional: None,
            },
        ),
    ),
    "MyInterface": Interface(
        Interface {
            fields: [
                InterfaceField {
                    name: String(
                        "foo",
                    ),
                    optional: false,
                    typ: Basic(
                        String,
                    ),
                },
                InterfaceField {
                    name: String(
                        "bar",
                    ),
                    optional: false,
                    typ: Basic(
                        String,
                    ),
                },
                InterfaceField {
                    name: String(
                        "baz",
                    ),
                    optional: false,
                    typ: Basic(
                        String,
                    ),
                },
            ],
            index: None,
            call: None,
        },
    ),
    "X": Interface(
        Interface {
            fields: [
                InterfaceField {
                    name: String(
                        "bar",
                    ),
                    optional: false,
                    typ: Basic(
                        String,
                    ),
                },
                InterfaceField {
                    name: String(
                        "baz",
                    ),
                    optional: false,
                    typ: Basic(
                        String,
                    ),
                },
            ],
            index: None,
            call: None,
        },
    ),
    "Y": Interface(
        Interface {
            fields: [
                InterfaceField {
                    name: String(
                        "foo",
                    ),
                    optional: false,
                    typ: Basic(
                        String,
                    ),
                },
            ],
            index: None,
            call: None,
        },
    ),
}
