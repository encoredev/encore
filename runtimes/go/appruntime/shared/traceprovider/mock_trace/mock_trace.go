// Code generated by MockGen. DO NOT EDIT.
// Source: ./logger.go

// Package mock_trace is a generated GoMock package.
package mock_trace

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	model "encore.dev/appruntime/exported/model"
	stack "encore.dev/appruntime/exported/stack"
	trace2 "encore.dev/appruntime/exported/trace2"
	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockLogger) Add(arg0 trace2.Event) trace2.EventID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(trace2.EventID)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockLoggerMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockLogger)(nil).Add), arg0)
}

// AuthSpanEnd mocks base method.
func (m *MockLogger) AuthSpanEnd(params trace2.AuthSpanEndParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AuthSpanEnd", params)
}

// AuthSpanEnd indicates an expected call of AuthSpanEnd.
func (mr *MockLoggerMockRecorder) AuthSpanEnd(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthSpanEnd", reflect.TypeOf((*MockLogger)(nil).AuthSpanEnd), params)
}

// AuthSpanStart mocks base method.
func (m *MockLogger) AuthSpanStart(req *model.Request, goid uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AuthSpanStart", req, goid)
}

// AuthSpanStart indicates an expected call of AuthSpanStart.
func (mr *MockLoggerMockRecorder) AuthSpanStart(req, goid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthSpanStart", reflect.TypeOf((*MockLogger)(nil).AuthSpanStart), req, goid)
}

// BodyStream mocks base method.
func (m *MockLogger) BodyStream(arg0 trace2.BodyStreamParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BodyStream", arg0)
}

// BodyStream indicates an expected call of BodyStream.
func (mr *MockLoggerMockRecorder) BodyStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BodyStream", reflect.TypeOf((*MockLogger)(nil).BodyStream), arg0)
}

// CacheCallEnd mocks base method.
func (m *MockLogger) CacheCallEnd(arg0 trace2.CacheCallEndParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CacheCallEnd", arg0)
}

// CacheCallEnd indicates an expected call of CacheCallEnd.
func (mr *MockLoggerMockRecorder) CacheCallEnd(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheCallEnd", reflect.TypeOf((*MockLogger)(nil).CacheCallEnd), arg0)
}

// CacheCallStart mocks base method.
func (m *MockLogger) CacheCallStart(arg0 trace2.CacheCallStartParams) trace2.EventID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheCallStart", arg0)
	ret0, _ := ret[0].(trace2.EventID)
	return ret0
}

// CacheCallStart indicates an expected call of CacheCallStart.
func (mr *MockLoggerMockRecorder) CacheCallStart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheCallStart", reflect.TypeOf((*MockLogger)(nil).CacheCallStart), arg0)
}

// DBQueryEnd mocks base method.
func (m *MockLogger) DBQueryEnd(arg0 trace2.EventParams, arg1 trace2.EventID, arg2 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DBQueryEnd", arg0, arg1, arg2)
}

// DBQueryEnd indicates an expected call of DBQueryEnd.
func (mr *MockLoggerMockRecorder) DBQueryEnd(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBQueryEnd", reflect.TypeOf((*MockLogger)(nil).DBQueryEnd), arg0, arg1, arg2)
}

// DBQueryStart mocks base method.
func (m *MockLogger) DBQueryStart(p trace2.DBQueryStartParams) trace2.EventID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBQueryStart", p)
	ret0, _ := ret[0].(trace2.EventID)
	return ret0
}

// DBQueryStart indicates an expected call of DBQueryStart.
func (mr *MockLoggerMockRecorder) DBQueryStart(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBQueryStart", reflect.TypeOf((*MockLogger)(nil).DBQueryStart), p)
}

// DBTransactionEnd mocks base method.
func (m *MockLogger) DBTransactionEnd(arg0 trace2.DBTransactionEndParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DBTransactionEnd", arg0)
}

// DBTransactionEnd indicates an expected call of DBTransactionEnd.
func (mr *MockLoggerMockRecorder) DBTransactionEnd(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBTransactionEnd", reflect.TypeOf((*MockLogger)(nil).DBTransactionEnd), arg0)
}

// DBTransactionStart mocks base method.
func (m *MockLogger) DBTransactionStart(arg0 trace2.EventParams, arg1 stack.Stack) trace2.EventID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBTransactionStart", arg0, arg1)
	ret0, _ := ret[0].(trace2.EventID)
	return ret0
}

// DBTransactionStart indicates an expected call of DBTransactionStart.
func (mr *MockLoggerMockRecorder) DBTransactionStart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBTransactionStart", reflect.TypeOf((*MockLogger)(nil).DBTransactionStart), arg0, arg1)
}

// GetAndClear mocks base method.
func (m *MockLogger) GetAndClear() ([]byte, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAndClear")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetAndClear indicates an expected call of GetAndClear.
func (mr *MockLoggerMockRecorder) GetAndClear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndClear", reflect.TypeOf((*MockLogger)(nil).GetAndClear))
}

// HTTPBeginRoundTrip mocks base method.
func (m *MockLogger) HTTPBeginRoundTrip(httpReq *http.Request, req *model.Request, goid uint32) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPBeginRoundTrip", httpReq, req, goid)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HTTPBeginRoundTrip indicates an expected call of HTTPBeginRoundTrip.
func (mr *MockLoggerMockRecorder) HTTPBeginRoundTrip(httpReq, req, goid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPBeginRoundTrip", reflect.TypeOf((*MockLogger)(nil).HTTPBeginRoundTrip), httpReq, req, goid)
}

// HTTPCompleteRoundTrip mocks base method.
func (m *MockLogger) HTTPCompleteRoundTrip(req *http.Request, resp *http.Response, goid uint32, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HTTPCompleteRoundTrip", req, resp, goid, err)
}

// HTTPCompleteRoundTrip indicates an expected call of HTTPCompleteRoundTrip.
func (mr *MockLoggerMockRecorder) HTTPCompleteRoundTrip(req, resp, goid, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPCompleteRoundTrip", reflect.TypeOf((*MockLogger)(nil).HTTPCompleteRoundTrip), req, resp, goid, err)
}

// LogMessage mocks base method.
func (m *MockLogger) LogMessage(arg0 trace2.LogMessageParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogMessage", arg0)
}

// LogMessage indicates an expected call of LogMessage.
func (mr *MockLoggerMockRecorder) LogMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogMessage", reflect.TypeOf((*MockLogger)(nil).LogMessage), arg0)
}

// MarkDone mocks base method.
func (m *MockLogger) MarkDone() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkDone")
}

// MarkDone indicates an expected call of MarkDone.
func (mr *MockLoggerMockRecorder) MarkDone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDone", reflect.TypeOf((*MockLogger)(nil).MarkDone))
}

// PubsubMessageSpanEnd mocks base method.
func (m *MockLogger) PubsubMessageSpanEnd(params trace2.PubsubMessageSpanEndParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PubsubMessageSpanEnd", params)
}

// PubsubMessageSpanEnd indicates an expected call of PubsubMessageSpanEnd.
func (mr *MockLoggerMockRecorder) PubsubMessageSpanEnd(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubsubMessageSpanEnd", reflect.TypeOf((*MockLogger)(nil).PubsubMessageSpanEnd), params)
}

// PubsubMessageSpanStart mocks base method.
func (m *MockLogger) PubsubMessageSpanStart(req *model.Request, goid uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PubsubMessageSpanStart", req, goid)
}

// PubsubMessageSpanStart indicates an expected call of PubsubMessageSpanStart.
func (mr *MockLoggerMockRecorder) PubsubMessageSpanStart(req, goid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubsubMessageSpanStart", reflect.TypeOf((*MockLogger)(nil).PubsubMessageSpanStart), req, goid)
}

// PubsubPublishEnd mocks base method.
func (m *MockLogger) PubsubPublishEnd(arg0 trace2.PubsubPublishEndParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PubsubPublishEnd", arg0)
}

// PubsubPublishEnd indicates an expected call of PubsubPublishEnd.
func (mr *MockLoggerMockRecorder) PubsubPublishEnd(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubsubPublishEnd", reflect.TypeOf((*MockLogger)(nil).PubsubPublishEnd), arg0)
}

// PubsubPublishStart mocks base method.
func (m *MockLogger) PubsubPublishStart(arg0 trace2.PubsubPublishStartParams) trace2.EventID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubsubPublishStart", arg0)
	ret0, _ := ret[0].(trace2.EventID)
	return ret0
}

// PubsubPublishStart indicates an expected call of PubsubPublishStart.
func (mr *MockLoggerMockRecorder) PubsubPublishStart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubsubPublishStart", reflect.TypeOf((*MockLogger)(nil).PubsubPublishStart), arg0)
}

// RPCCallEnd mocks base method.
func (m *MockLogger) RPCCallEnd(call *model.APICall, goid uint32, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RPCCallEnd", call, goid, err)
}

// RPCCallEnd indicates an expected call of RPCCallEnd.
func (mr *MockLoggerMockRecorder) RPCCallEnd(call, goid, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPCCallEnd", reflect.TypeOf((*MockLogger)(nil).RPCCallEnd), call, goid, err)
}

// RPCCallStart mocks base method.
func (m *MockLogger) RPCCallStart(call *model.APICall, goid uint32) trace2.EventID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPCCallStart", call, goid)
	ret0, _ := ret[0].(trace2.EventID)
	return ret0
}

// RPCCallStart indicates an expected call of RPCCallStart.
func (mr *MockLoggerMockRecorder) RPCCallStart(call, goid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPCCallStart", reflect.TypeOf((*MockLogger)(nil).RPCCallStart), call, goid)
}

// RequestSpanEnd mocks base method.
func (m *MockLogger) RequestSpanEnd(params trace2.RequestSpanEndParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequestSpanEnd", params)
}

// RequestSpanEnd indicates an expected call of RequestSpanEnd.
func (mr *MockLoggerMockRecorder) RequestSpanEnd(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestSpanEnd", reflect.TypeOf((*MockLogger)(nil).RequestSpanEnd), params)
}

// RequestSpanStart mocks base method.
func (m *MockLogger) RequestSpanStart(req *model.Request, goid uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequestSpanStart", req, goid)
}

// RequestSpanStart indicates an expected call of RequestSpanStart.
func (mr *MockLoggerMockRecorder) RequestSpanStart(req, goid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestSpanStart", reflect.TypeOf((*MockLogger)(nil).RequestSpanStart), req, goid)
}

// ServiceInitEnd mocks base method.
func (m *MockLogger) ServiceInitEnd(arg0 trace2.EventParams, arg1 trace2.EventID, arg2 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServiceInitEnd", arg0, arg1, arg2)
}

// ServiceInitEnd indicates an expected call of ServiceInitEnd.
func (mr *MockLoggerMockRecorder) ServiceInitEnd(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceInitEnd", reflect.TypeOf((*MockLogger)(nil).ServiceInitEnd), arg0, arg1, arg2)
}

// ServiceInitStart mocks base method.
func (m *MockLogger) ServiceInitStart(arg0 trace2.ServiceInitStartParams) trace2.EventID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceInitStart", arg0)
	ret0, _ := ret[0].(trace2.EventID)
	return ret0
}

// ServiceInitStart indicates an expected call of ServiceInitStart.
func (mr *MockLoggerMockRecorder) ServiceInitStart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceInitStart", reflect.TypeOf((*MockLogger)(nil).ServiceInitStart), arg0)
}

// WaitAndClear mocks base method.
func (m *MockLogger) WaitAndClear() ([]byte, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitAndClear")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// WaitAndClear indicates an expected call of WaitAndClear.
func (mr *MockLoggerMockRecorder) WaitAndClear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitAndClear", reflect.TypeOf((*MockLogger)(nil).WaitAndClear))
}

// WaitAtLeast mocks base method.
func (m *MockLogger) WaitAtLeast(arg0 time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitAtLeast", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// WaitAtLeast indicates an expected call of WaitAtLeast.
func (mr *MockLoggerMockRecorder) WaitAtLeast(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitAtLeast", reflect.TypeOf((*MockLogger)(nil).WaitAtLeast), arg0)
}

// WaitUntilDone mocks base method.
func (m *MockLogger) WaitUntilDone() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitUntilDone")
}

// WaitUntilDone indicates an expected call of WaitUntilDone.
func (mr *MockLoggerMockRecorder) WaitUntilDone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilDone", reflect.TypeOf((*MockLogger)(nil).WaitUntilDone))
}
