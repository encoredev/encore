// Code generated by MockGen. DO NOT EDIT.
// Source: ./logger.go

// Package mock_trace is a generated GoMock package.
package mock_trace

import (
	context "context"
	http "net/http"
	reflect "reflect"

	model "encore.dev/appruntime/model"
	trace "encore.dev/appruntime/trace"
	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockLogger) Add(event trace.EventType, data []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", event, data)
}

// Add indicates an expected call of Add.
func (mr *MockLoggerMockRecorder) Add(event, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockLogger)(nil).Add), event, data)
}

// BeginAuth mocks base method.
func (m *MockLogger) BeginAuth(call *model.AuthCall, goid uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeginAuth", call, goid)
}

// BeginAuth indicates an expected call of BeginAuth.
func (mr *MockLoggerMockRecorder) BeginAuth(call, goid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginAuth", reflect.TypeOf((*MockLogger)(nil).BeginAuth), call, goid)
}

// BeginCall mocks base method.
func (m *MockLogger) BeginCall(call *model.APICall, goid uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeginCall", call, goid)
}

// BeginCall indicates an expected call of BeginCall.
func (mr *MockLoggerMockRecorder) BeginCall(call, goid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginCall", reflect.TypeOf((*MockLogger)(nil).BeginCall), call, goid)
}

// BeginRequest mocks base method.
func (m *MockLogger) BeginRequest(req *model.Request, goid uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeginRequest", req, goid)
}

// BeginRequest indicates an expected call of BeginRequest.
func (mr *MockLoggerMockRecorder) BeginRequest(req, goid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginRequest", reflect.TypeOf((*MockLogger)(nil).BeginRequest), req, goid)
}

// BodyStream mocks base method.
func (m *MockLogger) BodyStream(p trace.BodyStreamParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BodyStream", p)
}

// BodyStream indicates an expected call of BodyStream.
func (mr *MockLoggerMockRecorder) BodyStream(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BodyStream", reflect.TypeOf((*MockLogger)(nil).BodyStream), p)
}

// CacheOpEnd mocks base method.
func (m *MockLogger) CacheOpEnd(p trace.CacheOpEndParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CacheOpEnd", p)
}

// CacheOpEnd indicates an expected call of CacheOpEnd.
func (mr *MockLoggerMockRecorder) CacheOpEnd(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheOpEnd", reflect.TypeOf((*MockLogger)(nil).CacheOpEnd), p)
}

// CacheOpStart mocks base method.
func (m *MockLogger) CacheOpStart(p trace.CacheOpStartParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CacheOpStart", p)
}

// CacheOpStart indicates an expected call of CacheOpStart.
func (mr *MockLoggerMockRecorder) CacheOpStart(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheOpStart", reflect.TypeOf((*MockLogger)(nil).CacheOpStart), p)
}

// DBQueryEnd mocks base method.
func (m *MockLogger) DBQueryEnd(queryID uint64, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DBQueryEnd", queryID, err)
}

// DBQueryEnd indicates an expected call of DBQueryEnd.
func (mr *MockLoggerMockRecorder) DBQueryEnd(queryID, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBQueryEnd", reflect.TypeOf((*MockLogger)(nil).DBQueryEnd), queryID, err)
}

// DBQueryStart mocks base method.
func (m *MockLogger) DBQueryStart(p trace.DBQueryStartParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DBQueryStart", p)
}

// DBQueryStart indicates an expected call of DBQueryStart.
func (mr *MockLoggerMockRecorder) DBQueryStart(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBQueryStart", reflect.TypeOf((*MockLogger)(nil).DBQueryStart), p)
}

// DBTxEnd mocks base method.
func (m *MockLogger) DBTxEnd(p trace.DBTxEndParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DBTxEnd", p)
}

// DBTxEnd indicates an expected call of DBTxEnd.
func (mr *MockLoggerMockRecorder) DBTxEnd(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBTxEnd", reflect.TypeOf((*MockLogger)(nil).DBTxEnd), p)
}

// DBTxStart mocks base method.
func (m *MockLogger) DBTxStart(p trace.DBTxStartParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DBTxStart", p)
}

// DBTxStart indicates an expected call of DBTxStart.
func (mr *MockLoggerMockRecorder) DBTxStart(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBTxStart", reflect.TypeOf((*MockLogger)(nil).DBTxStart), p)
}

// FinishAuth mocks base method.
func (m *MockLogger) FinishAuth(call *model.AuthCall, uid model.UID, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FinishAuth", call, uid, err)
}

// FinishAuth indicates an expected call of FinishAuth.
func (mr *MockLoggerMockRecorder) FinishAuth(call, uid, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishAuth", reflect.TypeOf((*MockLogger)(nil).FinishAuth), call, uid, err)
}

// FinishCall mocks base method.
func (m *MockLogger) FinishCall(call *model.APICall, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FinishCall", call, err)
}

// FinishCall indicates an expected call of FinishCall.
func (mr *MockLoggerMockRecorder) FinishCall(call, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishCall", reflect.TypeOf((*MockLogger)(nil).FinishCall), call, err)
}

// FinishRequest mocks base method.
func (m *MockLogger) FinishRequest(req *model.Request, resp *model.Response) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FinishRequest", req, resp)
}

// FinishRequest indicates an expected call of FinishRequest.
func (mr *MockLoggerMockRecorder) FinishRequest(req, resp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishRequest", reflect.TypeOf((*MockLogger)(nil).FinishRequest), req, resp)
}

// GetAndClear mocks base method.
func (m *MockLogger) GetAndClear() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAndClear")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetAndClear indicates an expected call of GetAndClear.
func (mr *MockLoggerMockRecorder) GetAndClear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndClear", reflect.TypeOf((*MockLogger)(nil).GetAndClear))
}

// GoClear mocks base method.
func (m *MockLogger) GoClear(spanID model.SpanID, goctr uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GoClear", spanID, goctr)
}

// GoClear indicates an expected call of GoClear.
func (mr *MockLoggerMockRecorder) GoClear(spanID, goctr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoClear", reflect.TypeOf((*MockLogger)(nil).GoClear), spanID, goctr)
}

// GoEnd mocks base method.
func (m *MockLogger) GoEnd(spanID model.SpanID, goctr uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GoEnd", spanID, goctr)
}

// GoEnd indicates an expected call of GoEnd.
func (mr *MockLoggerMockRecorder) GoEnd(spanID, goctr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoEnd", reflect.TypeOf((*MockLogger)(nil).GoEnd), spanID, goctr)
}

// GoStart mocks base method.
func (m *MockLogger) GoStart(spanID model.SpanID, goctr uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GoStart", spanID, goctr)
}

// GoStart indicates an expected call of GoStart.
func (mr *MockLoggerMockRecorder) GoStart(spanID, goctr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoStart", reflect.TypeOf((*MockLogger)(nil).GoStart), spanID, goctr)
}

// HTTPBeginRoundTrip mocks base method.
func (m *MockLogger) HTTPBeginRoundTrip(httpReq *http.Request, req *model.Request, goid uint32) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPBeginRoundTrip", httpReq, req, goid)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HTTPBeginRoundTrip indicates an expected call of HTTPBeginRoundTrip.
func (mr *MockLoggerMockRecorder) HTTPBeginRoundTrip(httpReq, req, goid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPBeginRoundTrip", reflect.TypeOf((*MockLogger)(nil).HTTPBeginRoundTrip), httpReq, req, goid)
}

// HTTPCompleteRoundTrip mocks base method.
func (m *MockLogger) HTTPCompleteRoundTrip(req *http.Request, resp *http.Response, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HTTPCompleteRoundTrip", req, resp, err)
}

// HTTPCompleteRoundTrip indicates an expected call of HTTPCompleteRoundTrip.
func (mr *MockLoggerMockRecorder) HTTPCompleteRoundTrip(req, resp, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPCompleteRoundTrip", reflect.TypeOf((*MockLogger)(nil).HTTPCompleteRoundTrip), req, resp, err)
}

// PublishEnd mocks base method.
func (m *MockLogger) PublishEnd(publishID uint64, messageID string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishEnd", publishID, messageID, err)
}

// PublishEnd indicates an expected call of PublishEnd.
func (mr *MockLoggerMockRecorder) PublishEnd(publishID, messageID, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEnd", reflect.TypeOf((*MockLogger)(nil).PublishEnd), publishID, messageID, err)
}

// PublishStart mocks base method.
func (m *MockLogger) PublishStart(topic string, msg []byte, spanID model.SpanID, goid uint32, publishID uint64, skipFrames int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishStart", topic, msg, spanID, goid, publishID, skipFrames)
}

// PublishStart indicates an expected call of PublishStart.
func (mr *MockLoggerMockRecorder) PublishStart(topic, msg, spanID, goid, publishID, skipFrames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishStart", reflect.TypeOf((*MockLogger)(nil).PublishStart), topic, msg, spanID, goid, publishID, skipFrames)
}

// ServiceInitEnd mocks base method.
func (m *MockLogger) ServiceInitEnd(initCtr uint64, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServiceInitEnd", initCtr, err)
}

// ServiceInitEnd indicates an expected call of ServiceInitEnd.
func (mr *MockLoggerMockRecorder) ServiceInitEnd(initCtr, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceInitEnd", reflect.TypeOf((*MockLogger)(nil).ServiceInitEnd), initCtr, err)
}

// ServiceInitStart mocks base method.
func (m *MockLogger) ServiceInitStart(p trace.ServiceInitStartParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServiceInitStart", p)
}

// ServiceInitStart indicates an expected call of ServiceInitStart.
func (mr *MockLoggerMockRecorder) ServiceInitStart(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceInitStart", reflect.TypeOf((*MockLogger)(nil).ServiceInitStart), p)
}
